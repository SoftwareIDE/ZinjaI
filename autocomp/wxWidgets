<wx/wx.h>

	wxID_ANY
	wxID_LOWEST
	wxID_OPEN
	wxID_CLOSE
	wxID_NEW
	wxID_SAVE
	wxID_SAVEAS
	wxID_REVERT
	wxID_EXIT
	wxID_UNDO
	wxID_REDO
	wxID_HELP
	wxID_PRINT
	wxID_PRINT_SETUP
	wxID_PAGE_SETUP
	wxID_PREVIEW
	wxID_ABOUT
	wxID_HELP_CONTENTS
	wxID_HELP_INDEX
	wxID_HELP_SEARCH
	wxID_HELP_COMMANDS
	wxID_HELP_PROCEDURES
	wxID_HELP_CONTEXT
	wxID_CLOSE_ALL

	wxID_EDIT
	wxID_CUT
	wxID_COPY
	wxID_PASTE
	wxID_CLEAR
	wxID_FIND
	wxID_DUPLICATE
	wxID_SELECTALL
	wxID_DELETE
	wxID_REPLACE
	wxID_REPLACE_ALL
	wxID_PROPERTIES

	wxID_VIEW_DETAILS
	wxID_VIEW_LARGEICONS
	wxID_VIEW_SMALLICONS
	wxID_VIEW_LIST
	wxID_VIEW_SORTDATE
	wxID_VIEW_SORTNAME
	wxID_VIEW_SORTSIZE
	wxID_VIEW_SORTTYPE

	wxID_FILE
	wxID_FILE1
	wxID_FILE2
	wxID_FILE3
	wxID_FILE4
	wxID_FILE5
	wxID_FILE6
	wxID_FILE7
	wxID_FILE8
	wxID_FILE9

	wxID_OK
	wxID_CANCEL
	wxID_APPLY
	wxID_YES
	wxID_NO
	wxID_STATIC
	wxID_FORWARD
	wxID_BACKWARD
	wxID_DEFAULT
	wxID_MORE
	wxID_SETUP
	wxID_RESET
	wxID_CONTEXT_HELP
	wxID_YESTOALL
	wxID_NOTOALL
	wxID_ABORT
	wxID_RETRY
	wxID_IGNORE

	wxID_UP
	wxID_DOWN
	wxID_HOME
	wxID_REFRESH
	wxID_STOP
	wxID_INDEX

	wxID_BOLD
	wxID_ITALIC
	wxID_JUSTIFY_CENTER
	wxID_JUSTIFY_FILL
	wxID_JUSTIFY_RIGHT
	wxID_JUSTIFY_LEFT
	wxID_UNDERLINE
	wxID_INDENT
	wxID_UNINDENT
	wxID_ZOOM_100
	wxID_ZOOM_FIT
	wxID_ZOOM_IN
	wxID_ZOOM_OUT
	wxID_UNDELETE
	wxID_REVERT_TO_SAVED

	wxID_SYSTEM_MENU
	wxID_CLOSE_FRAME
	wxID_MOVE_FRAME
	wxID_RESIZE_FRAME
	wxID_MAXIMIZE_FRAME
	wxID_ICONIZE_FRAME
	wxID_RESTORE_FRAME

	wxID_FILEDLGG

	wxID_HIGHEST



	WXK_BACK
	WXK_TAB
	WXK_RETURN
	WXK_ESCAPE
	WXK_SPACE
	WXK_DELETE

	WXK_START
	WXK_LBUTTON
	WXK_RBUTTON
	WXK_CANCEL
	WXK_MBUTTON
	WXK_CLEAR
	WXK_SHIFT
	WXK_ALT
	WXK_CONTROL
	WXK_MENU
	WXK_PAUSE
	WXK_CAPITAL
	WXK_END
	WXK_HOME
	WXK_LEFT
	WXK_UP
	WXK_RIGHT
	WXK_DOWN
	WXK_SELECT
	WXK_PRINT
	WXK_EXECUTE
	WXK_SNAPSHOT
	WXK_INSERT
	WXK_HELP
	WXK_NUMPAD0
	WXK_NUMPAD1
	WXK_NUMPAD2
	WXK_NUMPAD3
	WXK_NUMPAD4
	WXK_NUMPAD5
	WXK_NUMPAD6
	WXK_NUMPAD7
	WXK_NUMPAD8
	WXK_NUMPAD9
	WXK_MULTIPLY
	WXK_ADD
	WXK_SEPARATOR
	WXK_SUBTRACT
	WXK_DECIMAL
	WXK_DIVIDE
	WXK_F1
	WXK_F2
	WXK_F3
	WXK_F4
	WXK_F5
	WXK_F6
	WXK_F7
	WXK_F8
	WXK_F9
	WXK_F10
	WXK_F11
	WXK_F12
	WXK_F13
	WXK_F14
	WXK_F15
	WXK_F16
	WXK_F17
	WXK_F18
	WXK_F19
	WXK_F20
	WXK_F21
	WXK_F22
	WXK_F23
	WXK_F24
	WXK_NUMLOCK
	WXK_SCROLL
	WXK_PAGEUP
	WXK_PAGEDOWN

	WXK_NUMPAD_SPACE
	WXK_NUMPAD_TAB
	WXK_NUMPAD_ENTER
	WXK_NUMPAD_F1
	WXK_NUMPAD_F2
	WXK_NUMPAD_F3
	WXK_NUMPAD_F4
	WXK_NUMPAD_HOME
	WXK_NUMPAD_LEFT
	WXK_NUMPAD_UP
	WXK_NUMPAD_RIGHT
	WXK_NUMPAD_DOWN
	WXK_NUMPAD_PAGEUP
	WXK_NUMPAD_PAGEDOWN
	WXK_NUMPAD_END
	WXK_NUMPAD_BEGIN
	WXK_NUMPAD_INSERT
	WXK_NUMPAD_DELETE
	WXK_NUMPAD_EQUAL
	WXK_NUMPAD_MULTIPLY
	WXK_NUMPAD_ADD
	WXK_NUMPAD_SEPARATOR
	WXK_NUMPAD_SUBTRACT
	WXK_NUMPAD_DECIMAL
	WXK_NUMPAD_DIVIDE

	WXK_WINDOWS_LEFT
	WXK_WINDOWS_RIGHT
	WXK_WINDOWS_MENU
	WXK_COMMAND

	WXK_SPECIAL1
	WXK_SPECIAL2
	WXK_SPECIAL3
	WXK_SPECIAL4
	WXK_SPECIAL5
	WXK_SPECIAL6
	WXK_SPECIAL7
	WXK_SPECIAL8
	WXK_SPECIAL9
	WXK_SPECIAL10
	WXK_SPECIAL11
	WXK_SPECIAL12
	WXK_SPECIAL13
	WXK_SPECIAL14
	WXK_SPECIAL15
	WXK_SPECIAL16
	WXK_SPECIAL17
	WXK_SPECIAL18
	WXK_SPECIAL19
	WXK_SPECIAL20

	wxMOD_NONE
	wxMOD_ALT
	wxMOD_CONTROL
	wxMOD_ALTGR
	wxMOD_SHIFT
	wxMOD_META
	wxMOD_CMD
	wxMOD_ALL

	wxLANGUAGE_DEFAULT
	wxLANGUAGE_UNKNOWN
	wxLANGUAGE_USER_DEFINED
	wxLANGUAGE_ABKHAZIAN
	wxLANGUAGE_AFAR
	wxLANGUAGE_AFRIKAANS
	wxLANGUAGE_ALBANIAN
	wxLANGUAGE_AMHARIC
	wxLANGUAGE_ARABIC
	wxLANGUAGE_ARABIC_ALGERIA
	wxLANGUAGE_ARABIC_BAHRAIN
	wxLANGUAGE_ARABIC_EGYPT
	wxLANGUAGE_ARABIC_IRAQ
	wxLANGUAGE_ARABIC_JORDAN
	wxLANGUAGE_ARABIC_KUWAIT
	wxLANGUAGE_ARABIC_LEBANON
	wxLANGUAGE_ARABIC_LIBYA
	wxLANGUAGE_ARABIC_MOROCCO
	wxLANGUAGE_ARABIC_OMAN
	wxLANGUAGE_ARABIC_QATAR
	wxLANGUAGE_ARABIC_SAUDI_ARABIA
	wxLANGUAGE_ARABIC_SUDAN
	wxLANGUAGE_ARABIC_SYRIA
	wxLANGUAGE_ARABIC_TUNISIA
	wxLANGUAGE_ARABIC_UAE
	wxLANGUAGE_ARABIC_YEMEN
	wxLANGUAGE_ARMENIAN
	wxLANGUAGE_ASSAMESE
	wxLANGUAGE_AYMARA
	wxLANGUAGE_AZERI
	wxLANGUAGE_AZERI_CYRILLIC
	wxLANGUAGE_AZERI_LATIN
	wxLANGUAGE_BASHKIR
	wxLANGUAGE_BASQUE
	wxLANGUAGE_BELARUSIAN
	wxLANGUAGE_BENGALI
	wxLANGUAGE_BHUTANI
	wxLANGUAGE_BIHARI
	wxLANGUAGE_BISLAMA
	wxLANGUAGE_BRETON
	wxLANGUAGE_BULGARIAN
	wxLANGUAGE_BURMESE
	wxLANGUAGE_CAMBODIAN
	wxLANGUAGE_CATALAN
	wxLANGUAGE_CHINESE
	wxLANGUAGE_CHINESE_SIMPLIFIED
	wxLANGUAGE_CHINESE_TRADITIONAL
	wxLANGUAGE_CHINESE_HONGKONG
	wxLANGUAGE_CHINESE_MACAU
	wxLANGUAGE_CHINESE_SINGAPORE
	wxLANGUAGE_CHINESE_TAIWAN
	wxLANGUAGE_CORSICAN
	wxLANGUAGE_CROATIAN
	wxLANGUAGE_CZECH
	wxLANGUAGE_DANISH
	wxLANGUAGE_DUTCH
	wxLANGUAGE_DUTCH_BELGIAN
	wxLANGUAGE_ENGLISH
	wxLANGUAGE_ENGLISH_UK
	wxLANGUAGE_ENGLISH_US
	wxLANGUAGE_ENGLISH_AUSTRALIA
	wxLANGUAGE_ENGLISH_BELIZE
	wxLANGUAGE_ENGLISH_BOTSWANA
	wxLANGUAGE_ENGLISH_CANADA
	wxLANGUAGE_ENGLISH_CARIBBEAN
	wxLANGUAGE_ENGLISH_DENMARK
	wxLANGUAGE_ENGLISH_EIRE
	wxLANGUAGE_ENGLISH_JAMAICA
	wxLANGUAGE_ENGLISH_NEW_ZEALAND
	wxLANGUAGE_ENGLISH_PHILIPPINES
	wxLANGUAGE_ENGLISH_SOUTH_AFRICA
	wxLANGUAGE_ENGLISH_TRINIDAD
	wxLANGUAGE_ENGLISH_ZIMBABWE
	wxLANGUAGE_ESPERANTO
	wxLANGUAGE_ESTONIAN
	wxLANGUAGE_FAEROESE
	wxLANGUAGE_FARSI
	wxLANGUAGE_FIJI
	wxLANGUAGE_FINNISH
	wxLANGUAGE_FRENCH
	wxLANGUAGE_FRENCH_BELGIAN
	wxLANGUAGE_FRENCH_CANADIAN
	wxLANGUAGE_FRENCH_LUXEMBOURG
	wxLANGUAGE_FRENCH_MONACO
	wxLANGUAGE_FRENCH_SWISS
	wxLANGUAGE_FRISIAN
	wxLANGUAGE_GALICIAN
	wxLANGUAGE_GEORGIAN
	wxLANGUAGE_GERMAN
	wxLANGUAGE_GERMAN_AUSTRIAN
	wxLANGUAGE_GERMAN_BELGIUM
	wxLANGUAGE_GERMAN_LIECHTENSTEIN
	wxLANGUAGE_GERMAN_LUXEMBOURG
	wxLANGUAGE_GERMAN_SWISS
	wxLANGUAGE_GREEK
	wxLANGUAGE_GREENLANDIC
	wxLANGUAGE_GUARANI
	wxLANGUAGE_GUJARATI
	wxLANGUAGE_HAUSA
	wxLANGUAGE_HEBREW
	wxLANGUAGE_HINDI
	wxLANGUAGE_HUNGARIAN
	wxLANGUAGE_ICELANDIC
	wxLANGUAGE_INDONESIAN
	wxLANGUAGE_INTERLINGUA
	wxLANGUAGE_INTERLINGUE
	wxLANGUAGE_INUKTITUT
	wxLANGUAGE_INUPIAK
	wxLANGUAGE_IRISH
	wxLANGUAGE_ITALIAN
	wxLANGUAGE_ITALIAN_SWISS
	wxLANGUAGE_JAPANESE
	wxLANGUAGE_JAVANESE
	wxLANGUAGE_KANNADA
	wxLANGUAGE_KASHMIRI
	wxLANGUAGE_KASHMIRI_INDIA
	wxLANGUAGE_KAZAKH
	wxLANGUAGE_KERNEWEK
	wxLANGUAGE_KINYARWANDA
	wxLANGUAGE_KIRGHIZ
	wxLANGUAGE_KIRUNDI
	wxLANGUAGE_KONKANI
	wxLANGUAGE_KOREAN
	wxLANGUAGE_KURDISH
	wxLANGUAGE_LAOTHIAN
	wxLANGUAGE_LATIN
	wxLANGUAGE_LATVIAN
	wxLANGUAGE_LINGALA
	wxLANGUAGE_LITHUANIAN
	wxLANGUAGE_MACEDONIAN
	wxLANGUAGE_MALAGASY
	wxLANGUAGE_MALAY
	wxLANGUAGE_MALAYALAM
	wxLANGUAGE_MALAY_BRUNEI_DARUSSALAM
	wxLANGUAGE_MALAY_MALAYSIA
	wxLANGUAGE_MALTESE
	wxLANGUAGE_MANIPURI
	wxLANGUAGE_MAORI
	wxLANGUAGE_MARATHI
	wxLANGUAGE_MOLDAVIAN
	wxLANGUAGE_MONGOLIAN
	wxLANGUAGE_NAURU
	wxLANGUAGE_NEPALI
	wxLANGUAGE_NEPALI_INDIA
	wxLANGUAGE_NORWEGIAN_BOKMAL
	wxLANGUAGE_NORWEGIAN_NYNORSK
	wxLANGUAGE_OCCITAN
	wxLANGUAGE_ORIYA
	wxLANGUAGE_OROMO
	wxLANGUAGE_PASHTO
	wxLANGUAGE_POLISH
	wxLANGUAGE_PORTUGUESE
	wxLANGUAGE_PORTUGUESE_BRAZILIAN
	wxLANGUAGE_PUNJABI
	wxLANGUAGE_QUECHUA
	wxLANGUAGE_RHAETO_ROMANCE
	wxLANGUAGE_ROMANIAN
	wxLANGUAGE_RUSSIAN
	wxLANGUAGE_RUSSIAN_UKRAINE
	wxLANGUAGE_SAMI
	wxLANGUAGE_SAMOAN
	wxLANGUAGE_SANGHO
	wxLANGUAGE_SANSKRIT
	wxLANGUAGE_SCOTS_GAELIC
	wxLANGUAGE_SERBIAN
	wxLANGUAGE_SERBIAN_CYRILLIC
	wxLANGUAGE_SERBIAN_LATIN
	wxLANGUAGE_SERBO_CROATIAN
	wxLANGUAGE_SESOTHO
	wxLANGUAGE_SETSWANA
	wxLANGUAGE_SHONA
	wxLANGUAGE_SINDHI
	wxLANGUAGE_SINHALESE
	wxLANGUAGE_SISWATI
	wxLANGUAGE_SLOVAK
	wxLANGUAGE_SLOVENIAN
	wxLANGUAGE_SOMALI
	wxLANGUAGE_SPANISH
	wxLANGUAGE_SPANISH_ARGENTINA
	wxLANGUAGE_SPANISH_BOLIVIA
	wxLANGUAGE_SPANISH_CHILE
	wxLANGUAGE_SPANISH_COLOMBIA
	wxLANGUAGE_SPANISH_COSTA_RICA
	wxLANGUAGE_SPANISH_DOMINICAN_REPUBLIC
	wxLANGUAGE_SPANISH_ECUADOR
	wxLANGUAGE_SPANISH_EL_SALVADOR
	wxLANGUAGE_SPANISH_GUATEMALA
	wxLANGUAGE_SPANISH_HONDURAS
	wxLANGUAGE_SPANISH_MEXICAN
	wxLANGUAGE_SPANISH_MODERN
	wxLANGUAGE_SPANISH_NICARAGUA
	wxLANGUAGE_SPANISH_PANAMA
	wxLANGUAGE_SPANISH_PARAGUAY
	wxLANGUAGE_SPANISH_PERU
	wxLANGUAGE_SPANISH_PUERTO_RICO
	wxLANGUAGE_SPANISH_URUGUAY
	wxLANGUAGE_SPANISH_US
	wxLANGUAGE_SPANISH_VENEZUELA
	wxLANGUAGE_SUNDANESE
	wxLANGUAGE_SWAHILI
	wxLANGUAGE_SWEDISH
	wxLANGUAGE_SWEDISH_FINLAND
	wxLANGUAGE_TAGALOG
	wxLANGUAGE_TAJIK
	wxLANGUAGE_TAMIL
	wxLANGUAGE_TATAR
	wxLANGUAGE_TELUGU
	wxLANGUAGE_THAI
	wxLANGUAGE_TIBETAN
	wxLANGUAGE_TIGRINYA
	wxLANGUAGE_TONGA
	wxLANGUAGE_TSONGA
	wxLANGUAGE_TURKISH
	wxLANGUAGE_TURKMEN
	wxLANGUAGE_TWI
	wxLANGUAGE_UIGHUR
	wxLANGUAGE_UKRAINIAN
	wxLANGUAGE_URDU
	wxLANGUAGE_URDU_INDIA
	wxLANGUAGE_URDU_PAKISTAN
	wxLANGUAGE_UZBEK
	wxLANGUAGE_UZBEK_CYRILLIC
	wxLANGUAGE_UZBEK_LATIN
	wxLANGUAGE_VALENCIAN
	wxLANGUAGE_VIETNAMESE
	wxLANGUAGE_VOLAPUK
	wxLANGUAGE_WELSH
	wxLANGUAGE_WOLOF
	wxLANGUAGE_XHOSA
	wxLANGUAGE_YIDDISH
	wxLANGUAGE_YORUBA
	wxLANGUAGE_ZHUANG
	wxLANGUAGE_ZULU




	wxID_ABOUT
	wxID_ADD
	wxID_APPLY
	wxID_BOLD
	wxID_CANCEL
	wxID_CLEAR
	wxID_CLOSE
	wxID_COPY
	wxID_CUT
	wxID_DELETE
	wxID_EDIT
	wxID_FIND
	wxID_FILE
	wxID_REPLACE
	wxID_BACKWARD
	wxID_DOWN
	wxID_FORWARD
	wxID_UP
	wxID_HELP
	wxID_HOME
	wxID_INDENT
	wxID_INDEX
	wxID_ITALIC
	wxID_JUSTIFY_CENTER
	wxID_JUSTIFY_FILL
	wxID_JUSTIFY_LEFT
	wxID_JUSTIFY_RIGHT
	wxID_NEW
	wxID_NO
	wxID_OK
	wxID_OPEN
	wxID_PASTE
	wxID_PREFERENCES
	wxID_PRINT
	wxID_PREVIEW
	wxID_PROPERTIES
	wxID_EXIT
	wxID_REDO
	wxID_REFRESH
	wxID_REMOVE
	wxID_REVERT_TO_SAVED
	wxID_SAVE
	wxID_SAVEAS
	wxID_SELECTALL
	wxID_STOP
	wxID_UNDELETE
	wxID_UNDERLINE
	wxID_UNDO
	wxID_UNINDENT
	wxID_YES
	wxID_ZOOM_100
	wxID_ZOOM_FIT
	wxID_ZOOM_IN
	wxID_ZOOM_OUT

	wxCAPTION
	wxMINIMIZE_BOX
	wxMAXIMIZE_BOX
	wxRESIZE_BORDER

	wxMOD_NONE
	wxMOD_ALT
	wxMOD_CONTROL
	wxMOD_ALTGR
	wxMOD_SHIFT
	wxMOD_META
	wxMOD_CMD
	wxMOD_ALL

	wxACCEL_ALT
	wxACCEL_SHIFT
	wxACCEL_CTRL
	wxACCEL_NORMAL

	wxPROCESS_DEFAULT
	wxPROCESS_REDIRECT
	wxEXEC_ASYNC
	wxEXEC_SYNC
	wxEXEC_NOHIDE
	wxEXEC_MAKE_GROUP_LEADER
	wxSIGNONE
	wxSIGHUP
	wxSIGINT
	wxSIGQUIT
	wxSIGILL
	wxSIGTRAP
	wxSIGABRT
	wxSIGEMT
	wxSIGFPE
	wxSIGKILL
	wxSIGBUS
	wxSIGSEGV
	wxSIGSYS
	wxSIGPIPE
	wxSIGALRM
	wxSIGTERM
	wxKILL_OK
	wxKILL_BAD_SIGNAL
	wxKILL_ACCESS_DENIED
	wxKILL_NO_PROCESS
	wxKILL_ERROR
	wxKILL_NOCHILDREN
	wxKILL_CHILDREN

	wxOK
	wxCANCEL
	wxYES
	wxNO
	wxYES_NO
	wxYES_DEFAULT
	wxNO_DEFAULT
	wxICON_EXCLAMATION
	wxICON_HAND
	wxICON_ERROR
	wxICON_QUESTION
	wxICON_INFORMATION
	wxSTAY_ON_TOP
	
	wxVERTICAL
	wxHORIZONTAL

	DECLARE_EVENT_TABLE()
	BEGIN_EVENT_TABLE(child,base)
	END_EVENT_TABLE()

	wxDIR_FILES
	wxDIR_DIRS
	wxDIR_HIDDEN
	wxDIR_DOTDOT
	wxDIR_DEFAULT

	wxSize wxDefaultSize
	wxPoint wxDefaultPosition
  
	int wxNOT_FOUND
<wx/aboutdlg.h>
	class wxAboutDialogInfo
		wxAboutDialogInfo()
		void AddArtist(const wxString& artist)
		void AddDeveloper(const wxString& developer)
		void AddDocWriter(const wxString& docwriter)
		void AddTranslator(const wxString& translator)
		void SetArtists(const wxArrayString& artists)
		void SetCopyright(const wxString& copyright)
		void SetDescription(const wxString& desc)
		void SetDevelopers(const wxArrayString& developers)
		void SetDocWriters(const wxArrayString& docwriters)
		void SetIcon(const wxIcon& icon)
		void SetLicence(const wxString& licence)
		void SetLicense(const wxString& licence)
		void SetName(const wxString& name)
		void SetTranslators(const wxArrayString& translators)
		void SetVersion(const wxString& version)
		void SetWebSite(const wxString& url, const wxString& desc = wxEmptyString)
<wx/accel.h>
	class wxAcceleratorEntry
		wxAcceleratorEntry()
		wxAcceleratorEntry(int flags, int keyCode, int cmd)
		int GetCommand() const
		int GetFlags() const
		int GetKeyCode() const
		void Set(int flags, int keyCode, int cmd)
<wx/accel.h>
	class wxAcceleratorTable public wxObject
		wxAcceleratorTable()
		wxAcceleratorTable(const wxAcceleratorTable& table)
		wxAcceleratorTable(int n, wxAcceleratorEntry entries[])
		wxAcceleratorTable(const wxString& resource)
		~wxAcceleratorTable()
		bool IsOk() const
		wxAcceleratorTable& operator =(const wxAcceleratorTable& accel)
<wx/access.h>
	class wxAccessible public wxObject
		wxAccessible(wxWindow* win = NULL)
		~wxAccessible()
		virtual wxAccStatus DoDefaultAction(int childId)
		virtual wxAccStatus GetChild(int childId, wxAccessible** child)
		virtual wxAccStatus GetChildCount(int* childCount)
		virtual wxAccStatus GetDefaultAction(int childId, wxString* actionName)
		virtual wxAccStatus GetDescription(int childId, wxString* description)
		virtual wxAccStatus GetFocus(int* childId, wxAccessible** child)
		virtual wxAccStatus GetHelpText(int childId, wxString* helpText)
		virtual wxAccStatus GetKeyboardShortcut(int childId, wxString* shortcut)
		virtual wxAccStatus GetLocation(wxRect& rect, int elementId)
		virtual wxAccStatus GetName(int childId, wxString* name)
		virtual wxAccStatus GetParent(wxAccessible** parent)
		virtual wxAccStatus GetRole(int childId, wxAccRole* role)
		virtual wxAccStatus GetSelections(wxVariant* selections)
		virtual wxAccStatus GetState(int childId, long* state)
		virtual wxAccStatus GetValue(int childId, wxString* strValue)
		wxWindow* GetWindow()
		virtual wxAccStatus HitTest(const wxPoint& pt, int* childId, wxAccessible** childObject)
		virtual wxAccStatus Navigate(wxNavDir navDir, int fromId, int* toId, wxAccessible** toObject)
		virtual static void NotifyEvent(int eventType, wxWindow* window, wxAccObject objectType, int objectType)
		virtual wxAccStatus Select(int childId, wxAccSelectionFlags selectFlags)
		void SetWindow(wxWindow* window)
<wx/event.h>
	EVT_ACTIVATE(func)
	EVT_ACTIVATE_APP(func)
	EVT_HIBERNATE(func)
	class wxActivateEvent public wxEvent public wxObject
		wxActivateEvent(WXTYPE eventType = 0, bool active = true, int id = 0)
		bool GetActive() const
<wx/msw/ole/activex.h>
	class wxActiveXContainer public wxControl
<wx/msw/ole/activex.h>
	EVT_ACTIVEX(func)
	class wxActiveXEvent public wxCommandEvent
		size_t ParamCount() const
		wxString ParamType(size_t idx) const
		wxString ParamName(size_t idx) const
		wxVariant operator[](size_t idx)
		DISPID GetDispatchId(int idx) const
<wx/animate.h>
	class wxAnimation public wxGDIObject public wxObject
		wxAnimation()
		wxAnimation(const wxAnimation& anim)
		wxAnimation(const wxString& name, wxAnimationType type = wxANIMATION_TYPE_ANY)
		~wxAnimation()
		int GetDelay(unsigned int i) const
		unsigned int GetFrameCount() const
		wxImage GetFrame(unsigned int i) const
		wxSize GetSize() const
		bool IsOk() const
		bool Load(wxInputStream& stream, wxAnimationType type = wxANIMATION_TYPE_ANY)
		bool LoadFile(const wxString& name, wxAnimationType type = wxANIMATION_TYPE_ANY)
		wxAnimation& operator =(const wxAnimation& brush)
<wx/animate.h>
	wxAC_DEFAULT_STYLE
	wxAC_NO_AUTORESIZE
	class wxAnimationCtrl public wxControl public wxWindow public wxEvtHandler public wxObject
		wxAnimationCtrl(wxWindow *parent,wxWindowID id,const wxAnimation& anim,const wxPoint& pos = wxDefaultPosition,const wxSize& size = wxDefaultSize,long style = wxAC_DEFAULT_STYLE,const wxString& name = "animationctrl")
		bool Create(wxWindow *parent,wxWindowID id,const wxAnimation& anim,const wxPoint& pos = wxDefaultPosition,const wxSize& size = wxDefaultSize,long style = wxAC_DEFAULT_STYLE,const wxString& name = "animationctrl")
		wxAnimation GetAnimation() const
		wxBitmap GetInactiveBitmap() const
		bool IsPlaying() const
		bool LoadFile(const wxString & file, wxAnimationType animType = wxANIMATION_TYPE_ANY)
		bool Play()
		void SetAnimation(const wxAnimation & anim)
		void SetInactiveBitmap(const wxBitmap& bmp)
		void Stop()
<wx/app.h>
	class wxApp public wxEvtHandler public wxObject
		wxApp()
		virtual ~wxApp()
		virtual wxLog* CreateLogTarget()
		virtual wxAppTraits * CreateTraits()
		virtual void Dispatch()
		virtual void ExitMainLoop()
		int FilterEvent(wxEvent& event)
		wxString GetAppName() const
		wxString GetClassName() const
		bool GetExitOnFrameDelete() const
		static wxAppConsole * GetInstance()
		virtual wxWindow * GetTopWindow() const
		wxAppTraits * GetTraits()
		bool GetUseBestVisual() const
		wxString GetVendorName() const
		bool IsActive() const
		static bool IsMainLoopRunning()
		virtual int MainLoop()
		void OnAssertFailure(const wxChar *file, int line, const wxChar *func, const wxChar *cond, const wxChar *msg)
		bool OnCmdLineError(wxCmdLineParser& parser)
		bool OnCmdLineHelp(wxCmdLineParser& parser)
		bool OnCmdLineParsed(wxCmdLineParser& parser)
		virtual bool OnExceptionInMainLoop()
		virtual int OnExit()
		void OnFatalException()
		bool OnInit()
		void OnInitCmdLine(wxCmdLineParser& parser)
		virtual int OnRun()
		virtual void OnUnhandledException()
		bool ProcessMessage(WXMSG *msg)
		virtual bool Pending()
		bool SendIdleEvents(wxWindow* win, wxIdleEvent& event)
		void SetAppName(const wxString& name)
		void SetClassName(const wxString& name)
		void SetExitOnFrameDelete(bool flag)
		static void SetInstance(wxAppConsole* app)
		void SetTopWindow(wxWindow* window)
		void SetVendorName(const wxString& name)
		void SetUseBestVisual(bool flag, bool forceTrueColour = false)
		virtual void HandleEvent(wxEvtHandler *handler, wxEventFunction func, wxEvent& event) const
		bool Yield(bool onlyIfNeeded = false)
<wx/apptrait.h>
	class wxAppTraits
		virtual wxFontMapper * CreateFontMapper()
		virtual wxLog * CreateLogTarget()
		virtual wxMessageOutput * CreateMessageOutput()
		virtual wxRendererNative * CreateRenderer()
		virtual wxString GetDesktopEnvironment() const
		virtual wxStandardPaths & GetStandardPaths()
		virtual wxPortId GetToolkitVersion(int *major = NULL, int *minor = NULL)
		virtual bool HasStderr()
		bool IsUsingUniversalWidgets() const
		virtual bool ShowAssertDialog(const wxString & msg)
<wx/archive.h>
	class wxArchiveClassFactory public wxObject
		wxMBConv& GetConv() const
		void SetConv(wxMBConv& conv)
		bool CanHandle(const wxChar* protocol, wxStreamProtocolType type = wxSTREAM_PROTOCOL) const
		static const wxArchiveClassFactory* Find(const wxChar* protocol, wxStreamProtocolType type = wxSTREAM_PROTOCOL)
		static const wxArchiveClassFactory* GetFirst()
		const wxArchiveClassFactory* GetNext() const
		wxString GetInternalName(const wxString& name, wxPathFormat format = wxPATH_NATIVE) const
		wxString GetProtocol() const
		const wxChar * const* GetProtocols(wxStreamProtocolType type = wxSTREAM_PROTOCOL) const
		wxArchiveEntry* NewEntry() const
		wxArchiveInputStream* NewStream(wxInputStream& stream) const
		wxArchiveOutputStream* NewStream(wxOutputStream& stream) const
		wxArchiveInputStream* NewStream(wxInputStream* stream) const
		wxArchiveOutputStream* NewStream(wxOutputStream* stream) const
		void PushFront()
		void Remove()
<wx/archive.h>
	class wxArchiveEntry public wxObject
		wxArchiveEntry* Clone() const
		wxDateTime GetDateTime() const
		void SetDateTime(const wxDateTime& dt)
		wxPathFormat GetInternalFormat() const
		wxString GetInternalName() const
		wxString GetName(wxPathFormat format = wxPATH_NATIVE) const
		void SetName(const wxString& name, wxPathFormat format = wxPATH_NATIVE)
		off_t GetOffset() const
		off_t GetSize() const
		void SetSize(off_t size)
		bool IsDir() const
		void SetIsDir(bool isDir = true)
		bool IsReadOnly() const
		void SetIsReadOnly(bool isReadOnly = true)
		void SetNotifier(wxArchiveNotifier& notifier)
		void UnsetNotifier()
<wx/archive.h>
	class wxArchiveInputStream public wxFilterInputStream
		bool CloseEntry()
		wxArchiveEntry* GetNextEntry()
		bool OpenEntry(wxArchiveEntry& entry)
<wx/archive.h>
	class wxArchiveIterator
		wxArchiveIterator()
		wxArchiveIterator(Arc&amp; arc)
		const T&amp; operator*() const
		wxArchiveIterator& operator++()
		wxArchiveIterator& operator++(int)
<wx/archive.h>
	class wxArchiveNotifier
		void OnEntryUpdated(class wxArchiveEntry&amp; entry)
<wx/archive.h>
	class wxArchiveOutputStream public wxFilterOutputStream
		~wxArchiveOutputStream()
		bool Close()
		bool CloseEntry()
		bool CopyArchiveMetaData(wxArchiveInputStream& stream)
		bool CopyEntry(wxArchiveEntry* entry, wxArchiveInputStream& stream)
		bool PutNextDirEntry(const wxString& name, const wxDateTime& dt = wxDateTime::Now())
		bool PutNextEntry(wxArchiveEntry* entry)
		bool PutNextEntry(const wxString& name, const wxDateTime& dt = wxDateTime::Now(), off_t size = wxInvalidOffset)
<wx/dynarray.h>
	class wxArray
		WX_DEFINE_ARRAY(T, name)
		WX_DEFINE_EXPORTED_ARRAY(T, name)
		WX_DEFINE_USER_EXPORTED_ARRAY(T, name, exportspec)
		WX_DEFINE_SORTED_ARRAY(T, name)
		WX_DEFINE_SORTED_EXPORTED_ARRAY(T, name)
		WX_DEFINE_SORTED_USER_EXPORTED_ARRAY(T, name)
		WX_DECLARE_OBJARRAY(T, name)
		WX_DECLARE_EXPORTED_OBJARRAY(T, name)
		WX_DECLARE_USER_EXPORTED_OBJARRAY(T, name)
		WX_DEFINE_OBJARRAY(name)
		WX_DEFINE_EXPORTED_OBJARRAY(name)
		WX_DEFINE_USER_EXPORTED_OBJARRAY(name)
		void WX_APPEND_ARRAY(wxArray& array, wxArray& other)
		void WX_PREPEND_ARRAY(wxArray& array, wxArray& other)
		void WX_CLEAR_ARRAY(wxArray& array)
		wxArray()
		wxObjArray()
		wxSortedArray(int (*)(T first, T second)compareFunction)
		wxArray(const wxArray& array)
		wxSortedArray(const wxSortedArray&amp; array)
		wxObjArray(const wxObjArray&amp; array)
		wxArray& operator=(const wxArray& array)
		wxSortedArray&amp; operator=(const wxSortedArray&amp; array)
		wxObjArray&amp; operator=(const wxObjArray&amp; array)
		~wxArray()
		~wxSortedArray()
		~wxObjArray()
		void Add(T item, size_t copies = 1)
		void Add(T *item)
		void Add(T &amp;item, size_t copies = 1)
		void Alloc(size_t count)
		void Clear()
		size_t Count() const
		T * Detach(size_t index)
		void Empty()
		size_t GetCount() const
		int Index(T&amp; item, bool searchFromEnd = false) const
		int Index(T&amp; item) const
		void Insert(T item, size_t n, size_t copies = 1)
		void Insert(T *item, size_t n)
		void Insert(T &amp;item, size_t n, size_t copies = 1)
		bool IsEmpty() const
		T&amp; Item(size_t index) const
		T&amp; Last() const
		Remove(T item)
		RemoveAt(size_t index, size_t count = 1)
		void SetCount(size_t count, T defval = T(0))
		void Shrink()
		void Sort(CMPFUNC<T> compareFunction)
<wx/arrstr.h>
	class wxArrayString
		wxArrayString()
		wxArrayString(const wxArrayString& array)
		wxArrayString(size_t sz, const wxChar** arr)
		wxArrayString(size_t sz, const wxString* arr)
		~wxArrayString()
		wxArrayString & operator =(const wxArrayString& array)
		bool operator ==(const wxArrayString& array) const
		bool operator !=(const wxArrayString& array) const
		wxString& operator[](size_t nIndex)
		size_t Add(const wxString& str, size_t copies = 1)
		void Alloc(size_t nCount)
		void Clear()
		size_t Count() const
		void Empty()
		size_t GetCount() const
		int Index(const wxChar * sz, bool bCase = true, bool bFromEnd = false)
		void Insert(const wxString& str, size_t nIndex, size_t copies = 1)
		bool IsEmpty()
		wxString& Item(size_t nIndex) const
		wxString Last()
		void Remove(const wxChar * sz)
		void RemoveAt(size_t nIndex, size_t count = 1)
		void Shrink()
		void Sort(bool reverseOrder = false)
		void Sort(CompareFunction compareFunction)
<wx/artprov.h>
	class wxArtProvider public wxObject
		~wxArtProvider()
		wxBitmap CreateBitmap(const wxArtID&amp; id, const wxArtClient&amp; client, const wxSize& size)
		static bool Delete(wxArtProvider* provider)
		static wxBitmap GetBitmap(const wxArtID&amp; id, const wxArtClient&amp; client = wxART_OTHER, const wxSize& size = wxDefaultSize)
		static wxIcon GetIcon(const wxArtID&amp; id, const wxArtClient&amp; client = wxART_OTHER, const wxSize& size = wxDefaultSize)
		static wxSize GetSizeHint(const wxArtClient&amp; client, bool platform_default = false)
		static void Insert(wxArtProvider* provider)
		static bool Pop()
		static void Push(wxArtProvider* provider)
		static bool Remove(wxArtProvider* provider)
<wx/aui/dockart.h>
	class wxAuiDockArt
		wxAuiDockArt()
		~wxAuiDockArt()
		virtual void DrawBackground(wxDC& dc, wxWindow* window, int orientation, const wxRect& rect)
		virtual void DrawBorder(wxDC& dc, wxWindow* window, const wxRect& rect, wxAuiPaneInfo& pane)
		virtual void DrawCaption(wxDC& dc, wxWindow* window, const wxString& text, const wxRect& rect, wxAuiPaneInfo& pane)
		virtual void DrawGripper(wxDC& dc, wxWindow* window, const wxRect& rect, wxAuiPaneInfo& pane)
		virtual void DrawPaneButton(wxDC& dc, wxWindow* window, int button, int button_state, const wxRect& rect, wxAuiPaneInfo& pane)
		virtual void DrawSash(wxDC& dc, wxWindow* window, int orientation, const wxRect& rect)
		virtual wxColour GetColor(int id)
		virtual wxColour GetColour(int id)
		virtual wxFont GetFont(int id)
		virtual int GetMetric(int id)
		virtual void SetColor(int id, const wxColour& color)
		virtual void SetColour(int id, const wxColor&amp; colour)
		virtual void SetFont(int id, const wxFont& font)
		virtual void SetMetric(int id, int new_val)
<wx/aui/auibook.h>
	class wxAuiTabArt
		wxAuiTabArt()
		wxAuiTabArt* Clone()
		void DrawBackground(wxDC& dc, wxWindow* wnd, const wxRect& rect)
		void DrawButton(wxDC& dc, wxWindow* wnd, const wxRect& in_rect, int bitmap_id, int button_state, int orientation, const wxBitmap& bitmap_override, wxRect* out_rect)
		void DrawTab(wxDC& dc, wxWindow* wnd, const wxRect& in_rect, const wxString& caption, const wxBitmap& bitmap, bool active, int close_button_state, wxRect* out_tab_rect, wxRect* out_button_rect, int* x_extent)
		int GetBestTabCtrlSize(wxWindow* wnd, wxAuiNotebookPageArray&amp; pages)
		int GetIndentSize()
		wxSize GetTabSize(wxDC& dc, wxWindow* wnd, const wxString& caption, const wxBitmap& bitmap, bool active, int close_button_state, int* x_extent)
		void SetFlags(unsigned int flags)
		void SetMeasuringFont(const wxFont& font)
		void SetNormalFont(const wxFont& font)
		void SetSelectedFont(const wxFont& font)
		void SetSizingInfo(const wxSize& tab_ctrl_size, size_t tab_count)
		int ShowWindowList(wxWindow* wnd, const wxArrayString& items, int active_idx)
<wx/aui/aui.h>
	class wxAuiManager public wxEvtHandler
		wxAuiManager(wxWindow* managed_wnd = NULL, unsigned int flags = wxAUI_MGR_DEFAULT)
		~wxAuiManager()
		bool AddPane(wxWindow* window, const wxAuiPaneInfo& pane_info)
		bool AddPane(wxWindow* window, int direction = wxLEFT, const wxString& caption = wxEmptyString)
		bool AddPane(wxWindow* window, const wxAuiPaneInfo& pane_info, const wxPoint& drop_pos)
		bool DetachPane(wxWindow* window)
		wxAuiPaneInfoArray&amp; GetAllPanes()
		wxAuiDockArt* GetArtProvider() const
		void GetDockSizeConstraint(double* widthpct, double* heightpct)
		unsigned int GetFlags() const
		wxWindow* GetManagedWindow() const
		static wxAuiManager* GetManager(wxWindow* window)
		wxAuiPaneInfo& GetPane(wxWindow* window)
		wxAuiPaneInfo& GetPane(const wxString& name)
		void HideHint()
		bool InsertPane(wxWindow* window, const wxAuiPaneInfo& insert_location, int insert_level = wxAUI_INSERT_PANE)
		void LoadPaneInfo(wxString pane_part, wxAuiPaneInfo& pane)
		bool LoadPerspective(const wxString& perspective, bool update = true)
		bool ProcessDockResult(wxAuiPaneInfo& target, const wxAuiPaneInfo& new_pos)
		wxString SavePaneInfo(wxAuiPaneInfo& pane)
		wxString SavePerspective()
		void SetArtProvider(wxAuiDockArt* art_provider)
		void SetDockSizeConstraint(double widthpct, double heightpct)
		void SetFlags(unsigned int flags)
		void SetManagedWindow(wxWindow* managed_wnd)
		void ShowHint(const wxRect& rect)
		void UnInit()
		void Update()
<wx/aui/auibook.h>
	wxAUI_NB_DEFAULT_STYLE
	wxAUI_NB_TAB_SPLIT
	wxAUI_NB_TAB_MOVE
	wxAUI_NB_TAB_EXTERNAL_MOVE
	wxAUI_NB_TAB_FIXED_WIDTH
	wxAUI_NB_SCROLL_BUTTONS
	wxAUI_NB_WINDOWLIST_BUTTON
	wxAUI_NB_CLOSE_BUTTON
	wxAUI_NB_CLOSE_ON_ACTIVE_TAB
	wxAUI_NB_CLOSE_ON_ALL_TABS
	wxAUI_NB_TOP
	wxAUI_NB_BOTTOM
	class wxAuiNotebook public wxControl
		wxAuiNotebook()
		wxAuiNotebook(wxWindow* parent, wxWindowID id = wxID_ANY, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxAUI_NB_DEFAULT_STYLE)
		bool AddPage(wxWindow* page, const wxString& caption, bool select = false, const wxBitmap& bitmap = wxNullBitmap)
		void AdvanceSelection(bool forward = true)
		bool Create(wxWindow* parent, wxWindowID id = wxID_ANY, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = 0)
		bool DeletePage(size_t page)
		wxAuiTabArt* GetArtProvider() const
		int GetHeightForPageHeight(int pageHeight)
		wxWindow* GetPage(size_t page_idx) const
		wxBitmap GetPageBitmap(size_t page) const
		size_t GetPageCount() const
		int GetPageIndex(wxWindow* page_wnd) const
		wxString GetPageText(size_t page) const
		int GetSelection() const
		int GetTabCtrlHeight() const
		bool InsertPage(size_t page_idx, wxWindow* page, const wxString& caption, bool select = false, const wxBitmap& bitmap = wxNullBitmap)
		bool RemovePage(size_t page)
		void SetArtProvider(wxAuiTabArt* art)
		bool SetFont(const wxFont& font)
		void SetNormalFont(const wxFont& font)
		void SetSelectedFont(const wxFont& font)
		void SetMeasuringFont(const wxFont& font)
		bool SetPageBitmap(size_t page, const wxBitmap& bitmap)
		bool SetPageText(size_t page, const wxString& text)
		size_t SetSelection(size_t new_page)
		void SetTabCtrlHeight(int height)
		void SetUniformBitmapSize(const wxSize& size)
		void Split(size_t page, int direction)
		bool ShowWindowMenu()
<wx/aui/aui.h>
	class wxAuiPaneInfo
		wxAuiPaneInfo()
		wxAuiPaneInfo(const wxAuiPaneInfo& c)
		~wxAuiPaneInfo()
		wxAuiPaneInfo& BestSize(const wxSize& size)
		wxAuiPaneInfo& BestSize(int x, int y)
		wxAuiPaneInfo& Bottom()
		wxAuiPaneInfo& BottomDockable(bool b = true)
		wxAuiPaneInfo& Caption(const wxString& c)
		wxAuiPaneInfo& CaptionVisible(bool visible = true)
		wxAuiPaneInfo& Centre()
		wxAuiPaneInfo& Center()
		wxAuiPaneInfo& CentrePane()
		wxAuiPaneInfo& CenterPane()
		wxAuiPaneInfo& CloseButton(bool visible = true)
		wxAuiPaneInfo& DefaultPane()
		wxAuiPaneInfo& DestroyOnClose(bool b = true)
		wxAuiPaneInfo& Direction(int direction)
		wxAuiPaneInfo& Dock()
		wxAuiPaneInfo& DockFixed(bool b = true)
		wxAuiPaneInfo& Dockable(bool b = true)
		wxAuiPaneInfo& Fixed()
		wxAuiPaneInfo& Float()
		wxAuiPaneInfo& Floatable(bool b = true)
		wxAuiPaneInfo& FloatingPosition(const wxPoint& pos)
		wxAuiPaneInfo& FloatingPosition(int x, int y)
		wxAuiPaneInfo& FloatingSize(const wxSize& size)
		wxAuiPaneInfo& FloatingSize(int x, int y)
		wxAuiPaneInfo& Gripper(bool visible = true)
		wxAuiPaneInfo& GripperTop(bool attop = true)
		bool HasBorder() const
		bool HasCaption() const
		bool HasCloseButton() const
		bool HasFlag(unsigned int flag) const
		bool HasGripper() const
		bool HasGripperTop() const
		bool HasMaximizeButton() const
		bool HasMinimizeButton() const
		bool HasPinButton() const
		wxAuiPaneInfo& Hide()
		bool IsBottomDockable() const
		bool IsDocked() const
		bool IsFixed() const
		bool IsFloatable() const
		bool IsFloating() const
		bool IsLeftDockable() const
		bool IsMovable() const
		bool IsOk() const
		bool IsResizable() const
		bool IsRightDockable() const
		bool IsShown() const
		bool IsToolbar() const
		bool IsTopDockable() const
		wxAuiPaneInfo& Layer(int layer)
		wxAuiPaneInfo& Left()
		wxAuiPaneInfo& LeftDockable(bool b = true)
		wxAuiPaneInfo& MaxSize(const wxSize& size)
		wxAuiPaneInfo& MaxSize(int x, int y)
		wxAuiPaneInfo& MaximizeButton(bool visible = true)
		wxAuiPaneInfo& MinSize(const wxSize& size)
		wxAuiPaneInfo& MinSize(int x, int y)
		wxAuiPaneInfo& MinimizeButton(bool visible = true)
		wxAuiPaneInfo& Movable(bool b = true)
		wxAuiPaneInfo& Name(const wxString& n)
		wxAuiPaneInfo& PaneBorder(bool visible = true)
		wxAuiPaneInfo& PinButton(bool visible = true)
		wxAuiPaneInfo& Position(int pos)
		wxAuiPaneInfo& Resizable(bool resizable = true)
		wxAuiPaneInfo& Right()
		wxAuiPaneInfo& RightDockable(bool b = true)
		wxAuiPaneInfo& Row(int row)
		void SafeSet(wxAuiPaneInfo source)
		wxAuiPaneInfo& SetFlag(unsigned int flag, bool option_state)
		wxAuiPaneInfo& Show(bool show = true)
		wxAuiPaneInfo& ToolbarPane()
		wxAuiPaneInfo& Top()
		wxAuiPaneInfo& TopDockable(bool b = true)
		wxAuiPaneInfo& Window(wxWindow* w)
		wxAuiPaneInfo& operator operator=(const wxAuiPaneInfo& c)
<wx/msw/ole/automtn.h>
	class wxAutomationObject public wxObject
		wxAutomationObject(WXIDISPATCH* dispatchPtr = NULL)
		~wxAutomationObject()
		wxVariant CallMethod(const wxString& method, int noArgs,wxVariant args[]) const
		wxVariant CallMethod(const wxString& method, ...) const
		bool CreateInstance(const wxString& classId) const
		IDispatch* GetDispatchPtr() const
		bool GetInstance(const wxString& classId) const
		bool GetObject(wxAutomationObject&obj const wxString& property,int noArgs = 0, wxVariant args[] = NULL) const
		wxVariant GetProperty(const wxString& property, int noArgs,wxVariant args[]) const
		wxVariant GetProperty(const wxString& property, ...) const
		bool Invoke(const wxString& member, int action,wxVariant& retValue, int noArgs, wxVariant args[],const wxVariant* ptrArgs[] = 0) const
		bool PutProperty(const wxString& property, int noArgs,wxVariant args[]) const
		bool PutProperty(const wxString& property, ...)
		void SetDispatchPtr(WXIDISPATCH* dispatchPtr)
<wx/bitmap.h>
	class wxBitmap public wxGDIObject public wxObject
		wxBitmap()
		wxBitmap(const wxBitmap& bitmap)
		wxBitmap(const void* data, int type, int width, int height, int depth = -1)
		wxBitmap(const char bits[], int width, int heightint depth = 1)
		wxBitmap(int width, int height, int depth = -1)
		wxBitmap(const char* const* bits)
		wxBitmap(const wxString& name, wxBitmapType type)
		wxBitmap(const wxImage& img, int depth = -1)
		~wxBitmap()
		static void AddHandler(wxBitmapHandler* handler)
		static void CleanUpHandlers()
		wxImage ConvertToImage()
		bool CopyFromIcon(const wxIcon& icon)
		virtual bool Create(int width, int height, int depth = -1)
		virtual bool Create(const void* data, int type, int width, int height, int depth = -1)
		static wxBitmapHandler* FindHandler(const wxString& name)
		static wxBitmapHandler* FindHandler(const wxString& extension, wxBitmapType bitmapType)
		static wxBitmapHandler* FindHandler(wxBitmapType bitmapType)
		int GetDepth() const
		static wxList& GetHandlers()
		int GetHeight() const
		wxPalette* GetPalette() const
		wxMask* GetMask() const
		int GetWidth() const
		wxBitmap GetSubBitmap(const wxRect&rect) const
		static void InitStandardHandlers()
		static void InsertHandler(wxBitmapHandler* handler)
		bool LoadFile(const wxString& name, wxBitmapType type)
		bool IsOk() const
		static bool RemoveHandler(const wxString& name)
		bool SaveFile(const wxString& name, wxBitmapType type, wxPalette* palette = NULL)
		void SetDepth(int depth)
		void SetHeight(int height)
		void SetMask(wxMask* mask)
		void SetPalette(const wxPalette& palette)
		void SetWidth(int width)
		wxBitmap& operator =(const wxBitmap& bitmap)
<wx/bmpcbox.h>
	wxCB_READONLY
	wxCB_SORT
	wxTE_PROCESS_ENTER
	EVT_COMBOBOX(id, func)
	EVT_TEXT(id, func)
	EVT_TEXT_ENTER(id, func)
	class wxBitmapComboBox public wxComboBox public wxControlWithItems public wxControl public wxWindow public wxEvtHandler public wxObject
		wxBitmapComboBox()
		wxBitmapComboBox(wxWindow* parent, wxWindowID id,const wxString& value = "", const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize,int n = 0, const wxString choices[] = NULL,long style = 0, const wxValidator& validator = wxDefaultValidator, const wxString& name = "comboBox")
		wxBitmapComboBox(wxWindow* parent, wxWindowID id,const wxString& value, const wxPoint& pos, const wxSize& size,const wxArrayString& choices,long style = 0, const wxValidator& validator = wxDefaultValidator, const wxString& name = "comboBox")
		~wxBitmapComboBox()
		bool Create(wxWindow* parent, wxWindowID id,const wxString& value = "", const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize,int n, const wxString choices[],long style = 0, const wxValidator& validator = wxDefaultValidator, const wxString& name = "comboBox")
		bool Create(wxWindow* parent, wxWindowID id,const wxString& value, const wxPoint& pos, const wxSize& size,const wxArrayString& choices,long style = 0, const wxValidator& validator = wxDefaultValidator, const wxString& name = "comboBox")
		int Append(const wxString& item, const wxBitmap& bitmap = wxNullBitmap)
		int Append(const wxString& item, const wxBitmap& bitmap, void *clientData)
		int Append(const wxString& item, const wxBitmap& bitmap, wxClientData *clientData)
		wxSize GetBitmapSize() const
		wxBitmap GetItemBitmap(unsigned int n) const
		int Insert(const wxString& item, const wxBitmap& bitmap, unsigned int pos)
		int Insert(const wxString& item, const wxBitmap& bitmap, unsigned int pos, void *clientData)
		int Insert(const wxString& item, const wxBitmap& bitmap, unsigned int pos, wxClientData *clientData)
		void SetItemBitmap(unsigned int n, const wxBitmap& bitmap)
<wx/bmpbuttn.h>
	wxBU_AUTODRAW
	wxBU_LEFT
	wxBU_TOP
	wxBU_RIGHT
	wxBU_BOTTOM
	EVT_BUTTON(id, func)
	class wxBitmapButton public wxButton public wxControl public wxWindow public wxEvtHandler public wxObject
		wxBitmapButton()
		~wxBitmapButton()
		bool Create(wxWindow* parent, wxWindowID id, const wxBitmap& bitmap,const wxPoint& pos, const wxSize& size = wxDefaultSize,long style = 0, const wxValidator& validator, const wxString& name = "button")
		const wxBitmap& GetBitmapDisabled() constwxBitmap& GetBitmapDisabled()
		const wxBitmap& GetBitmapFocus() constwxBitmap& GetBitmapFocus()
		const wxBitmap& GetBitmapHover() constwxBitmap& GetBitmapHover()
		const wxBitmap& GetBitmapLabel() constwxBitmap& GetBitmapLabel()
		wxBitmap& GetBitmapSelected() constwxBitmap& GetBitmapSelected()
		void SetBitmapDisabled(const wxBitmap& bitmap)
		void SetBitmapFocus(const wxBitmap& bitmap)
		void SetBitmapHover(const wxBitmap& bitmap)
		void SetBitmapLabel(const wxBitmap& bitmap)
		void SetBitmapSelected(const wxBitmap& bitmap)
<wx/dataobj.h>
	class wxBitmapDataObject public wxDataObjectSimple public wxDataObject
<wx/bitmap.h>
	class wxBitmapHandler public wxObject
		wxBitmapHandler()
		~wxBitmapHandler()
		virtual bool Create(wxBitmap* bitmap, const void* data, int type, int width, int height, int depth = -1)
		const wxString& GetName() const
		const wxString& GetExtension() const
		long GetType() const
		bool LoadFile(wxBitmap* bitmap, const wxString& name, long type)
		bool SaveFile(wxBitmap* bitmap, const wxString& name, int type, wxPalette* palette = NULL)
		void SetName(const wxString& name)
		void SetExtension(const wxString& extension)
		void SetType(long type)
<wx/sizer.h>
	class wxBoxSizer public wxSizer public wxObject
		wxBoxSizer(int orient)
		void RecalcSizes()
		wxSize CalcMin()
		int GetOrientation()
<wx/brush.h>
	class wxBrush public wxGDIObject public wxObject
		wxBrush()
		wxBrush(const wxColour& colour, int style = wxSOLID)
		wxBrush(const wxString& colourName, int style)
		wxBrush(const wxBitmap& stippleBitmap)
		wxBrush(const wxBrush& brush)
		~wxBrush()
		wxColour& GetColour() const
		wxBitmap * GetStipple() const
		int GetStyle() const
		bool IsHatch() const
		bool IsOk() const
		void SetColour(wxColour& colour)
		void SetColour(const wxString& colourName)
		void SetColour(unsigned char red, unsigned char green, unsigned char blue)
		void SetStipple(const wxBitmap& bitmap)
		void SetStyle(int style)
		wxBrush& operator =(const wxBrush& brush)
		bool operator ==(const wxBrush& brush)
		bool operator !=(const wxBrush& brush)
<wx/gdicmn.h>
	class wxBrushList public wxList public wxObject
		void wxBrushList()
		wxBrush * FindOrCreateBrush(const wxColour& colour, int style = wxSOLID)
<wx/dcbuffer.h>
	class wxBufferedDC public wxMemoryDC public wxDC public wxObject
		wxBufferedDC()
		wxBufferedDC(wxDC *dc, const wxSize& area, int style = wxBUFFER_CLIENT_AREA)
		wxBufferedDC(wxDC *dc, wxBitmap& buffer, int style = wxBUFFER_CLIENT_AREA)
		void Init(wxDC *dc, const wxSize& area, int style = wxBUFFER_CLIENT_AREA)
		void Init(wxDC *dc, wxBitmap& buffer, int style = wxBUFFER_CLIENT_AREA)
<wx/dcbuffer.h>
	class wxBufferedPaintDC public wxBufferedDC public wxMemoryDC public wxDC public wxObject
		wxBufferedPaintDC(wxWindow *window, wxBitmap& buffer, int style = wxBUFFER_CLIENT_AREA)
		wxBufferedPaintDC(wxWindow *window, int style = wxBUFFER_CLIENT_AREA)
<wx/dcbuffer.h>
	class wxAutoBufferedPaintDC public wxBufferedPaintDC public wxPaintDC public wxDC public wxObject
		wxAutoBufferedPaintDC(wxWindow *window)
<wx/stream.h>
	class wxBufferedInputStream public wxFilterInputStream
<wx/stream.h>
	class wxBufferedOutputStream public wxFilterOutputStream
		wxBufferedOutputStream(const wxOutputStream& parent)
		~wxBufferedOutputStream()
		off_t SeekO(off_t pos, wxSeekMode mode)
		void Sync()
<wx/utils.h>
	class wxBusyCursor
		wxBusyCursor(wxCursor* cursor = wxHOURGLASS_CURSOR)
		~wxBusyCursor()
<wx/busyinfo.h>
	class wxBusyInfo
		wxBusyInfo(const wxString& msg, wxWindow* parent = NULL)
		~wxBusyInfo()
<wx/button.h>
	wxBU_LEFT
	wxBU_TOP
	wxBU_RIGHT
	wxBU_BOTTOM
	wxBU_EXACTFIT
	wxNO_BORDER
	EVT_BUTTON(id, func)
	class wxButton public wxControl public wxWindow public wxEvtHandler public wxObject
		wxButton()
		wxButton(wxWindow* parent, wxWindowID id, const wxString& label = wxEmptyString,const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize,long style = 0, const wxValidator& validator = wxDefaultValidator, const wxString& name = "button")
		~wxButton()
		bool Create(wxWindow* parent, wxWindowID id, const wxString& label = wxEmptyString,const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize,long style = 0, const wxValidator& validator, const wxString& name = "button")
		wxString GetLabel() const
		wxSize GetDefaultSize()
		void SetDefault()
		void SetLabel(const wxString& label)
<wx/laywin.h>
	EVT_CALCULATE_LAYOUT(func)
	class wxCalculateLayoutEvent public wxEvent public wxObject
		wxCalculateLayoutEvent(wxWindowID id = 0)
		int GetFlags() const
		wxRect GetRect() const
		void SetFlags(int flags)
		void SetRect(const wxRect& rect)
<wx/calctrl.h>
	wxCAL_SUNDAY_FIRST
	wxCAL_MONDAY_FIRST
	wxCAL_SHOW_HOLIDAYS
	wxCAL_NO_YEAR_CHANGE
	wxCAL_NO_MONTH_CHANGE
	wxCAL_SHOW_SURROUNDING_WEEKS
	wxCAL_SEQUENTIAL_MONTH_SELECTION
	EVT_CALENDAR(id, func)
	EVT_CALENDAR_SEL_CHANGED(id, func)
	EVT_CALENDAR_DAY(id, func)
	EVT_CALENDAR_MONTH(id, func)
	EVT_CALENDAR_YEAR(id, func)
	EVT_CALENDAR_WEEKDAY_CLICKED(id, func)
	class wxCalendarCtrl public wxControl public wxWindow public wxEvtHandler public wxObject
		wxCalendarCtrl()
		wxCalendarCtrl(wxWindow* parent, wxWindowID id, const wxDateTime& date = wxDefaultDateTime, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxCAL_SHOW_HOLIDAYS, const wxString& name = wxCalendarNameStr)
		bool Create(wxWindow* parent, wxWindowID id, const wxDateTime& date = wxDefaultDateTime, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxCAL_SHOW_HOLIDAYS, const wxString& name = wxCalendarNameStr)
		~wxCalendarCtrl()
		void SetDate(const wxDateTime& date)
		const wxDateTime& GetDate() const
		void EnableYearChange(bool enable = true)
		void EnableMonthChange(bool enable = true)
		void EnableHolidayDisplay(bool display = true)
		void SetHeaderColours(const wxColour& colFg, const wxColour& colBg)
		const wxColour& GetHeaderColourFg() const
		const wxColour& GetHeaderColourBg() const
		void SetHighlightColours(const wxColour& colFg, const wxColour& colBg)
		const wxColour& GetHighlightColourFg() const
		const wxColour& GetHighlightColourBg() const
		void SetHolidayColours(const wxColour& colFg, const wxColour& colBg)
		const wxColour& GetHolidayColourFg() const
		const wxColour& GetHolidayColourBg() const
		wxCalendarDateAttr * GetAttr(size_t day) const
		void SetAttr(size_t day, wxCalendarDateAttr* attr)
		void SetHoliday(size_t day)
		void ResetAttr(size_t day)
		wxCalendarHitTestResult HitTest(const wxPoint& pos, wxDateTime* date = NULL, wxDateTime::WeekDay* wd = NULL)
<wx/calctrl.h>
	class wxCalendarDateAttr
		wxCalendarDateAttr()
		wxCalendarDateAttr(const wxColour& colText, const wxColour& colBack = wxNullColour, const wxColour& colBorder = wxNullColour, const wxFont& font = wxNullFont, wxCalendarDateBorder border = wxCAL_BORDER_NONE)
		wxCalendarDateAttr(wxCalendarDateBorder border, const wxColour& colBorder = wxNullColour)
		void SetTextColour(const wxColour& colText)
		void SetBackgroundColour(const wxColour& colBack)
		void SetBorderColour(const wxColour& col)
		void SetFont(const wxFont& font)
		void SetBorder(wxCalendarDateBorder border)
		void SetHoliday(bool holiday)
		bool HasTextColour() const
		bool HasBackgroundColour() const
		bool HasBorderColour() const
		bool HasFont() const
		bool HasBorder() const
		bool IsHoliday() const
		const wxColour& GetTextColour() const
		const wxColour& GetBackgroundColour() const
		const wxColour& GetBorderColour() const
		const wxFont& GetFont() const
		wxCalendarDateBorder GetBorder() const
<wx/calctrl.h>
	class wxCalendarEvent public wxDateEvent public wxCommandEvent public wxEvent public wxObject
		wxDateTime::WeekDay GetWeekDay() const
		void SetWeekDay(wxDateTime::WeekDay day)
<wx/caret.h>
	class wxCaret
		wxCaret()
		wxCaret(wxWindow* window, int width, int height)
		wxCaret(wxWindowBase* window, const wxSize& size)
		bool Create(wxWindowBase* window, int width, int height)
		bool Create(wxWindowBase* window, const wxSize& size)
		static int GetBlinkTime()
		void GetPosition(int* x, int* y) const
		wxPoint GetPosition() const
		void GetSize(int* width, int* height) const
		wxSize GetSize() const
		wxWindow* GetWindow() const
		void Hide()
		bool IsOk() const
		bool IsVisible() const
		void Move(int x, int y)
		void Move(const wxPoint& pt)
		static void SetBlinkTime(int milliseconds)
		void SetSize(int width, int height)
		void SetSize(const wxSize& size)
		void Show(bool show = true)
<wx/checkbox.h>
	wxCHK_2STATE
	wxCHK_3STATE
	wxCHK_ALLOW_3RD_STATE_FOR_USER
	wxALIGN_RIGHT
	EVT_CHECKBOX(id, func)
	class wxCheckBox public wxControl public wxWindow public wxEvtHandler public wxObject
		wxCheckBox()
		wxCheckBox(wxWindow* parent, wxWindowID id,const wxString& label, const wxPoint& pos = wxDefaultPosition,const wxSize& size = wxDefaultSize, long style = 0,const wxValidator& val, const wxString& name = "checkBox")
		~wxCheckBox()
		bool Create(wxWindow* parent, wxWindowID id,const wxString& label, const wxPoint& pos = wxDefaultPosition,const wxSize& size = wxDefaultSize, long style = 0,const wxValidator& val, const wxString& name = "checkBox")
		bool GetValue() const
		wxCheckBoxState Get3StateValue() const
		bool Is3rdStateAllowedForUser() const
		bool Is3State() const
		bool IsChecked() const
		void SetValue(bool state)
		void Set3StateValue(const wxCheckBoxState state)
<wx/checklst.h>
	EVT_CHECKLISTBOX(id, func)
	class wxCheckListBox public wxListBox public wxControl public wxWindow public wxEvtHandler public wxObject
		wxCheckListBox()
		wxCheckListBox(wxWindow* parent, wxWindowID id,const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize,int n, const wxString choices[] = NULL,long style = 0, const wxValidator& validator = wxDefaultValidator, const wxString& name = "listBox")
		wxCheckListBox(wxWindow* parent, wxWindowID id,const wxPoint& pos, const wxSize& size,const wxArrayString& choices,long style = 0, const wxValidator& validator = wxDefaultValidator, const wxString& name = "listBox")
		void ~wxCheckListBox()
		void Check(int item, bool check = true)
		bool IsChecked(unsigned int item) const
<wx/choice.h>
	EVT_CHOICE(id, func)
	class wxChoice public wxControlWithItems public wxControl public wxWindow public wxEvtHandler public wxObject
		wxChoice()
		wxChoice(wxWindow *parent, wxWindowID id,const wxPoint& pos, const wxSize& size,int n, const wxString choices[],long style = 0, const wxValidator& validator = wxDefaultValidator, const wxString& name = "choice")
		wxChoice(wxWindow *parent, wxWindowID id,const wxPoint& pos, const wxSize& size,const wxArrayString& choices,long style = 0, const wxValidator& validator = wxDefaultValidator, const wxString& name = "choice")
		~wxChoice()
		bool Create(wxWindow *parent, wxWindowID id,const wxPoint& pos, const wxSize& size,int n, const wxString choices[],long style = 0, const wxValidator& validator = wxDefaultValidator,const wxString& name = "choice")
		bool Create(wxWindow *parent, wxWindowID id,const wxPoint& pos, const wxSize& size,const wxArrayString& choices,long style = 0, const wxValidator& validator = wxDefaultValidator,const wxString& name = "choice")
		int GetColumns() const
		int GetCurrentSelection() const
		void SetColumns(int n = 1)
<wx/choicebk.h>
	wxCHB_DEFAULT
	wxCHB_TOP
	wxCHB_LEFT
	wxCHB_RIGHT
	wxCHB_BOTTOM
	class wxChoicebook public wxControl public wxWindow public wxEvtHandler public wxObject
<wx/object.h>
	class wxClassInfo
		wxClassInfo(const wxChar * className, const wxClassInfo * baseClass1, const wxClassInfo * baseClass2,int size, wxObjectConstructorFn fn)
		wxObject* CreateObject() const
		static wxClassInfo * FindClass(wxChar * name)
		wxChar * GetBaseClassName1() const
		wxChar * GetBaseClassName2() const
		wxChar * GetClassName() const
		int GetSize() const
		static void InitializeClasses()
		bool IsDynamic() const
		bool IsKindOf(wxClassInfo* info)
<wx/ipc.h>
	class wxClient public wxObject
		wxClient()
		wxConnectionBase * MakeConnection(const wxString& host, const wxString& service, const wxString& topic)
		wxConnectionBase * OnMakeConnection()
		bool ValidHost(const wxString& host)
<wx/dcclient.h>
	class wxClientDC public wxWindowDC public wxDC public wxObject
		wxClientDC(wxWindow* window)
<wx/clntdata.h>
	class wxClientData
		wxClientData()
		~wxClientData()
<wx/clntdata.h>
	class wxClientDataContainer
		wxClientDataContainer()
		~wxClientDataContainer()
		void* GetClientData() const
		wxClientData* GetClientObject() const
		void SetClientData(void* data)
		void SetClientObject(wxClientData* data)
<wx/clipbrd.h>
	class wxClipboard public wxObject
		wxClipboard()
		~wxClipboard()
		bool AddData(wxDataObject* data)
		void Clear()
		void Close()
		bool Flush()
		bool GetData(wxDataObject& data)
		bool IsOpened() const
		bool IsSupported(const wxDataFormat& format)
		bool Open()
		bool SetData(wxDataObject* data)
		void UsePrimarySelection(bool primary = true)
<wx/event.h>
	EVT_TEXT_COPY(id, func)
	EVT_TEXT_CUT(id, func)
	EVT_TEXT_PASTE(id, func)
	class wxClipboardTextEvent public wxCommandEvent public wxEvent public wxObject
		wxClipboardTextEvent(wxEventType commandType = wxEVT_NULL, int id = 0)
<wx/event.h>
	EVT_CLOSE(func)
	EVT_QUERY_END_SESSION(func)
	EVT_END_SESSION(func)
	class wxCloseEvent public wxEvent
		wxCloseEvent(WXTYPE commandEventType = 0, int id = 0)
		bool CanVeto()
		bool GetLoggingOff() const
		void SetCanVeto(bool canVeto)
		void SetForce(bool force) const
		void SetLoggingOff(bool loggingOff) const
		void Veto(bool veto = true)
<wx/cmdline.h>
	class wxCmdLineParser
		wxCmdLineParser()
		wxCmdLineParser(int argc, char** argv)
		wxCmdLineParser(int argc, wchar_t** argv)
		wxCmdLineParser(const wxString& cmdline)
		wxCmdLineParser(const wxCmdLineEntryDesc* desc)
		wxCmdLineParser(const wxCmdLineEntryDesc* desc, int argc, char** argv)
		wxCmdLineParser(const wxCmdLineEntryDesc* desc, const wxString& cmdline)
		static wxArrayString ConvertStringToArgs(const wxChar *cmdline)
		void SetCmdLine(int argc, char** argv)
		void SetCmdLine(int argc, wchar_t** argv)
		void SetCmdLine(const wxString& cmdline)
		~wxCmdLineParser()
		void SetSwitchChars(const wxString& switchChars)
		void EnableLongOptions(bool enable = true)
		void DisableLongOptions()
		bool AreLongOptionsEnabled()
		void SetLogo(const wxString& logo)
		void SetDesc(const wxCmdLineEntryDesc* desc)
		void AddSwitch(const wxString& name, const wxString& lng = wxEmptyString, const wxString& desc = wxEmptyString, int flags = 0)
		void AddOption(const wxString& name, const wxString& lng = wxEmptyString, const wxString& desc = wxEmptyString, wxCmdLineParamType type = wxCMD_LINE_VAL_STRING, int flags = 0)
		void AddParam(const wxString& desc = wxEmptyString, wxCmdLineParamType type = wxCMD_LINE_VAL_STRING, int flags = 0)
		int Parse(bool giveUsage = true)
		void Usage()
		bool Found(const wxString& name) const
		bool Found(const wxString& name, wxString* value) const
		bool Found(const wxString& name, long* value) const
		bool Found(const wxString& name, wxDateTime* value) const
		size_t GetParamCount() const
		wxString GetParam(size_t n = 0u) const
<wx/collpane.h>
	wxCP_DEFAULT_STYLE
	EVT_COLLAPSIBLEPANE_CHANGED(id, func)
	class wxCollapsiblePane public wxControl public wxWindow public wxEvtHandler public wxObject
		wxCollapsiblePane(wxWindow *parent,wxWindowID id,const wxString& label,const wxPoint& pos = wxDefaultPosition,const wxSize& size = wxDefaultSize,long style = wxCP_DEFAULT_STYLE,const wxValidator& validator = wxDefaultValidator,const wxString& name = "collapsiblePane")
		bool Create(wxWindow *parent,wxWindowID id,const wxString& label,const wxPoint& pos = wxDefaultPosition,const wxSize& size = wxDefaultSize,long style = wxCP_DEFAULT_STYLE,const wxValidator& validator = wxDefaultValidator,const wxString& name = "collapsiblePane")
		bool IsCollapsed() const
		bool IsExpanded() const
		void Collapse(bool collapse = true)
		void Expand()
		wxWindow * GetPane() const
<wx/collpane.h>
	EVT_COLLAPSIBLEPANE_CHANGED(id, func)
	class wxCollapsiblePaneEvent public wxCommandEvent public wxEvent public wxObject
		wxCollapsiblePaneEvent(wxObject * generator, int id, bool collapsed)
		bool GetCollapsed() const
		void SetCollapsed(bool collapsed)
<wx/colour.h>
	class wxColour public wxObject
		wxColour()
		wxColour(unsigned char red, unsigned char green, unsigned char blue, unsigned char alpha=wxALPHA_OPAQUE)
		wxColour(const wxString& colourNname)
		wxColour(const wxColour& colour)
		unsigned char Alpha() const
		unsigned char Blue() const
		wxString GetAsString(long flags) const
		long GetPixel() const
		unsigned char Green() const
		bool IsOk() const
		unsigned char Red() const
		void Set(unsigned char red, unsigned char green, unsigned char blue, unsigned char alpha=wxALPHA_OPAQUE)
		void Set(unsigned long RGB)
		bool Set(const wxString & str)
		wxColour& operator =(const wxColour& colour)
		wxColour& operator =(const wxString& colourName)
		bool operator ==(const wxColour& colour)
		bool operator !=(const wxColour& colour)
<wx/cmndata.h>
	class wxColourData public wxObject
		wxColourData()
		~wxColourData()
		bool GetChooseFull() const
		wxColour& GetColour() const
		wxColour& GetCustomColour(int i) const
		void SetChooseFull(const bool flag)
		void SetColour(const wxColour& colour)
		void SetCustomColour(int i, const wxColour& colour)
		void operator =(const wxColourData& data)
<wx/gdicmn.h>
	class wxColourDatabase
		wxColourDatabase()
		void AddColour(const wxString& colourName, const wxColour&colour)
		void AddColour(const wxString& colourName, wxColour* colour)
		wxColour Find(const wxString& colourName)
		wxString FindName(const wxColour& colour) const
<wx/colordlg.h>
	class wxColourDialog public wxDialog public wxWindow public wxEvtHandler public wxObject
		wxColourDialog(wxWindow* parent, wxColourData* data = NULL)
		~wxColourDialog()
		bool Create(wxWindow* parent, wxColourData* data = NULL)
		wxColourData& GetColourData()
		int ShowModal()
<wx/clrpicker.h>
	wxCLRP_DEFAULT_STYLE
	wxCLRP_USE_TEXTCTRL
	wxCLRP_SHOW_LABEL
	EVT_COLOURPICKER_CHANGED(id, func)
	class wxColourPickerCtrl public wxPickerBase public wxControl public wxWindow public wxEvtHandler public wxObject
		wxColourPickerCtrl(wxWindow *parent,wxWindowID id,const wxColour& colour = *wxBLACK,const wxPoint& pos = wxDefaultPosition,const wxSize& size = wxDefaultSize,long style = wxCLRP_DEFAULT_STYLE,const wxValidator& validator = wxDefaultValidator,const wxString& name = "colourpickerctrl")
		bool Create(wxWindow *parent,wxWindowID id,const wxColour& colour = *wxBLACK,const wxPoint& pos = wxDefaultPosition,const wxSize& size = wxDefaultSize,long style = wxCLRP_DEFAULT_STYLE,const wxValidator& validator = wxDefaultValidator,const wxString& name = "colourpickerctrl")
		wxColour GetColour() const
		void SetColour(const wxColour &col)
		void SetColour(const wxString &colname)
<wx/clrpicker.h>
	EVT_COLOURPICKER_CHANGED(id, func)
	class wxColourPickerEvent public wxCommandEvent public wxEvent public wxObject
		wxColourPickerEvent(wxObject * generator, int id, const wxColour& colour)
		wxColour GetColour() const
		void SetColour(const wxColour &pos)
<wx/combobox.h>
	wxCB_SIMPLE
	wxCB_DROPDOWN
	wxCB_READONLY
	wxCB_SORT
	wxTE_PROCESS_ENTER
	EVT_COMBOBOX(id, func)
	EVT_TEXT(id, func)
	EVT_TEXT_ENTER(id, func)
	class wxComboBox public wxControlWithItems public wxControl public wxWindow public wxEvtHandler public wxObject
		wxComboBox()
		wxComboBox(wxWindow* parent, wxWindowID id,const wxString& value = "", const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize,int n = 0, const wxString choices[] = NULL,long style = 0, const wxValidator& validator = wxDefaultValidator, const wxString& name = "comboBox")
		wxComboBox(wxWindow* parent, wxWindowID id,const wxString& value, const wxPoint& pos, const wxSize& size,const wxArrayString& choices,long style = 0, const wxValidator& validator = wxDefaultValidator, const wxString& name = "comboBox")
		~wxComboBox()
		bool Create(wxWindow* parent, wxWindowID id,const wxString& value = "", const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize,int n, const wxString choices[],long style = 0, const wxValidator& validator = wxDefaultValidator, const wxString& name = "comboBox")
		bool Create(wxWindow* parent, wxWindowID id,const wxString& value, const wxPoint& pos, const wxSize& size,const wxArrayString& choices,long style = 0, const wxValidator& validator = wxDefaultValidator, const wxString& name = "comboBox")
		bool CanCopy() const
		bool CanCut() const
		bool CanPaste() const
		bool CanRedo() const
		bool CanUndo() const
		void Copy()
		void Cut()
		int GetCurrentSelection() const
		long GetInsertionPoint() const
		virtual wxTextPos GetLastPosition() const
		void GetSelection(long *from, long *to) const
		wxString GetValue() const
		void Paste()
		void Redo()
		void Replace(long from, long to, const wxString& text)
		void Remove(long from, long to)
		void SetInsertionPoint(long pos)
		void SetInsertionPointEnd()
		void SetSelection(long from, long to)
		void SetValue(const wxString& text)
		void Undo()
<combo.h>
	wxCB_READONLY
	wxCB_SORT
	wxTE_PROCESS_ENTER
	wxCC_SPECIAL_DCLICK
	wxCC_STD_BUTTON
	EVT_TEXT(id, func)
	EVT_TEXT_ENTER(id, func)
	class wxComboCtrl public wxControl public wxWindow public wxEvtHandler public wxObject
		wxComboCtrl()
		wxComboCtrl(wxWindow* parent, wxWindowID id,const wxString& value = "", const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize,long style = 0, const wxValidator& validator = wxDefaultValidator, const wxString& name = "comboCtrl")
		~wxComboCtrl()
		virtual bool AnimateShow(const wxRect& rect, int flags)
		bool Create(wxWindow* parent, wxWindowID id,const wxString& value = "", const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize,long style = 0, const wxValidator& validator = wxDefaultValidator, const wxString& name = "comboCtrl")
		void Copy()
		void Cut()
		void DoSetPopupControl(wxComboPopup* popup)
		virtual void DoShowPopup(const wxRect& rect, int flags)
		void EnablePopupAnimation(bool enable = true)
		const wxBitmap& GetBitmapDisabled() const
		const wxBitmap& GetBitmapHover() const
		const wxBitmap& GetBitmapNormal() const
		const wxBitmap& GetBitmapPressed() const
		wxSize GetButtonSize()
		int GetCustomPaintWidth() const
		static int GetFeatures()
		long GetInsertionPoint() const
		bool IsPopupWindowState(int state) const
		long GetLastPosition() const
		wxComboPopup* GetPopupControl()
		wxWindow* GetPopupWindow() const
		wxTextCtrl* GetTextCtrl() const
		wxCoord GetTextIndent() const
		const wxRect& GetTextRect() const
		wxString GetValue() const
		void HidePopup()
		bool IsPopupShown() const
		void OnButtonClick()
		void Paste()
		void Remove(long from, long to)
		void Replace(long from, long to, const wxString& value)
		void SetButtonBitmaps(const wxBitmap& bmpNormal, bool pushButtonBg = false, const wxBitmap& bmpPressed = wxNullBitmap, const wxBitmap& bmpHover = wxNullBitmap, const wxBitmap& bmpDisabled = wxNullBitmap)
		void SetButtonPosition(int width = -1, int height = -1, int side = wxRIGHT, int spacingX = 0)
		void SetCustomPaintWidth(int width)
		void SetInsertionPoint(long pos)
		void SetInsertionPointEnd()
		void SetPopupAnchor(int anchorSide)
		void SetPopupControl(wxComboPopup* popup)
		void SetPopupExtents(int extLeft, int extRight)
		void SetPopupMaxHeight(int height)
		void SetPopupMinWidth(int width)
		void SetSelection(long from, long to)
		void SetText(const wxString& value)
		void SetTextIndent(int indent)
		void SetValue(const wxString& value)
		void SetValueWithEvent(const wxString& value, bool withEvent = true)
		void ShowPopup()
		void Undo()
		void UseAltPopupWindow(bool enable = true)
<combo.h>
	class wxComboPopup
		wxComboPopup()
		bool Create(wxWindow* parent)
		void Dismiss()
		wxSize GetAdjustedSize(int minWidth, int prefHeight, int maxHeight)
		wxWindow* GetControl()
		wxString GetStringValue() const
		void Init()
		bool IsCreated() const
		bool LazyCreate()
		void OnComboDoubleClick()
		void OnComboKeyEvent(wxKeyEvent& event)
		void OnDismiss()
		void OnPopup()
		void PaintComboControl(wxDC& dc, const wxRect& rect)
		void SetStringValue(const wxString& value)
<wx/cmdproc.h>
	class wxCommand public wxObject
		wxCommand(bool canUndo = false, const wxString& name = NULL)
		~wxCommand()
		bool CanUndo()
		bool Do()
		wxString GetName()
		bool Undo()
<wx/event.h>
	EVT_COMMAND(id, event, func)
	EVT_COMMAND_RANGE(id1, id2, event, func)
	EVT_BUTTON(id, func)
	EVT_CHECKBOX(id, func)
	EVT_CHOICE(id, func)
	EVT_COMBOBOX(id, func)
	EVT_LISTBOX(id, func)
	EVT_LISTBOX_DCLICK(id, func)
	EVT_MENU(id, func)
	EVT_MENU_RANGE(id1, id2, func)
	EVT_CONTEXT_MENU(func)
	EVT_RADIOBOX(id, func)
	EVT_RADIOBUTTON(id, func)
	EVT_SCROLLBAR(id, func)
	EVT_SLIDER(id, func)
	EVT_TEXT(id, func)
	EVT_TEXT_ENTER(id, func)
	EVT_TEXT_MAXLEN(id, func)
	EVT_TOGGLEBUTTON(id, func)
	EVT_TOOL(id, func)
	EVT_TOOL_RANGE(id1, id2, func)
	EVT_TOOL_RCLICKED(id, func)
	EVT_TOOL_RCLICKED_RANGE(id1, id2, func)
	EVT_TOOL_ENTER(id, func)
	EVT_COMMAND_LEFT_CLICK(id, func)
	EVT_COMMAND_LEFT_DCLICK(id, func)
	EVT_COMMAND_RIGHT_CLICK(id, func)
	EVT_COMMAND_SET_FOCUS(id, func)
	EVT_COMMAND_KILL_FOCUS(id, func)
	EVT_COMMAND_ENTER(id, func)
	class wxCommandEvent public wxEvent
		wxCommandEvent(WXTYPE commandEventType = 0, int id = 0)
		bool Checked() const
		void* GetClientData()
		wxClientData * GetClientObject()
		long GetExtraLong()
		int GetInt()
		int GetSelection()
		wxString GetString()
		bool IsChecked() const
		bool IsSelection()
		void SetClientData(void* clientData)
		void SetClientObject(wxClientData* clientObject)
		void SetExtraLong(long extraLong)
		void SetInt(int intCommand)
		void SetString(const wxString& string)
<wx/cmdproc.h>
	class wxCommandProcessor public wxObject
		wxCommandProcessor(int maxCommands = -1)
		~wxCommandProcessor()
		virtual bool CanUndo()
		virtual void ClearCommands()
		virtual bool Redo()
		wxList& GetCommands() const
		int GetMaxCommands() const
		wxMenu* GetEditMenu() const
		const wxString& GetRedoAccelerator() const
		wxString GetRedoMenuLabel() const
		const wxString& GetUndoAccelerator() const
		wxString GetUndoMenuLabel() const
		virtual void Initialize()
		virtual bool IsDirty()
		virtual void MarkAsSaved()
		void SetEditMenu(wxMenu* menu)
		void SetMenuStrings()
		void SetRedoAccelerator(const wxString&accel)
		void SetUndoAccelerator(const wxString&accel)
		virtual bool Submit(wxCommand *command, bool storeIt = true)
		virtual bool Undo()
<wx/thread.h>
	class wxCondition
		wxCondition(wxMutex& mutex)
		~wxCondition()
		void Broadcast()
		bool IsOk() const
		void Signal()
		wxCondError Wait()
		wxCondError WaitTimeout(unsigned long milliseconds)
<wx/config.h>
	class wxConfigBase
		wxConfigBase(const wxString& appName = wxEmptyString,const wxString& vendorName = wxEmptyString,const wxString& localFilename = wxEmptyString,const wxString& globalFilename = wxEmptyString,long style = 0,wxMBConv& conv = wxConvUTF8)
		~wxConfigBase()
		static wxConfigBase * Create()
		void DontCreateOnDemand()
		bool DeleteAll()
		bool DeleteEntry(const wxString& key, bool bDeleteGroupIfEmpty = true)
		bool DeleteGroup(const wxString& key)
		bool Exists(wxString& strName) const
		bool Flush(bool bCurrentOnly = false)
		static wxConfigBase * Get(bool CreateOnDemand = true)
		wxString GetAppName() const
		enum wxConfigBase::EntryType GetEntryType(const wxString& name) const
		bool GetFirstGroup(wxString& str, long&amp; index) const
		bool GetFirstEntry(wxString& str, long&amp; index) const
		bool GetNextGroup(wxString& str, long&amp; index) const
		bool GetNextEntry(wxString& str, long&amp; index) const
		uint GetNumberOfEntries(bool bRecursive = false) const
		uint GetNumberOfGroups(bool bRecursive = false) const
		const wxString& GetPath() const
		wxString GetVendorName() const
		bool HasEntry(wxString& strName) const
		bool HasGroup(const wxString& strName) const
		bool IsExpandingEnvVars() const
		bool IsRecordingDefaults() const
		bool Read(const wxString& key, wxString* str) const
		bool Read(const wxString& key, wxString* str, const wxString& defaultVal) const
		wxString Read(const wxString& key, constwxString& defaultVal) const
		bool Read(const wxString& key, long* l) const
		bool Read(const wxString& key, long* l,long defaultVal) const
		long Read(const wxString& key, long defaultVal) const
		bool Read(const wxString& key, double* d) const
		bool Read(const wxString& key, double* d,double defaultVal) const
		bool Read(const wxString& key, bool* b) const
		bool Read(const wxString& key, bool* d,bool defaultVal) const
		bool RenameEntry(const wxString& oldName, const wxString& newName)
		bool RenameGroup(const wxString& oldName, const wxString& newName)
		static wxConfigBase * Set(wxConfigBase *pConfig)
		void SetExpandEnvVars (bool bDoIt = true)
		void SetPath(const wxString& strPath)
		void SetRecordDefaults(bool bDoIt = true)
		bool Write(const wxString& key, const wxString& value)
		bool Write(const wxString& key, long value)
		bool Write(const wxString& key, double value)
		bool Write(const wxString& key, bool value)
<wx/ipc.h>
	class wxConnection public wxObject
		wxConnection()
		wxConnection(char* buffer, int size)
		bool Advise(const wxString& item, char* data, int size = -1, wxIPCFormat format = wxCF_TEXT)
		bool Execute(char* data, int size = -1, wxIPCFormat format = wxCF_TEXT)
		bool Disconnect()
		virtual bool OnAdvise(const wxString& topic, const wxString& item, char* data, int size, wxIPCFormat format)
		virtual bool OnDisconnect()
		virtual bool OnExecute(const wxString& topic, char* data, int size, wxIPCFormat format)
		virtual bool OnPoke(const wxString& topic, const wxString& item, char* data, int size, wxIPCFormat format)
		virtual char* OnRequest(const wxString& topic, const wxString& item, int *size, wxIPCFormat format)
		virtual bool OnStartAdvise(const wxString& topic, const wxString& item)
		virtual bool OnStopAdvise(const wxString& topic, const wxString& item)
		bool Poke(const wxString& item, char* data, int size = -1, wxIPCFormat format = wxCF_TEXT)
		char* Request(const wxString& item, int *size, wxIPCFormat format = wxIPC_TEXT)
		bool StartAdvise(const wxString& item)
		bool StopAdvise(const wxString& item)
<wx/event.h>
	EVT_CHILD_FOCUS(func)
	class wxChildFocusEvent public wxCommandEvent public wxEvent public wxObject
		wxChildFocusEvent(wxWindow *win = NULL)
<wx/event.h>
	EVT_CONTEXT_MENU(func)
	class wxContextMenuEvent public wxCommandEvent public wxEvent public wxObject
		wxContextMenuEvent(WXTYPE id = 0, int id = 0, const wxPoint& pos=wxDefaultPosition)
		wxPoint GetPosition() const
		void SetPosition(const wxPoint& point)
<wx/cshelp.h>
	class wxContextHelp public wxObject
		wxContextHelp(wxWindow* window = NULL, bool doNow = true)
		~wxContextHelp()
		bool BeginContextHelp(wxWindow* window = NULL)
		bool EndContextHelp()
<wx/cshelp.h>
	class wxContextHelpButton public wxBitmapButton public wxButton public wxControl public wxWindow public wxEvtHandler public wxObject
		wxContextHelpButton()
<wx/control.h>
	class wxControl public wxWindow public wxEvtHandler public wxObject
		void Command(wxCommandEvent& event)
		const wxString& GetLabel() const
		const wxString& GetLabelText() const
		static const wxString& GetLabelText(const wxString& label)
		void SetLabel(const wxString& label)
<wx/ctrlsub.h>
	class wxControlWithItems public wxControl public wxWindow public wxEvtHandler public wxObject
		int Append(const wxString& item)
		int Append(const wxString& item, void *clientData)
		int Append(const wxString& item, wxClientData *clientData)
		void Append(const wxArrayString& strings)
		void Clear()
		void Delete(unsigned int n)
		int FindString(const wxString& string, bool caseSensitive = false)
		void * GetClientData(unsigned int n) const
		wxClientData * GetClientObject(unsigned int n) const
		unsigned int GetCount() const
		int GetSelection() const
		wxString GetString(unsigned int n) const
		wxArrayString GetStrings() const
		wxString GetStringSelection() const
		int Insert(const wxString& item, unsigned int pos)
		int Insert(const wxString& item, unsigned int pos, void *clientData)
		int Insert(const wxString& item, unsigned int pos, wxClientData *clientData)
		bool IsEmpty() const
		int Number() const
		void Select(int n)
		void SetClientData(unsigned int n, void *data)
		void SetClientObject(unsigned int n, wxClientData *data)
		void SetSelection(int n)
		void SetString(unsigned int n, const wxString& string)
		bool SetStringSelection(const wxString& string)
<wx/stream.h>
	class wxCountingOutputStream public wxOutputStream public wxStreamBase
		wxCountingOutputStream()
		~wxCountingOutputStream()
		size_t GetSize() const
<wx/thread.h>
	class wxCriticalSection
		wxCriticalSection()
		~wxCriticalSection()
		void Enter()
		void Leave()
<wx/thread.h>
	class wxCriticalSectionLocker
		wxCriticalSectionLocker(wxCriticalSection& criticalsection)
		~wxCriticalSectionLocker()
<wx/strconv.h>
	class wxCSConv public wxMBConv
		wxCSConv(const wxChar* charset)
		wxCSConv(wxFontEncoding encoding)
		~wxCSConv()
		bool IsOk() const
		size_t MB2WC(wchar_t* buf, const char* psz, size_t n) const
		size_t WC2MB(char* buf, const wchar_t* psz, size_t n) const
<wx/cursor.h>
	class wxCursor public wxBitmap public wxGDIObject public wxObject
		wxCursor()
		wxCursor(const char bits[], int width,int height, int hotSpotX=-1, int hotSpotY=-1, const char maskBits[]=NULL,wxColour* fg=NULL, wxColour* bg=NULL)
		wxCursor(const wxString& cursorName, long type, int hotSpotX=0, int hotSpotY=0)
		wxCursor(int cursorId)
		wxCursor(const wxImage& image)
		wxCursor(const wxCursor& cursor)
		~wxCursor()
		bool IsOk() const
		wxCursor& operator =(const wxCursor& cursor)
<wx/dataobj.h>
	class wxCustomDataObject public wxDataObjectSimple public wxDataObject
		wxCustomDataObject(const wxDataFormat& format = wxFormatInvalid)
		~wxCustomDataObject()
		virtual void * Alloc(size_t size)
		virtual void Free()
		virtual size_t GetSize() const
		virtual void * GetData() const
<wx/dataobj.h>
	class wxDataFormat
		wxDataFormat(NativeFormat format = wxDF_INVALID)
		wxDataFormat(const wxChar *format)
		bool operator ==(const wxDataFormat& format) const
		bool operator !=(const wxDataFormat& format) const
		wxString GetId() const
		NativeFormat GetType() const
		void SetId(const wxChar *format)
		void SetType(NativeFormat format)
<wx/socket.h>
	class wxDatagramSocket public wxSocketBase
		wxDatagramSocket(wxSocketFlags flags = wxSOCKET_NONE)
		~wxDatagramSocket()
		wxDatagramSocket& ReceiveFrom(wxSockAddress& address, void * buffer, wxUint32 nbytes)
		wxDatagramSocket& SendTo(const wxSockAddress& address, const void * buffer, wxUint32 nbytes)
<wx/datstrm.h>
	class wxDataInputStream
		wxDataInputStream(wxInputStream& stream)
		wxDataInputStream(wxInputStream& stream, wxMBConv& conv = wxMBConvUTF8)
		~wxDataInputStream()
		void BigEndianOrdered(bool be_order)
		wxUint8 Read8()
		void Read8(wxUint8 *buffer, size_t size)
		wxUint16 Read16()
		void Read16(wxUint16 *buffer, size_t size)
		wxUint32 Read32()
		void Read32(wxUint32 *buffer, size_t size)
		wxUint64 Read64()
		void Read64(wxUint64 *buffer, size_t size)
		double ReadDouble()
		void ReadDouble(double *buffer, size_t size)
		wxString ReadString()
<wx/dataobj.h>
	class wxDataObject
		wxDataObject()
		~wxDataObject()
		virtual bool GetDataHere(const wxDataFormat& format, void *buf ) const
		virtual size_t GetDataSize(const wxDataFormat& format ) const
		virtual size_t GetFormatCount(Direction dir = Get) const
		virtual wxDataFormat GetPreferredFormat(Direction dir = Get) const
<wx/dataview.h>
	class wxDataViewColumn public wxObject
		wxDataViewColumn(const wxString& title, wxDataViewRenderer* renderer, unsigned int model_column, int width = 80, int flags = wxDATAVIEW_COL_RESIZABLE)
		wxDataViewColumn(const wxBitmap& bitmap, wxDataViewRenderer* renderer, unsigned int model_column, int width = 80, int flags = wxDATAVIEW_COL_RESIZABLE)
		~wxDataViewColumn()
		const wxBitmap& GetBitmap()
		unsigned int GetModelColumn()
		wxDataViewCtrl* GetOwner()
		wxDataViewRenderer* GetRenderer()
		bool GetSortable()
		int GetWidth()
		bool IsSortOrderAscending()
		void SetAlignment(wxAlignment align)
		void SetBitmap(const wxBitmap& bitmap)
		void SetSortOrder(bool ascending)
		void SetSortable(bool sortable)
		void SetTitle(const wxString& title)
	wxDV_SINGLE
	wxDV_MULTIPLE
	EVT_DATAVIEW_ROW_SELECTED(id, func)
	EVT_DATAVIEW_ROW_ACTIVATED(id, func)
	EVT_DATAVIEW_COLUMN_HEADER_CLICK(id, func)
	EVT_DATAVIEW_COLUMN_HEADER_RIGHT_CLICK(id, func)
<wx/dataview.h>
	class wxDataViewCtrl public wxControl
		wxDataViewCtrl()
		wxDataViewCtrl(wxWindow* parent, wxWindowID id, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = 0, const wxValidator& validator = wxDefaultValidator)
		~wxDataViewCtrl()
		virtual bool AppendColumn(wxDataViewColumn* col)
		bool AppendBitmapColumn(const wxString& label, unsigned int model_column, wxDataViewCellMode mode = wxDATAVIEW_CELL_INERT, int width = -1)
		bool AppendBitmapColumn(const wxBitmap& label, unsigned int model_column, wxDataViewCellMode mode = wxDATAVIEW_CELL_INERT, int width = -1)
		bool AppendDateColumn(const wxString& label, unsigned int model_column, wxDataViewCellMode mode = wxDATAVIEW_CELL_ACTIVATABLE, int width = -1)
		bool AppendDateColumn(const wxBitmap& label, unsigned int model_column, wxDataViewCellMode mode = wxDATAVIEW_CELL_ACTIVATABLE, int width = -1)
		bool AppendProgressColumn(const wxString& label, unsigned int model_column, wxDataViewCellMode mode = wxDATAVIEW_CELL_INERT, int width = 80)
		bool AppendProgressColumn(const wxBitmap& label, unsigned int model_column, wxDataViewCellMode mode = wxDATAVIEW_CELL_INERT, int width = 80)
		bool AppendTextColumn(const wxString& label, unsigned int model_column, wxDataViewCellMode mode = wxDATAVIEW_CELL_INERT, int width = -1)
		bool AppendTextColumn(const wxBitmap& label, unsigned int model_column, wxDataViewCellMode mode = wxDATAVIEW_CELL_INERT, int width = -1)
		bool AppendToggleColumn(const wxString& label, unsigned int model_column, wxDataViewCellMode mode = wxDATAVIEW_CELL_INERT, int width = 30)
		bool AppendToggleColumn(const wxBitmap& label, unsigned int model_column, wxDataViewCellMode mode = wxDATAVIEW_CELL_INERT, int width = 30)
		virtual bool AssociateModel(wxDataViewListModel* model)
		bool Create(wxWindow* parent, wxWindowID id, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = 0, const wxValidator& validator = wxDefaultValidator)
		virtual bool ClearColumns()
		void ClearSelection()
		virtual bool DeleteColumn(unsigned int pos)
		virtual wxDataViewColumn* GetColumn(unsigned int pos)
		virtual wxDataViewListModel* GetModel()
		virtual unsigned int GetNumberOfColumns()
		virtual int GetSelection() const
		virtual int GetSelections(wxArrayInt&amp; aSelections) const
		virtual bool IsSelected(unsigned int row) const
		virtual void SetSelection(int row)
		virtual void SetSelectionRange(unsigned int from, unsigned int to)
		virtual void SetSelections(const wxArrayInt&amp; aSelections)
		virtual void Unselect(unsigned int row)
<wx/dataview.h>
	class wxDataViewEvent public wxNotifyEvent
		wxDataViewEvent(wxEventType commandType = wxEVT_NULL, int winid = 0)
		wxDataViewEvent(const wxDataViewEvent& event)
		wxEvent* Clone() const
		int GetColumn() const
		wxDataViewColumn* GetDataViewColumn()
		wxDataViewModel* GetModel() const
		int GetRow() const
		const wxVariant& GetValue() const
		bool IsEditCancelled() const
		void SetColumn(int col)
		void SetDataViewColumn(wxDataViewColumn* col)
		void SetEditCanceled(bool editCancelled)
		void SetModel(wxDataViewModel* model)
		void SetRow(int row)
		void SetValue(const wxVariant& value)
<wx/dataview.h>
	class wxDataViewListModelNotifier public wxObject
		wxDataViewListModelNotifier()
		~wxDataViewListModelNotifier()
		bool Cleared()
		wxDataViewListModel* GetOwner()
		bool RowAppended()
		bool RowChanged(unsigned int row)
		bool RowDeleted(unsigned int row)
		bool RowInserted(unsigned int before)
		bool RowPrepended()
		bool RowsReordered(unsigned int* new_order)
		void SetOwner(wxDataViewListModel* owner)
		bool ValueChanged(unsigned int col, unsigned int row)
<wx/dataview.h>
	class wxDataViewModel public wxObject
		wxDataViewModel()
		~wxDataViewModel()
<wx/dataview.h>
	class wxDataViewListModel public wxDataViewModel public wxObject
		wxDataViewListModel()
		~wxDataViewListModel()
		void AddNotifier(wxDataViewListModelNotifier* notifier)
		void AddViewingColumn(wxDataViewColumn* view_column, unsigned int model_column)
		bool virtual Cleared()
		virtual wxString GetColType(unsigned int col)
		virtual unsigned int GetNumberOfCols()
		virtual unsigned int GetNumberOfRows()
		virtual void GetValue(wxVariant& variant, unsigned int col, unsigned int row)
		void RemoveNotifier(wxDataViewListModelNotifier* notifier)
		void RemoveViewingColumn(wxDataViewColumn* column)
		virtual bool RowAppended()
		virtual bool RowChanged(unsigned int row)
		virtual bool RowDeleted(unsigned int row)
		virtual bool RowInserted(unsigned int before)
		virtual bool RowPrepended()
		virtual bool RowsReordered(unsigned int* new_order)
		virtual bool SetValue(wxVariant& variant, unsigned int col, unsigned int row)
		virtual bool ValueChanged(unsigned int col, unsigned int row)
<wx/dataview.h>
	class wxDataViewSortedListModel public wxDataViewListModel public wxDataViewModel public wxObject
		wxDataViewSortedListModel(wxDataViewListModel* child)
		~wxDataViewSortedListModel()
		bool GetAscending()
		void Resort()
		void SetAscending(bool ascending)
<wx/dataview.h>
	class wxDataViewRenderer public wxObject
		wxDataViewRenderer(const wxString& varianttype, wxDataViewCellMode mode = wxDATAVIEW_CELL_INERT)
		virtual wxDataViewCellMode GetMode()
		virtual wxDataViewColumn* GetOwner()
		virtual bool GetValue(wxVariant& value)
		virtual wxString GetVariantType()
		virtual void SetOwner(wxDataViewColumn* owner)
		virtual bool SetValue(const wxVariant& value)
		virtual bool Validate(wxVariant& value)
<wx/dataview.h>
	class wxDataViewTextRenderer public wxDataViewRenderer
		wxDataViewTextRenderer(const wxString& varianttype = wxT("string"), wxDataViewCellMode mode = wxDATAVIEW_CELL_INERT)
<wx/dataview.h>
	class wxDataViewProgressRenderer public wxDataViewRenderer
		wxDataViewProgressRenderer(const wxString& label = wxEmptyString, const wxString& varianttype = wxT("long"), wxDataViewCellMode mode = wxDATAVIEW_CELL_INERT)
<wx/dataview.h>
	class wxDataViewToggleRenderer public wxDataViewRenderer
		wxDataViewToggleRenderer(const wxString& varianttype = wxT("bool"), wxDataViewCellMode mode = wxDATAVIEW_CELL_INERT)
<wx/dataview.h>
	class wxDataViewBitmapRenderer public wxDataViewRenderer
		wxDataViewBitmapRenderer(const wxString& varianttype = wxT("wxBitmap"), wxDataViewCellMode mode = wxDATAVIEW_CELL_INERT)
<wx/dataview.h>
	class wxDataViewDateRenderer public wxDataViewRenderer
		wxDataViewDateRenderer(const wxString& varianttype = wxT("datetime"), wxDataViewCellMode mode = wxDATAVIEW_CELL_ACTIVATABLE)
<wx/dataview.h>
	class wxDataViewCustomRenderer public wxDataViewRenderer
		wxDataViewCustomRenderer(const wxString& varianttype = wxT("string"), wxDataViewCellMode mode = wxDATAVIEW_CELL_INERT, bool no_init = false)
		~wxDataViewCustomRenderer()
		virtual bool Activate(wxRect cell, wxDataViewListModel* model, unsigned int col, unsigned int row)
		virtual wxDC* GetDC()
		virtual wxSize GetSize()
		virtual bool LeftClick(wxPoint cursor, wxRect cell, wxDataViewListModel* model, unsigned int col, unsigned int row)
		virtual bool Render(wxRect cell, wxDC* dc, int state)
		virtual bool RightClick(wxPoint cursor, wxRect cell, wxDataViewListModel* model, unsigned int col, unsigned int row)
		virtual bool StartDrag(wxPoint cursor, wxRect cell, wxDataViewListModel* model, unsigned int col, unsigned int row)
<wx/dataobj.h>
	class wxDataObjectComposite public wxDataObject
		wxDataObjectComposite()
		wxDataFormat GetReceivedFormat() const
<wx/dataobj.h>
	class wxDataObjectSimple public wxDataObject
		wxDataObjectSimple(const wxDataFormat& format = wxFormatInvalid)
		const wxDataFormat& GetFormat() const
		void SetFormat(const wxDataFormat& format)
		virtual size_t GetDataSize() const
		virtual bool GetDataHere(void *buf) const
		virtual bool SetData(size_t len, const void *buf)
<wx/datstrm.h>
	class wxDataOutputStream
		wxDataOutputStream(wxOutputStream& stream)
		wxDataOutputStream(wxOutputStream& stream, wxMBConv& conv = wxMBConvUTF8)
		~wxDataOutputStream()
		void BigEndianOrdered(bool be_order)
		void Write8(wxUint8 i8)
		void Write8(const wxUint8 *buffer, size_t size)
		void Write16(wxUint16 i16)
		void Write16(const wxUint16 *buffer, size_t size)
		void Write32(wxUint32 i32)
		void Write32(const wxUint32 *buffer, size_t size)
		void Write64(wxUint64 i64)
		void Write64(const wxUint64 *buffer, size_t size)
		void WriteDouble(double f)
		void WriteDouble(const double *buffer, size_t size)
		void WriteString(const wxString&string)
<wx/dateevt.h>
	class wxDateEvent public wxCommandEvent public wxEvent public wxObject
		const wxDateTime& GetDate() const
		void SetDate(const wxDateTime& date)
<wx/datectrl.h>
	wxDP_SPIN
	wxDP_DROPDOWN
	wxDP_DEFAULT
	wxDP_ALLOWNONE
	wxDP_SHOWCENTURY
	EVT_DATE_CHANGED(id, func)
	class wxDatePickerCtrl public wxControl public wxWindow public wxEvtHandler public wxObject
		wxDatePickerCtrl(wxWindow *parent,wxWindowID id,const wxDateTime& dt = wxDefaultDateTime,const wxPoint& pos = wxDefaultPosition,const wxSize& size = wxDefaultSize,long style = wxDP_DEFAULT | wxDP_SHOWCENTURY,const wxValidator& validator = wxDefaultValidator,const wxString& name = "datectrl")
		bool Create(wxWindow *parent,wxWindowID id,const wxDateTime& dt = wxDefaultDateTime,const wxPoint& pos = wxDefaultPosition,const wxSize& size = wxDefaultSize,long style = wxDP_DEFAULT | wxDP_SHOWCENTURY,const wxValidator& validator = wxDefaultValidator,const wxString& name = "datectrl")
		bool GetRange(wxDateTime *dt1, wxDateTime *dt2) const
		wxDateTime GetValue() const
		void SetFormat(const wxChar* format)
		void SetRange(const wxDateTime& dt1, const wxDateTime& dt2)
		void SetValue(const wxDateTime& dt)
<wx/datetime.h>
	class wxDateSpan
		wxDateSpan(int years = 0, int months = 0, int weeks = 0, int days = 0)
		wxDateSpan Add(const wxDateSpan& other) const
		wxDateSpan& Add(const wxDateSpan& other)
		wxDateSpan& operator+=(const wxDateSpan& other)
		static wxDateSpan Day()
		static wxDateSpan Days(int days)
		int GetDays() const
		int GetMonths() const
		int GetTotalDays() const
		int GetWeeks() const
		int GetYears() const
		static wxDateSpan Month()
		static wxDateSpan Months(int mon)
		wxDateSpan Multiply(int factor) const
		wxDateSpan& Multiply(int factor)
		wxDateSpan& operator*=(int factor)
		wxDateSpan Negate() const
		wxDateSpan& Neg()
		wxDateSpan& operator-()
		wxDateSpan& SetDays(int n)
		wxDateSpan& SetYears(int n)
		wxDateSpan& SetMonths(int n)
		wxDateSpan& SetWeeks(int n)
		wxDateSpan Subtract(const wxDateSpan& other) const
		wxDateSpan& Subtract(const wxDateSpan& other)
		wxDateSpan& operator+=(const wxDateSpan& other)
		static wxDateSpan Week()
		static wxDateSpan Weeks(int weeks)
		static wxDateSpan Year()
		static wxDateSpan Years(int years)
		bool operator==(wxDateSpan& other) const
		bool operator!=(wxDateSpan& other) const
<wx/datetime.h>
	class wxDateTime
		static int ConvertYearToBC(int year)
		static void GetAmPmStrings(wxString *am, wxString *pm)
		static wxDateTime GetBeginDST(int year = Inv_Year, Country country = Country_Default)
		static Country GetCountry()
		static int GetCurrentYear(Calendar cal = Gregorian)
		static Month GetCurrentMonth(Calendar cal = Gregorian)
		static int GetCentury(int year)
		static wxDateTime GetEndDST(int year = Inv_Year, Country country = Country_Default)
		static wxString GetMonthName(Month month, NameFlags flags = Name_Full)
		static wxDateTime_t GetNumberOfDays(int year, Calendar cal = Gregorian)
		static wxDateTime_t GetNumberOfDays(Month month, int year = Inv_Year, Calendar cal = Gregorian)
		static time_t GetTimeNow()
		static struct tm * GetTmNow(struct tm *tm)
		static struct tm * GetTmNow()
		static wxString GetWeekDayName(WeekDay weekday, NameFlags flags = Name_Full)
		static bool IsLeapYear(int year = Inv_Year, Calendar cal = Gregorian)
		static bool IsWestEuropeanCountry(Country country = Country_Default)
		static bool IsDSTApplicable(int year = Inv_Year, Country country = Country_Default)
		static wxDateTime Now()
		static void SetCountry(Country country)
		static wxDateTime Today()
		static wxDateTime UNow()
		wxDateTime()
		wxDateTime& wxDateTime(time_t timet)
		wxDateTime& wxDateTime(const struct tm&amp; tm)
		wxDateTime& wxDateTime(double jdn)
		wxDateTime& wxDateTime(wxDateTime_t hour, wxDateTime_t minute = 0, wxDateTime_t second = 0, wxDateTime_t millisec = 0)
		wxDateTime& wxDateTime(wxDateTime_t day, Month month = Inv_Month, int Inv_Year,wxDateTime_t hour = 0, wxDateTime_t minute = 0, wxDateTime_t second = 0, wxDateTime_t millisec = 0)
		wxDateTime& SetToCurrent()
		wxDateTime& Set(time_t timet)
		wxDateTime& Set(const struct tm&amp; tm)
		wxDateTime& Set(double jdn)
		wxDateTime& Set(wxDateTime_t hour, wxDateTime_t minute = 0, wxDateTime_t second = 0, wxDateTime_t millisec = 0)
		wxDateTime& Set(wxDateTime_t day, Month month = Inv_Month, int year = Inv_Year, wxDateTime_t hour = 0, wxDateTime_t minute = 0, wxDateTime_t second = 0, wxDateTime_t millisec = 0)
		wxDateTime& ResetTime()
		wxDateTime& SetYear(int year)
		wxDateTime& SetMonth(Month month)
		wxDateTime& SetDay(wxDateTime_t day)
		wxDateTime& SetHour(wxDateTime_t hour)
		wxDateTime& SetMinute(wxDateTime_t minute)
		wxDateTime& SetSecond(wxDateTime_t second)
		wxDateTime& SetMillisecond(wxDateTime_t millisecond)
		wxDateTime& operator(time_t timet)
		wxDateTime& operator(const struct tm&amp; tm)
		bool IsValid() const
		wxDateTime GetDateOnly() const
		Tm GetTm(const TimeZone&amp; tz = Local) const
		time_t GetTicks() const
		int GetCentury(const TimeZone&amp; tz = Local) const
		int GetYear(const TimeZone&amp; tz = Local) const
		Month GetMonth(const TimeZone&amp; tz = Local) const
		wxDateTime_t GetDay(const TimeZone&amp; tz = Local) const
		WeekDay GetWeekDay(const TimeZone&amp; tz = Local) const
		wxDateTime_t GetHour(const TimeZone&amp; tz = Local) const
		wxDateTime_t GetMinute(const TimeZone&amp; tz = Local) const
		wxDateTime_t GetSecond(const TimeZone&amp; tz = Local) const
		wxDateTime_t GetMillisecond(const TimeZone&amp; tz = Local) const
		wxDateTime_t GetDayOfYear(const TimeZone&amp; tz = Local) const
		wxDateTime_t GetWeekOfYear(WeekFlags flags = Monday_First, const TimeZone&amp; tz = Local) const
		wxDateTime_t GetWeekOfMonth(WeekFlags flags = Monday_First, const TimeZone&amp; tz = Local) const
		bool IsWorkDay(Country country = Country_Default) const
		bool IsGregorianDate(GregorianAdoption country = Gr_Standard) const
		wxDateTime& Set(unsigned long ddt)
		unsigned long GetAsDOS() const
		bool IsEqualTo(const wxDateTime& datetime) const
		bool IsEarlierThan(const wxDateTime& datetime) const
		bool IsLaterThan(const wxDateTime& datetime) const
		bool IsStrictlyBetween(const wxDateTime& t1, const wxDateTime& t2) const
		bool IsBetween(const wxDateTime& t1, const wxDateTime& t2) const
		bool IsSameDate(const wxDateTime& dt) const
		bool IsSameTime(const wxDateTime& dt) const
		bool IsEqualUpTo(const wxDateTime& dt, const wxTimeSpan& ts) const
		wxDateTime Add(const wxTimeSpan& diff) const
		wxDateTime& Add(const wxTimeSpan& diff)
		wxDateTime& operator+=(const wxTimeSpan& diff)
		wxDateTime Add(const wxDateSpan& diff) const
		wxDateTime& Add(const wxDateSpan& diff)
		wxDateTime& operator+=(const wxDateSpan& diff)
		wxDateTime Subtract(const wxTimeSpan& diff) const
		wxDateTime& Subtract(const wxTimeSpan& diff)
		wxDateTime& operator-=(const wxTimeSpan& diff)
		wxDateTime Subtract(const wxDateSpan& diff) const
		wxDateTime& Subtract(const wxDateSpan& diff)
		wxDateTime& operator-=(const wxDateSpan& diff)
		wxTimeSpan Subtract(const wxDateTime& dt) const
		const wxChar * ParseRfc822Date(const wxChar* date)
		const wxChar * ParseFormat(const wxChar *date, const wxChar *format = wxDefaultDateTimeFormat, const wxDateTime& dateDef = wxDefaultDateTime)
		const wxChar * ParseDateTime(const wxChar *datetime)
		const wxChar * ParseDate(const wxChar *date)
		const wxChar * ParseTime(const wxChar *time)
		wxString Format(const wxChar *format = wxDefaultDateTimeFormat, const TimeZone&amp; tz = Local) const
		wxString FormatDate() const
		wxString FormatTime() const
		wxString FormatISODate() const
		wxString FormatISOTime() const
		wxDateTime& SetToWeekDayInSameWeek(WeekDay weekday, WeekFlagsflags = Monday_First)
		wxDateTime GetWeekDayInSameWeek(WeekDay weekday, WeekFlagsflags = Monday_First) const
		wxDateTime& SetToNextWeekDay(WeekDay weekday)
		wxDateTime GetNextWeekDay(WeekDay weekday) const
		wxDateTime& SetToPrevWeekDay(WeekDay weekday)
		wxDateTime GetPrevWeekDay(WeekDay weekday) const
		bool SetToWeekDay(WeekDay weekday, int n = 1, Month month = Inv_Month, int year = Inv_Year)
		wxDateTime GetWeekDay(WeekDay weekday, int n = 1, Month month = Inv_Month, int year = Inv_Year) const
		bool SetToLastWeekDay(WeekDay weekday, Month month = Inv_Month, int year = Inv_Year)
		wxDateTime GetLastWeekDay(WeekDay weekday, Month month = Inv_Month, int year = Inv_Year)
		static wxDateTime SetToWeekOfYear(int year, wxDateTime_t numWeek, WeekDay weekday = Mon)
		wxDateTime& SetToLastMonthDay(Month month = Inv_Month, int year = Inv_Year)
		wxDateTime GetLastMonthDay(Month month = Inv_Month, int year = Inv_Year) const
		wxDateTime& SetToYearDay(wxDateTime_t yday)
		wxDateTime GetYearDay(wxDateTime_t yday) const
		double GetJulianDayNumber() const
		double GetJDN() const
		double GetModifiedJulianDayNumber() const
		double GetMJD() const
		double GetRataDie() const
		wxDateTime FromTimezone(const TimeZone&amp; tz, bool noDST = false) const
		wxDateTime ToTimezone(const TimeZone&amp; tz, bool noDST = false) const
		wxDateTime& MakeTimezone(const TimeZone&amp; tz, bool noDST = false)
		wxDateTime& MakeFromTimezone(const TimeZone&amp; tz, bool noDST = false)
		wxDateTime ToUTC(bool noDST = false) const
		wxDateTime& MakeUTC(bool noDST = false)
		int IsDST(Country country = Country_Default) const
	class wxDateTimeHolidayAuthority
	class wxDateTimeWorkDays
<wx/db.h>
	class wxDb
		wxDb()
		wxDb(const HENV &amp;aHenv, bool FwdOnlyCursors=(bool)wxODBC_FWD_ONLY_CURSORS)
		bool Catalog(wxChar * userID, const wxString &fileName =SQL_CATALOG_FILENAME)
		void Close()
		bool CommitTrans()
		bool CreateView(const wxString & viewName,const wxString & colList, const wxString &pSqlStmt)
		wxDBMS Dbms()
		bool DispAllErrors(HENV aHenv, HDBC aHdbc = SQL_NULL_HDBC, HSTMT aHstmt = SQL_NULL_HSTMT)
		void DispNextError()
		bool DropView(const wxString &viewName)
		wxString EscapeSqlChars(const wxString& value)
		bool ExecSql(const wxString &pSqlStmt)
		bool ExecSql(const wxString &pSqlStmt, wxDbColInf **columns, short &amp;numcols)
		bool IsFwdOnlyCursors()
		wxDbInf * GetCatalog(const wxChar *userID)
		wxDbInf * GetCatalog(const wxChar *userID)
		int GetColumnCount(const wxString &tableName, const wxChar *userID)
		wxDbColInf * GetColumns(const wxString &tableName, UWORD *numCols, const wxChar *userID=NULL)
		wxDbColInf * GetColumns(wxChar *tableName[], const wxChar *userID)
		bool GetData(UWORD colNumber, SWORD cType,PTR pData, SDWORD maxLen, SDWORD FAR * cbReturned )
		const wxChar * GetDatabaseName()
		const wxString & GetDatasourceName()
		HDBC GetHDBC()
		HENV GetHENV()
		HSTMT GetHSTMT()
		int GetKeyFields(const wxString &tableName, wxDbColInf *colInf, UWORD numColumns)
		bool GetNext()
		bool GetNextError(HENV aHenv,HDBC aHdbc = SQL_NULL_HDBC, HSTMT aHstmt = SQL_NULL_HSTMT)
		const wxString & GetPassword()
		int GetTableCount()
		const wxString & GetUsername()
		bool Grant(int privileges, const wxString &tableName,const wxString &userList = "PUBLIC")
		bool IsFwdOnlyCursors()
		bool IsOpen()
		void LogError(const wxString &errMsg const wxString &SQLState="")
		void ModifyColumn(const wxString &tableName const wxString &ColumnNameint dataType ULONG columnLength=0 const wxString &optionalParam="")
		bool Open(const wxString &Dsn, const wxString &Uid,const wxString &AuthStr, bool failOnDataTypeUnsupported)
		bool Open(const wxString &inConnectStr, bool failOnDataTypeUnsupported)
		bool Open(wxDbConnectInf *dbConnectInf, bool failOnDataTypeUnsupported)
		bool Open(wxDb *copyDb)
		bool RollbackTrans()
		void SetDebugErrorMessages(bool state)
		bool SetSqlLogging(wxDbSqlLogState state, const wxString &filename = SQL_LOG_FILENAME, bool append = false)
		const wxString SQLColumnName(const wxChar * colName)
		const wxString SQLTableName(const wxChar * tableName)
		bool TableExists(const wxString &tableName, const wxChar *userID=NULL, const wxString &path="")
		bool TablePrivileges(const wxString &tableName, const wxString &priv,const wxChar *userID=NULL, const wxChar *schema=NULL,const wxString &path="")
		int TranslateSqlState(const wxString &SQLState)
		bool WriteSqlLog(const wxString &logMsg)
	class wxDbColDataPtr
<wx/db.h>
	class wxDbColDef
<wx/db.h>
	class wxDbColFor
		int Format(int Nation, int dbDataType,SWORD sqlDataType, short columnSize,short decimalDigits)
<wx/db.h>
	class wxDbColInf
	class wxDbConnectInf
		wxDbConnectInf()
		wxDbConnectInf(HENV henv, const wxString &dsn,const wxString &userID="", const wxString &password,const wxString &defaultDir="", const wxString &description="",const wxString &fileType="")
		~wxDbConnectInf()
		bool AllocHenv()
		void FreeHenv()
		const wxChar * GetAuthStr()
		const wxChar * GetDefaultDir()
		const wxChar * GetDescription()
		const wxChar * GetDsn()
		const wxChar * GetFileType()
		const HENV GetHenv()
		const wxChar * GetPassword()
		const wxChar * GetUid()
		const wxChar * GetUserID()
		void SetHenv(const HENV henv)
<wx/db.h>
	class wxDbIdxDef
<wx/db.h>
	class wxDbInf
<wx/dbtable.h>
	class wxDbTable
		wxDbTable(wxDb *pwxDb, const wxString &tblName,const UWORD numColumns, const wxString &qryTblName = "",bool qryOnly = !wxDB_QUERY_ONLY, const wxString &tblPath = "")
		virtual ~wxDbTable()
		void BuildDeleteStmt(wxString &pSqlStmt,int typeOfDel, const wxString &pWhereClause="")
		void BuildSelectStmt(wxString &pSqlStmt,int typeOfSelect, bool distinct)
		void BuildUpdateStmt(wxString &pSqlStmt, int typeOfUpd,const wxString &pWhereClause="")
		void BuildWhereClause(wxString &pWhereClause,int typeOfWhere, const wxString &qualTableName="",bool useLikeComparison=false)
		bool CanSelectForUpdate()
		bool CanUpdateByROWID()
		void ClearMemberVar(UWORD colNumber, bool setToNull=false)
		void ClearMemberVars(bool setToNull=false)
		bool CloseCursor(HSTMTcursor)
		ULONG Count(const wxString &args="*")
		bool CreateIndex(const wxString &IndexName, bool unique,UWORD numIndexColumns, wxDbIdxDef *pIndexDefs,bool attemptDrop=true)
		bool CreateTable(bool attemptDrop=true)
		bool DB_STATUS()
		bool Delete()
		bool DeleteCursor(HSTMT *hstmtDel)
		bool DeleteMatching()
		bool DeleteWhere(const wxString &pWhereClause)
		bool DropIndex(const wxString &IndexName)
		bool DropTable()
		const wxString & From()
		void From(const wxString &From)
		wxDbColDef * GetColDefs()
		HSTMT GetCursor()
		wxDb * GetDb()
		bool GetFirst()
		const wxString & GetFromClause()
		bool GetLast()
		HSTMT * GetNewCursor(bool setCursor=false,bool bindColumns=true)
		bool GetNext()
		UWORD GetNumberOfColumns()
		const wxString & GetOrderByClause()
		bool GetPrev()
		const wxString & GetQueryTableName()
		UWORD GetRowNum()
		const wxString & GetTableName()
		const wxString & GetTablePath()
		const wxString & GetWhereClause()
		int Insert()
		bool IsColNull(UWORD colNumber) const
		bool IsCursorClosedOnCommit()
		bool IsQueryOnly()
		bool Open(bool checkPrivileges=false, bool checkTableExists=true)
		const wxString & OrderBy()
		void OrderBy(const wxString &OrderBy)
		virtual bool Query(bool forUpdate=false, bool distinct=false)
		bool QueryBySqlStmt(const wxString &pSqlStmt)
		virtual bool QueryMatching(bool forUpdate=false,bool distinct=false)
		bool QueryOnKeyFields(bool forUpdate=false,bool distinct=false)
		bool Refresh()
		bool SetColDefs(UWORD index, const wxString &fieldName,int dataType, void *pData, SWORD cType,int size, bool keyField = false, bool updateable = true,bool insertAllowed = true, bool derivedColumn = false)
		wxDbColDataPtr * SetColDefs(wxDbColInf *colInfs, UWORD numCols)
		void SetCursor(HSTMT *hstmtActivate = (void **) wxDB_DEFAULT_CURSOR)
		void SetFromClause(const wxString &From)
		bool SetColNull(UWORD colNumber, bool set=true)
		bool SetColNull(const wxString &colName,bool set=true)
		void SetOrderByClause(const wxString &OrderBy)
		bool SetQueryTimeout(UDWORD nSeconds)
		void SetWhereClause(const wxString &Where)
		bool Update()
		bool Update(const wxString &pSqlStmt)
		bool UpdateWhere(const wxString &pWhereClause)
		const wxString & Where()
		void Where(const wxString& Where)
		bool operator ++()
		bool operator --()
<wx/db.h>
	class wxDbTableInf
<wx/dbgrid.h>
	class wxDbGridColInfo
		wxDbGridColInfo(int colNumber, wxString type,wxString title, wxDbGridColInfo *next)
		~wxDbGridColInfo()
		void AddColInfo(int colNumber,wxString type, wxString title)
<wx/dbgrid.h>
<wx/dbgrid.h>
	class wxDbGridTableBase
		wxDbGridTableBase(wxDbTable *tab, wxDbGridColInfo *ColInfo,int count = wxUSE_QUERY, bool takeOwnership = true)
		void ValidateRow(int row)
		bool UpdateRow(int row)
		bool AssignDbTable(wxDbTable *tab,int count = wxUSE_QUERY,bool takeOwnership = true)
<wx/dc.h>
	class wxDC public wxObject
		bool Blit(wxCoord xdest, wxCoord ydest, wxCoord width, wxCoord height,wxDC* source, wxCoord xsrc, wxCoord ysrc, int logicalFunc = wxCOPY,bool useMask = false, wxCoord xsrcMask = -1, wxCoord ysrcMask = -1)
		void CalcBoundingBox(wxCoord x, wxCoord y)
		void Clear()
		virtual void ComputeScaleAndOrigin()
		void CrossHair(wxCoord x, wxCoord y)
		void DestroyClippingRegion()
		wxCoord DeviceToLogicalX(wxCoord x)
		wxCoord DeviceToLogicalXRel(wxCoord x)
		wxCoord DeviceToLogicalY(wxCoord y)
		wxCoord DeviceToLogicalYRel(wxCoord y)
		void DrawArc(wxCoord x1, wxCoord y1, wxCoord x2, wxCoord y2, wxCoord xc, wxCoord yc)
		void DrawBitmap(const wxBitmap& bitmap, wxCoord x, wxCoord y, bool transparent)
		void DrawCheckMark(wxCoord x, wxCoord y, wxCoord width, wxCoord height)
		void DrawCheckMark(const wxRect &rect)
		void DrawCircle(wxCoord x, wxCoord y, wxCoord radius)
		void DrawCircle(const wxPoint& pt, wxCoord radius)
		void DrawEllipse(wxCoord x, wxCoord y, wxCoord width, wxCoord height)
		void DrawEllipse(const wxPoint& pt, const wxSize& size)
		void DrawEllipse(const wxRect& rect)
		void DrawEllipticArc(wxCoord x, wxCoord y, wxCoord width, wxCoord height,double start, double end)
		void DrawIcon(const wxIcon& icon, wxCoord x, wxCoord y)
		virtual void DrawLabel(const wxString& text,const wxBitmap& image,const wxRect& rect,int alignment = wxALIGN_LEFT | wxALIGN_TOP,int indexAccel = -1,wxRect *rectBounding = NULL)
		void DrawLabel(const wxString& text, const wxRect& rect,int alignment = wxALIGN_LEFT | wxALIGN_TOP,int indexAccel = -1)
		void DrawLine(wxCoord x1, wxCoord y1, wxCoord x2, wxCoord y2)
		void DrawLines(int n, wxPoint points[], wxCoord xoffset = 0, wxCoord yoffset = 0)
		void DrawLines(wxList *points, wxCoord xoffset = 0, wxCoord yoffset = 0)
		void DrawPolygon(int n, wxPoint points[], wxCoord xoffset = 0, wxCoord yoffset = 0,int fill_style = wxODDEVEN_RULE)
		void DrawPolygon(wxList *points, wxCoord xoffset = 0, wxCoord yoffset = 0,int fill_style = wxODDEVEN_RULE)
		void DrawPolyPolygon(int n, int count[], wxPoint points[], wxCoord xoffset = 0, wxCoord yoffset = 0,int fill_style = wxODDEVEN_RULE)
		void DrawPoint(wxCoord x, wxCoord y)
		void DrawRectangle(wxCoord x, wxCoord y, wxCoord width, wxCoord height)
		void DrawRotatedText(const wxString& text, wxCoord x, wxCoord y, double angle)
		void DrawRoundedRectangle(wxCoord x, wxCoord y, wxCoord width, wxCoord height, double radius)
		void DrawSpline(int n, wxPoint points[])
		void DrawSpline(wxList *points)
		void DrawSpline(wxCoord x1, wxCoord y1, wxCoord x2, wxCoord y2, wxCoord x3, wxCoord y3)
		void DrawText(const wxString& text, wxCoord x, wxCoord y)
		void EndDoc()
		void EndPage()
		bool FloodFill(wxCoord x, wxCoord y, const wxColour& colour, int style=wxFLOOD_SURFACE)
		const wxBrush& GetBackground() const
		int GetBackgroundMode() const
		const wxBrush& GetBrush() const
		wxCoord GetCharHeight()
		wxCoord GetCharWidth()
		void GetClippingBox(wxCoord *x, wxCoord *y, wxCoord *width, wxCoord *height)
		const wxFont& GetFont() const
		wxLayoutDirection GetLayoutDirection() const
		int GetLogicalFunction()
		int GetMapMode()
		void GetMultiLineTextExtent(const wxString& string, wxCoord *w,wxCoord *h, wxCoord *heightLine = NULL, wxFont *font = NULL) const
		wxSize GetMultiLineTextExtent(const wxString& string) const
		bool GetPartialTextExtents(const wxString& text, wxArrayInt&amp; widths) const
		const wxPen& GetPen() const
		bool GetPixel(wxCoord x, wxCoord y, wxColour *colour)
		wxSize GetPPI() const
		void GetSize(wxCoord *width, wxCoord *height) const
		wxSize GetSize() const
		void GetSizeMM(wxCoord *width, wxCoord *height) const
		wxSize GetSizeMM() const
		const wxColour& GetTextBackground() const
		void GetTextExtent(const wxString& string, wxCoord *w, wxCoord *h,wxCoord *descent = NULL, wxCoord *externalLeading = NULL, wxFont *font = NULL) const
		wxSize GetTextExtent(const wxString& string) const
		const wxColour& GetTextForeground() const
		void GetUserScale(double *x, double *y)
		void GradientFillConcentric(const wxRect& rect, const wxColour& initialColour, const wxColour& destColour)
		void GradientFillConcentric(const wxRect& rect, const wxColour& initialColour, const wxColour& destColour, const wxPoint& circleCenter)
		void GradientFillLinear(const wxRect& rect, const wxColour& initialColour, const wxColour& destColour, wxDirection nDirection = wxEAST)
		wxCoord LogicalToDeviceX(wxCoord x)
		wxCoord LogicalToDeviceXRel(wxCoord x)
		wxCoord LogicalToDeviceY(wxCoord y)
		wxCoord LogicalToDeviceYRel(wxCoord y)
		wxCoord MaxX()
		wxCoord MaxY()
		wxCoord MinX()
		wxCoord MinY()
		bool Ok()
		void ResetBoundingBox()
		void SetAxisOrientation(bool xLeftRight,bool yBottomUp)
		void SetBackground(const wxBrush& brush)
		void SetBackgroundMode(int mode)
		void SetBrush(const wxBrush& brush)
		void SetClippingRegion(wxCoord x, wxCoord y, wxCoord width, wxCoord height)
		void SetClippingRegion(const wxPoint& pt, const wxSize& sz)
		void SetClippingRegion(const wxRect& rect)
		void SetClippingRegion(const wxRegion& region)
		void SetDeviceOrigin(wxCoord x, wxCoord y)
		void SetFont(const wxFont& font)
		void SetLayoutDirection(wxLayoutDirection dir)
		void SetLogicalFunction(int function)
		void SetMapMode(int int)
		void SetPalette(const wxPalette& palette)
		void SetPen(const wxPen& pen)
		void SetTextBackground(const wxColour& colour)
		void SetTextForeground(const wxColour& colour)
		void SetUserScale(double xScale, double yScale)
		bool StartDoc(const wxString& message)
		bool StartPage()
<wx/dc.h>
	class wxDCClipper
		wxDCClipper(wxDC& dc, const wxRegion& r)
		wxDCClipper(wxDC& dc, const wxRect& rect)
		wxDCClipper(wxDC& dc, int x, int y, int w, int h)
<wx/dde.h>
	class wxDDEClient public wxObject
		wxDDEClient()
		wxConnectionBase * MakeConnection(const wxString& host, const wxString& service, const wxString& topic)
		wxConnectionBase * OnMakeConnection()
		bool ValidHost(const wxString& host)
<wx/dde.h>
	class wxDDEConnection public wxObject
		wxDDEConnection()
		wxDDEConnection(char* buffer, int size)
		bool Advise(const wxString& item, char* data, int size = -1, wxIPCFormat format = wxCF_TEXT)
		bool Execute(char* data, int size = -1, wxIPCFormat format = wxCF_TEXT)
		bool Disconnect()
		virtual bool OnAdvise(const wxString& topic, const wxString& item, char* data, int size, wxIPCFormat format)
		virtual bool OnDisconnect()
		virtual bool OnExecute(const wxString& topic, char* data, int size, wxIPCFormat format)
		virtual bool OnPoke(const wxString& topic, const wxString& item, char* data, int size, wxIPCFormat format)
		virtual char* OnRequest(const wxString& topic, const wxString& item, int *size, wxIPCFormat format)
		virtual bool OnStartAdvise(const wxString& topic, const wxString& item)
		virtual bool OnStopAdvise(const wxString& topic, const wxString& item)
		bool Poke(const wxString& item, char* data, int size = -1, wxIPCFormat format = wxCF_TEXT)
		char* Request(const wxString& item, int *size, wxIPCFormat format = wxIPC_TEXT)
		bool StartAdvise(const wxString& item)
		bool StopAdvise(const wxString& item)
<wx/dde.h>
	class wxDDEServer
		wxDDEServer()
		bool Create(const wxString& service)
		virtual wxConnectionBase * OnAcceptConnection(const wxString& topic)
<wx/memory.h>
	class wxDebugContext
		int Check()
		bool Dump()
		bool GetCheckPrevious()
		bool GetDebugMode()
		int GetLevel()
		ostream&amp; GetStream()
		streambuf* GetStreamBuf()
		bool HasStream()
		bool PrintClasses()
		bool PrintStatistics(bool detailed = true)
		void SetCheckpoint(bool all = false)
		void SetCheckPrevious(bool check)
		void SetDebugMode(bool debug)
		bool SetFile(const wxString& filename)
		void SetLevel(int level)
		bool SetStandardError()
		void SetStream(ostream* stream, streambuf* streamBuf = NULL)
<wx/memory.h>
	class wxDebugStreamBuf
<wx/debugrpt.h>
	class wxDebugReport
		wxDebugReport()
		~wxDebugReport()
		void AddAll(Context context = Context_Exception)
		bool AddContext(Context ctx)
		bool AddCurrentContext()
		bool AddCurrentDump()
		bool AddDump(Context ctx)
		bool AddExceptionContext()
		bool AddExceptionDump()
		void AddFile(const wxString& filename, const wxString& description)
		bool AddText(const wxString& filename, const wxString& text, const wxString& description)
		void DoAddCustomContext(wxXmlNode * nodeRoot)
		bool DoAddExceptionInfo(wxXmlNode* nodeContext)
		bool DoAddLoadedModules(wxXmlNode* nodeModules)
		bool DoAddSystemInfo(wxXmlNode* nodeSystemInfo)
		const wxString& GetDirectory() const
		bool GetFile(size_t n, wxString* name, wxString* desc) const
		size_t GetFilesCount() const
		wxString GetReportName() const
		bool IsOk() const
		bool Process()
		void RemoveFile(const wxString& name)
		void Reset()
<wx/debugrpt.h>
	class wxDebugReportCompress public wxDebugReport
		wxDebugReportCompress()
		const wxString& GetCompressedFileName() const
<wx/debugrpt.h>
	class wxDebugReportPreview
		wxDebugReportPreview()
		~wxDebugReportPreview()
		bool Show(wxDebugReport& dbgrpt) const
<wx/debugrpt.h>
	class wxDebugReportPreviewStd public wxDebugReportPreview
		wxDebugReportPreviewStd()
		bool Show(wxDebugReport& dbgrpt) const
<wx/debugrpt.h>
	class wxDebugReportUpload public wxDebugReportCompress
		wxDebugReportUpload(const wxString& url, const wxString& input, const wxString& action, const wxString& curl = _T("curl"))
		bool OnServerReply(const wxArrayString& WXUNUSED(reply))
<wx/renderer.h>
	class wxDelegateRendererNative public wxRendererNative
		wxDelegateRendererNative()
		wxDelegateRendererNative(wxRendererNative& rendererNative)
		DrawXXX(...)
<wx/dialog.h>
	wxCAPTION
	wxDEFAULT_DIALOG_STYLE
	wxRESIZE_BORDER
	wxSYSTEM_MENU
	wxCLOSE_BOX
	wxMAXIMIZE_BOX
	wxMINIMIZE_BOX
	wxTHICK_FRAME
	wxSTAY_ON_TOP
	wxNO_3D
	wxDIALOG_NO_PARENT
	wxDIALOG_EX_CONTEXTHELP
	wxDIALOG_EX_METAL
	class wxDialog public wxTopLevelWindow public wxWindow public wxEvtHandler public wxObject
		wxDialog()
		wxDialog(wxWindow* parent, wxWindowID id,const wxString& title,const wxPoint& pos = wxDefaultPosition,const wxSize& size = wxDefaultSize,long style = wxDEFAULT_DIALOG_STYLE,const wxString& name = "dialogBox")
		~wxDialog()
		void Centre(int direction = wxBOTH)
		bool Create(wxWindow* parent, wxWindowID id,const wxString& title,const wxPoint& pos = wxDefaultPosition,const wxSize& size = wxDefaultSize,long style = wxDEFAULT_DIALOG_STYLE,const wxString& name = "dialogBox")
		wxSizer* CreateButtonSizer(long flags)
		wxSizer* CreateSeparatedButtonSizer(long flags)
		wxStdDialogButtonSizer* CreateStdDialogButtonSizer(long flags)
		virtual bool DoOK()
		void EndModal(int retCode)
		int GetAffirmativeId() const
		int GetEscapeId() const
		int GetReturnCode()
		wxToolBar* GetToolBar() const
		void Iconize(const bool iconize)
		bool IsIconized() const
		bool IsModal() const
		void OnSysColourChanged(wxSysColourChangedEvent& event)
		void SetAffirmativeId(int id)
		void SetEscapeId(int id)
		void SetIcon(const wxIcon& icon)
		void SetIcons(const wxIconBundle& icons)
		void SetModal(const bool flag)
		void SetReturnCode(int retCode)
		bool Show(const bool show)
		int ShowModal()
<wx/dialup.h>
	class wxDialUpEvent public wxEvent public wxObject
		wxDialUpEvent(bool isConnected, bool isOwnEvent)
		bool IsConnectedEvent() const
		bool IsOwnEvent() const
<wx/dialup.h>
	EVT_DIALUP_CONNECTED(func)
	EVT_DIALUP_DISCONNECTED(func)
	class wxDialUpManager
		wxDialUpManager* Create()
		bool IsOk() const
		~wxDialUpManager()
		size_t GetISPNames(wxArrayString& names) const
		bool Dial(const wxString& nameOfISP = wxEmptyString, const wxString& username = wxEmptyString, const wxString& password = wxEmptyString, bool async = true)
		bool IsDialing() const
		bool CancelDialing()
		bool HangUp()
		bool IsAlwaysOnline() const
		bool IsOnline() const
		void SetOnlineStatus(bool isOnline = true)
		bool EnableAutoCheckOnlineStatus(size_t nSeconds = 60)
		void DisableAutoCheckOnlineStatus()
		void SetWellKnownHost(const wxString& hostname, int portno = 80)
		void SetConnectCommand(const wxString& commandDial = wxT("/usr/bin/pon"), const wxString& commandHangup = wxT("/usr/bin/poff"))
<wx/dir.h>
	class wxDir
		wxDir()
		wxDir(const wxString& dir)
		~wxDir()
		static bool Exists(const wxString& dir)
		static size_t GetAllFiles(const wxString& dirname, wxArrayString *files, const wxString& filespec = wxEmptyString, int flags = wxDIR_DEFAULT)
		static wxString FindFirst(const wxString& dirname, const wxString& filespec, int flags = wxDIR_DEFAULT)
		bool GetFirst(wxString* filename, const wxString& filespec = wxEmptyString, int flags = wxDIR_DEFAULT) const
		wxString GetName() const
		bool GetNext(wxString* filename) const
		static wxULongLong GetTotalSize(const wxString& dir, wxArrayString* filesSkipped = NULL)
		bool HasFiles(const wxString& filespec = wxEmptyString)
		bool HasSubDirs(const wxString& dirspec = wxEmptyString)
		bool IsOpened() const
		bool Open(const wxString& dir)
		size_t Traverse(wxDirTraverser& sink, const wxString& filespec = wxEmptyString, int flags = wxDIR_DEFAULT)
<wx/dirdlg.h>
	wxDD_DEFAULT_STYLE
	wxDD_DIR_MUST_EXIST
	wxDD_CHANGE_DIR
	class wxDirDialog public wxDialog public wxWindow public wxEvtHandler public wxObject
		wxDirDialog(wxWindow* parent, const wxString& message = "Choose a directory",const wxString& defaultPath = "", long style = wxDD_DEFAULT_STYLE,const wxPoint& pos = wxDefaultPosition,const wxSize& size = wxDefaultSize,const wxString& name = "wxDirCtrl")
		~wxDirDialog()
		wxString GetPath() const
		wxString GetMessage() const
		void SetMessage(const wxString& message)
		void SetPath(const wxString& path)
		int ShowModal()
<wx/filepicker.h>
	wxDIRP_DEFAULT_STYLE
	wxDIRP_USE_TEXTCTRL
	wxDIRP_DIR_MUST_EXIST
	wxDIRP_CHANGE_DIR
	EVT_DIRPICKER_CHANGED(id, func)
	class wxDirPickerCtrl public wxPickerBase public wxControl public wxWindow public wxEvtHandler public wxObject
		wxDirPickerCtrl(wxWindow *parent,wxWindowID id,const wxString& path = wxEmptyString,const wxString& message = "Select a folder",const wxPoint& pos = wxDefaultPosition,const wxSize& size = wxDefaultSize,long style = wxDIRP_DEFAULT_STYLE,const wxValidator& validator = wxDefaultValidator,const wxString& name = "dirpickerctrl")
		bool Create(wxWindow *parent,wxWindowID id,const wxString& path = wxEmptyString,const wxString& message = "Select a folder",const wxPoint& pos = wxDefaultPosition,const wxSize& size = wxDefaultSize,long style = wxDIRP_DEFAULT_STYLE,const wxValidator& validator = wxDefaultValidator,const wxString& name = "dirpickerctrl")
		wxString GetPath() const
		void SetPath(const wxString &dirname)
<wx/dir.h>
	class wxDirTraverser
		virtual wxDirTraverseResult OnDir(const wxString& dirname)
		virtual wxDirTraverseResult OnFile(const wxString& filename)
		virtual wxDirTraverseResult OnOpenError(const wxString& openerrorname)
<wx/display.h>
	class wxDisplay
		wxDisplay(unsigned index = 0)
		void ~wxDisplay()
		bool ChangeMode(const wxVideoMode&amp; mode = wxDefaultVideoMode)
		wxRect GetClientArea() const
		static unsigned GetCount()
		wxVideoMode GetCurrentMode() const
		int GetDepth() const
		static int GetFromPoint(const wxPoint& pt)
		static int GetFromWindow(wxWindow* win)
		wxRect GetGeometry() const
		wxArrayVideoModes GetModes(const wxVideoMode&amp; mode = wxDefaultVideoMode) const
		wxString GetName() const
		bool IsPrimary()
<wx/dynlib.h>
	class wxDllLoader
		static wxString GetDllExt()
		wxDllType GetProgramHandle()
		void * GetSymbol(wxDllType dllHandle, const wxString& name)
		wxDllType LoadLibrary(const wxString & libname, bool* success = NULL)
		void UnloadLibrary(wxDllType dllhandle)
<wx/docview.h>
	class wxDocChildFrame public wxFrame public wxWindow public wxEvtHandler public wxObject
		wxDocChildFrame(wxDocument* doc, wxView* view, wxFrame* parent,wxWindowID id, const wxString& title, const wxPoint& pos = wxDefaultPosition,const wxSize& size = wxDefaultSize,long style = wxDEFAULT_FRAME_STYLE, const wxString& name = "frame")
		~wxDocChildFrame()
		wxDocument* GetDocument() const
		wxView* GetView() const
		void OnActivate(wxActivateEvent event)
		void OnCloseWindow(wxCloseEvent& event)
		void SetDocument(wxDocument *doc)
		void SetView(wxView *view)
<wx/docview.h>
	class wxDocManager public wxEvtHandler public wxObject
		wxDocManager(long flags = wxDEFAULT_DOCMAN_FLAGS, bool initialize = true)
		void ~wxDocManager()
		void ActivateView(wxView* doc, bool activate = true)
		void AddDocument(wxDocument *doc)
		void AddFileToHistory(const wxString& filename)
		void AssociateTemplate(wxDocTemplate *temp)
		bool CloseDocuments(bool force = true)
		wxDocument* CreateDocument(const wxString& path, long flags)
		wxView* CreateView(wxDocument*doc, long flags)
		void DisassociateTemplate(wxDocTemplate *temp)
		void FileHistoryAddFilesToMenu()
		void FileHistoryAddFilesToMenu(wxMenu* menu)
		void FileHistoryLoad(wxConfigBase& config)
		void FileHistoryRemoveMenu(wxMenu* menu)
		void FileHistorySave(wxConfigBase& resourceFile)
		void FileHistoryUseMenu(wxMenu* menu)
		wxDocTemplate * FindTemplateForPath(const wxString& path)
		wxDocument * GetCurrentDocument()
		wxView * GetCurrentView()
		wxList& GetDocuments()
		wxFileHistory * GetFileHistory()
		wxString GetLastDirectory() const
		int GetMaxDocsOpen()
		size_t GetHistoryFilesCount()
		wxList& GetTemplates()
		bool Initialize()
		bool MakeDefaultName(const wxString& buf)
		wxString MakeNewDocumentName()
		wxFileHistory * OnCreateFileHistory()
		void OnFileClose(wxCommandEvent& event)
		void OnFileCloseAll(wxCommandEvent& event)
		void OnFileNew(wxCommandEvent& event)
		void OnFileOpen(wxCommandEvent& event)
		void OnFileRevert(wxCommandEvent& event)
		void OnFileSave(wxCommandEvent& event)
		void OnFileSaveAs(wxCommandEvent& event)
		void RemoveDocument(wxDocument *doc)
		wxDocTemplate * SelectDocumentPath(wxDocTemplate **templates,int noTemplates, wxString& path, long flags, bool save)
		wxDocTemplate * SelectDocumentType(wxDocTemplate **templates,int noTemplates, bool sort=false)
		wxDocTemplate * SelectViewType(wxDocTemplate **templates,int noTemplates, bool sort=false)
		void SetLastDirectory(const wxString& dir)
		void SetMaxDocsOpen(int n)
<wx/docmdi.h>
	class wxDocMDIChildFrame public wxMDIChildFrame public wxFrame public wxWindow public wxEvtHandler public wxObject
		wxDocMDIChildFrame(wxDocument* doc, wxView* view, wxFrame* parent,wxWindowID id, const wxString& title, const wxPoint& pos = wxDefaultPosition,const wxSize& size = wxDefaultSize,long style = wxDEFAULT_FRAME_STYLE, const wxString& name = "frame")
		~wxDocMDIChildFrame()
		wxDocument* GetDocument() const
		wxView* GetView() const
		void OnActivate(wxActivateEvent event)
		void OnCloseWindow(wxCloseEvent& event)
		void SetDocument(wxDocument *doc)
		void SetView(wxView *view)
<wx/docmdi.h>
	class wxDocMDIParentFrame public wxMDIParentFrame public wxFrame public wxWindow public wxEvtHandler public wxObject
		wxDocMDIParentFrame()
		wxDocMDIParentFrame(wxDocManager* manager, wxFrame *parent, wxWindowID id,const wxString& title, const wxPoint& pos = wxDefaultPosition,const wxSize& size = wxDefaultSize,long style = wxDEFAULT_FRAME_STYLE, const wxString& name = "frame")
		~wxDocMDIParentFrame()
		bool Create(wxDocManager* manager, wxFrame *parent, wxWindowID id,const wxString& title, const wxPoint& pos = wxDefaultPosition,const wxSize& size = wxDefaultSize,long style = wxDEFAULT_FRAME_STYLE, const wxString& name = "frame")
		void OnCloseWindow(wxCloseEvent& event)
<wx/docview.h>
	class wxDocParentFrame public wxFrame public wxWindow public wxEvtHandler public wxObject
		wxDocParentFrame()
		wxDocParentFrame(wxDocManager* manager, wxFrame *parent, wxWindowID id,const wxString& title, const wxPoint& pos = wxDefaultPosition,const wxSize& size = wxDefaultSize,long style = wxDEFAULT_FRAME_STYLE, const wxString& name = "frame")
		~wxDocParentFrame()
		bool Create(wxDocManager* manager, wxFrame *parent, wxWindowID id,const wxString& title, const wxPoint& pos = wxDefaultPosition,const wxSize& size = wxDefaultSize,long style = wxDEFAULT_FRAME_STYLE, const wxString& name = "frame")
		wxDocManager * GetDocumentManager() const
		void OnCloseWindow(wxCloseEvent& event)
<wx/docview.h>
	class wxDocTemplate public wxObject
		wxDocTemplate(wxDocManager* manager, const wxString& descr, const wxString& filter,const wxString& dir, const wxString& ext, const wxString& docTypeName,const wxString& viewTypeName, wxClassInfo* docClassInfo = NULL,wxClassInfo* viewClassInfo = NULL, long flags = wxDEFAULT_TEMPLATE_FLAGS)
		void ~wxDocTemplate()
		wxDocument * CreateDocument(const wxString& path, long flags = 0)
		wxView * CreateView(wxDocument *doc, long flags = 0)
		wxString GetDefaultExtension()
		wxString GetDescription()
		wxString GetDirectory()
		wxDocManager * GetDocumentManager()
		wxString GetDocumentName()
		wxString GetFileFilter()
		long GetFlags()
		wxString GetViewName()
		bool InitDocument(wxDocument* doc, const wxString& path, long flags = 0)
		bool IsVisible()
		void SetDefaultExtension(const wxString& ext)
		void SetDescription(const wxString& descr)
		void SetDirectory(const wxString& dir)
		void SetDocumentManager(wxDocManager *manager)
		void SetFileFilter(const wxString& filter)
		void SetFlags(long flags)
<wx/docview.h>
	class wxDocument public wxEvtHandler public wxObject
		wxDocument()
		~wxDocument()
		virtual bool AddView(wxView *view)
		virtual bool Close()
		virtual bool DeleteAllViews()
		wxCommandProcessor* GetCommandProcessor() const
		wxDocTemplate* GetDocumentTemplate() const
		wxDocManager* GetDocumentManager() const
		wxString GetDocumentName() const
		wxWindow* GetDocumentWindow() const
		wxString GetFilename() const
		wxView * GetFirstView() const
		virtual void GetPrintableName(wxString& name) const
		wxString GetTitle() const
		wxList & GetViews() const
		virtual bool IsModified() const
		virtual istream&amp; LoadObject(istream&amp; stream)
		virtual wxInputStream& LoadObject(wxInputStream& stream)
		virtual void Modify(bool modify)
		virtual void OnChangedViewList()
		virtual bool OnCloseDocument()
		virtual bool OnCreate(const wxString& path, long flags)
		virtual wxCommandProcessor* OnCreateCommandProcessor()
		virtual bool OnNewDocument()
		virtual bool OnOpenDocument(const wxString& filename)
		virtual bool OnSaveDocument(const wxString& filename)
		virtual bool OnSaveModified()
		virtual bool RemoveView(wxView* view)
		virtual bool Save()
		virtual bool SaveAs()
		virtual ostream&amp; SaveObject(ostream&amp; stream)
		virtual wxOutputStream& SaveObject(wxOutputStream& stream)
		virtual void SetCommandProcessor(wxCommandProcessor *processor)
		void SetDocumentName(const wxString& name)
		void SetDocumentTemplate(wxDocTemplate* templ)
		void SetFilename(const wxString& filename, bool notifyViews = false)
		void SetTitle(const wxString& title)
		void UpdateAllViews(wxView* sender = NULL, wxObject* hint = NULL)
<wx/dragimag.h>
	class wxDragImage public wxObject
		wxDragImage()
		wxDragImage(const wxBitmap& image, const wxCursor& cursor = wxNullCursor,const wxPoint& cursorHotspot = wxPoint(0, 0))
		wxDragImage(const wxIcon& image, const wxCursor& cursor = wxNullCursor,const wxPoint& cursorHotspot = wxPoint(0, 0))
		wxDragImage(const wxString& text, const wxCursor& cursor = wxNullCursor,const wxPoint& cursorHotspot = wxPoint(0, 0))
		wxDragImage(const wxTreeCtrl& treeCtrl, wxTreeItemId& id)
		wxDragImage(const wxListCtrl& treeCtrl, long id)
		wxDragImage(const wxCursor& cursor = wxNullCursor,const wxPoint& cursorHotspot = wxPoint(0, 0))
		bool BeginDrag(const wxPoint& hotspot, wxWindow* window, bool fullScreen = false, wxRect* rect = NULL)
		bool BeginDrag(const wxPoint& hotspot, wxWindow* window, wxWindow* boundingWindow)
		virtual bool DoDrawImage(wxDC& dc, const wxPoint& pos)
		bool EndDrag()
		virtual wxRect GetImageRect(const wxPoint& pos) const
		bool Hide()
		bool Move(const wxPoint& pt)
		bool Show()
		bool UpdateBackingFromWindow(wxDC& windowDC, wxMemoryDC& destDC,const wxRect& sourceRect, const wxRect& destRect) const
<wx/event.h>
	EVT_DROP_FILES(func)
	class wxDropFilesEvent public wxEvent public wxObject
		wxDropFilesEvent(WXTYPE id = 0, int noFiles = 0,wxString* files = NULL)
		wxString* GetFiles() const
		int GetNumberOfFiles() const
		wxPoint GetPosition() const
<wx/dnd.h>
	class wxDropSource
		wxDropSource(wxWindow* win = NULL,const wxIconOrCursor&amp; iconCopy = wxNullIconOrCursor, const wxIconOrCursor&amp; iconMove = wxNullIconOrCursor, const wxIconOrCursor&amp; iconNone = wxNullIconOrCursor)
		wxDropSource(wxDataObject& data, wxWindow* win = NULL,const wxIconOrCursor&amp; iconCopy = wxNullIconOrCursor, const wxIconOrCursor&amp; iconMove = wxNullIconOrCursor, const wxIconOrCursor&amp; iconNone = wxNullIconOrCursor)
		virtual ~wxDropSource()
		void SetData(wxDataObject& data)
		virtual wxDragResult DoDragDrop(int flags = wxDrag_CopyOnly)
		wxDataObject * GetDataObject()
		virtual bool GiveFeedback(wxDragResult effect)
		void SetCursor(wxDragResult res, const wxCursor& cursor)
<wx/dnd.h>
	class wxDropTarget
		wxDropTarget(wxDataObject* data = NULL)
		~wxDropTarget()
		virtual void GetData()
		virtual wxDragResult OnData(wxCoord x, wxCoord y, wxDragResult def)
		virtual bool OnDrop(wxCoord x, wxCoord y)
		virtual wxDragResult OnEnter(wxCoord x, wxCoord y, wxDragResult def)
		virtual wxDragResult OnDragOver(wxCoord x, wxCoord y, wxDragResult def)
		virtual void OnLeave()
		void SetDataObject(wxDataObject* data)
<wx/dynlib.h>
	class wxDynamicLibrary
		wxDynamicLibrary()
		wxDynamicLibrary(const wxString& name, int flags = wxDL_DEFAULT)
		static wxString CanonicalizeName(const wxString& name, wxDynamicLibraryCategory cat = wxDL_LIBRARY)
		static wxString CanonicalizePluginName(const wxString& name, wxPluginCategory cat = wxDL_PLUGIN_GUI)
		wxDllType Detach()
		void * GetSymbol(const wxString& name) const
		void * GetSymbolAorW(const wxString& name) const
		static wxDllType GetProgramHandle()
		bool HasSymbol(const wxString& name) const
		bool IsLoaded() const
		static wxDynamicLibraryDetailsArray ListLoaded()
		bool Load(const wxString& name, int flags = wxDL_DEFAULT)
		void Unload()
		static void Unload(wxDllType handle)
<wx/dynlib.h>
	class wxDynamicLibraryDetails
		wxString GetName() const
		wxString GetPath() const
		bool GetAddress(void **addr, size_t *len) const
		wxString GetVersion() const
<wx/encconv.h>
	class wxEncodingConverter public wxObject
		wxEncodingConverter()
		bool Init(wxFontEncoding input_enc, wxFontEncoding output_enc, int method = wxCONVERT_STRICT)
		static bool CanConvert(wxFontEncoding encIn, wxFontEncoding encOut)
		bool Convert(const char* input, char* output) const
		bool Convert(const wchar_t* input, wchar_t* output) const
		bool Convert(const char* input, wchar_t* output) const
		bool Convert(const wchar_t* input, char* output) const
		bool Convert(char* str) const
		bool Convert(wchar_t* str) const
		wxString Convert(const wxString& input) const
		static wxFontEncodingArray GetPlatformEquivalents(wxFontEncoding enc, int platform = wxPLATFORM_CURRENT)
		static wxFontEncodingArray GetAllEquivalents(wxFontEncoding enc)
<wx/event.h>
	EVT_ERASE_BACKGROUND(func)
	class wxEraseEvent public wxEvent public wxObject
		wxEraseEvent(int id = 0, wxDC* dc = NULL)
		wxDC* GetDC() const
<wx/event.h>
	class wxEvent public wxObject
		wxEvent(int id = 0, wxEventType eventType = wxEVT_NULL)
		virtual wxEvent* Clone() const
		wxObject* GetEventObject()
		wxEventType GetEventType()
		int GetId() const
		bool GetSkipped() const
		long GetTimestamp()
		bool IsCommandEvent() const
		void ResumePropagation(int propagationLevel)
		void SetEventObject(wxObject* object)
		void SetEventType(wxEventType type)
		void SetId(int id)
		void SetTimestamp(long timeStamp)
		bool ShouldPropagate() const
		void Skip(bool skip = true)
		int StopPropagation()
<wx/event.h>
	class wxEvtHandler public wxObject
		wxEvtHandler()
		~wxEvtHandler()
		void AddPendingEvent(wxEvent& event)
		void Connect(int id, int lastId,wxEventType eventType, wxObjectEventFunction function,wxObject* userData = NULL, wxEvtHandler* eventSink = NULL)
		void Connect(int id,wxEventType eventType, wxObjectEventFunction function,wxObject* userData = NULL, wxEvtHandler* eventSink = NULL)
		void Connect(wxEventType eventType, wxObjectEventFunction function,wxObject* userData = NULL, wxEvtHandler* eventSink = NULL)
		bool Disconnect(wxEventType eventType = wxEVT_NULL, wxObjectEventFunction function = NULL,wxObject* userData = NULL, wxEvtHandler* eventSink = NULL)
		bool Disconnect(int id = wxID_ANY,wxEventType eventType = wxEVT_NULL, wxObjectEventFunction function = NULL,wxObject* userData = NULL, wxEvtHandler* eventSink = NULL)
		bool Disconnect(int id, int lastId = wxID_ANY,wxEventType eventType = wxEVT_NULL, wxObjectEventFunction function = NULL,wxObject* userData = NULL, wxEvtHandler* eventSink = NULL)
		void* GetClientData()
		wxClientData* GetClientObject() const
		bool GetEvtHandlerEnabled()
		wxEvtHandler* GetNextHandler()
		wxEvtHandler* GetPreviousHandler()
		virtual bool ProcessEvent(wxEvent& event)
		virtual bool SearchEventTable(wxEventTable&amp; table, wxEvent& event)
		void SetClientData(void* data)
		void SetClientObject(wxClientData* data)
		void SetEvtHandlerEnabled(bool enabled)
		void SetNextHandler(wxEvtHandler* handler)
		void SetPreviousHandler(wxEvtHandler* handler)
<wx/ffile.h>
	class wxFFile
		wxFFile()
		wxFFile(const char* filename, const char* mode = "r")
		wxFFile(FILE* fp)
		~wxFFile()
		void Attach(FILE* fp)
		bool Close()
		void Detach()
		FILE * fp() const
		bool Eof() const
		bool Flush()
		wxFileKind GetKind() const
		bool IsOpened() const
		wxFileOffset Length() const
		bool Open(const char* filename, const char* mode = "r")
		size_t Read(void* buffer, size_t count)
		bool ReadAll(wxString * str, wxMBConv& conv = wxConvUTF8)
		bool Seek(wxFileOffset ofs, wxSeekMode mode = wxFromStart)
		bool SeekEnd(wxFileOffset ofs = 0)
		wxFileOffset Tell() const
		size_t Write(const void* buffer, size_t count)
		bool Write(const wxString& s, wxMBConv& conv = wxConvUTF8)
<wx/wfstream.h>
	class wxFFileInputStream public wxInputStream
		wxFFileInputStream(const wxString& filename, const wxChar * mode = "rb")
		wxFFileInputStream(wxFFile& file)
		wxFFileInputStream(FILE * fp)
		~wxFFileInputStream()
		bool IsOk() const
<wx/wfstream.h>
	class wxFFileOutputStream public wxOutputStream
		wxFFileOutputStream(const wxString& filename, const wxChar * mode="w+b")
		wxFFileOutputStream(wxFFile& file)
		wxFFileOutputStream(FILE * fp)
		~wxFFileOutputStream()
		bool IsOk() const
<wx/wfstream.h>
	class wxFFileStream public wxFFileOutputStream, wxFFileInputStream
		wxFFileStream(const wxString& iofileName)
<wx/file.h>
	class wxFile
		wxFile()
		wxFile(const char* filename, wxFile::OpenMode mode = wxFile::read)
		wxFile(int fd)
		~wxFile()
		static bool Access(const char * name, OpenMode mode)
		void Attach(int fd)
		void Close()
		bool Create(const char* filename, bool overwrite = false, int access = wxS_DEFAULT)
		void Detach()
		int fd() const
		bool Eof() const
		static bool Exists(const char* filename)
		bool Flush()
		wxFileKind GetKind() const
		bool IsOpened() const
		wxFileOffset Length() const
		bool Open(const char* filename, wxFile::OpenMode mode = wxFile::read)
		size_t Read(void* buffer, size_t count)
		wxFileOffset Seek(wxFileOffset ofs, wxSeekMode mode = wxFromStart)
		wxFileOffset SeekEnd(wxFileOffset ofs = 0)
		wxFileOffset Tell() const
		size_t Write(const void* buffer, size_t count)
		bool Write(const wxString& s, wxMBConv& conv = wxConvUTF8)
<wx/fileconf.h>
	class wxFileConfig public wxConfigBase
		wxFileConfig(wxInputStream& is, wxMBConv& conv = wxConvUTF8)
		bool Save(wxOutputStream& os, wxMBConv& conv = wxConvUTF8)
		void SetUmask(int mode)
<wx/dataobj.h>
	class wxFileDataObject public wxDataObjectSimple public wxDataObject
		wxFileDataObject()
		virtual void AddFile(const wxString& file)
		const wxArrayString& GetFilenames() const
<wx/filedlg.h>
	wxFD_DEFAULT_STYLE
	wxFD_OPEN
	wxFD_SAVE
	wxFD_OVERWRITE_PROMPT
	wxFD_FILE_MUST_EXIST
	wxFD_MULTIPLE
	wxFD_CHANGE_DIR
	wxFD_PREVIEW
	class wxFileDialog public wxDialog public wxWindow public wxEvtHandler public wxObject
		wxFileDialog(wxWindow* parent, const wxString& message = "Choose a file",const wxString& defaultDir = "", const wxString& defaultFile = "",const wxString& wildcard = "*.*", long style = wxFD_DEFAULT_STYLE, const wxPoint& pos = wxDefaultPosition, const wxSize& sz = wxDefaultSize, const wxString& name = "filedlg")
		~wxFileDialog()
		wxString GetDirectory() const
		wxString GetFilename() const
		void GetFilenames(wxArrayString& filenames) const
		int GetFilterIndex() const
		wxString GetMessage() const
		wxString GetPath() const
		void GetPaths(wxArrayString& paths) const
		wxString GetWildcard() const
		void SetDirectory(const wxString& directory)
		void SetFilename(const wxString& setfilename)
		void SetFilterIndex(int filterIndex)
		void SetMessage(const wxString& message)
		void SetPath(const wxString& path)
		void SetWildcard(const wxString& wildCard)
		int ShowModal()
<wx/dnd.h>
	class wxFileDropTarget public wxDropTarget
		wxFileDropTarget()
		virtual bool OnDrop(long x, long y, const void *data, size_t size)
		virtual bool OnDropFiles(wxCoord x, wxCoord y, const wxArrayString& filenames)
<wx/docview.h>
	class wxFileHistory public wxObject
		wxFileHistory(size_t maxFiles = 9, wxWindowID idBase = wxID_FILE1)
		~wxFileHistory()
		void AddFileToHistory(const wxString& filename)
		void AddFilesToMenu()
		void AddFilesToMenu(wxMenu* menu)
		wxWindowID GetBaseId() const
		size_t GetCount() const
		wxString GetHistoryFile(size_t index) const
		int GetMaxFiles() const
		const wxList& GetMenus() const
		void Load(wxConfigBase& config)
		void RemoveFileFromHistory(size_t i)
		void RemoveMenu(wxMenu* menu)
		void Save(wxConfigBase& config)
		void SetBaseId(wxWindowID baseId)
		void UseMenu(wxMenu* menu)
<wx/wfstream.h>
	class wxFileInputStream public wxInputStream
		wxFileInputStream(const wxString& ifileName)
		wxFileInputStream(wxFile& file)
		wxFileInputStream(int fd)
		~wxFileInputStream()
		bool IsOk() const
<wx/filename.h>
	class wxFileName
	class wxFileName
		wxFileName()
		wxFileName(const wxFileName& filename)
		wxFileName(const wxString& fullpath, wxPathFormat format = wxPATH_NATIVE)
		wxFileName(const wxString& path, const wxString& name, wxPathFormat format = wxPATH_NATIVE)
		wxFileName(const wxString& path, const wxString& name, const wxString& ext, wxPathFormat format = wxPATH_NATIVE)
		wxFileName(const wxString& volume, const wxString& path, const wxString& name, const wxString& ext, wxPathFormat format = wxPATH_NATIVE)
		void AppendDir(const wxString& dir)
		void Assign(const wxFileName& filepath)
		void Assign(const wxString& fullpath, wxPathFormat format = wxPATH_NATIVE)
		void Assign(const wxString& volume, const wxString& path, const wxString& name, const wxString& ext, bool hasExt, wxPathFormat format = wxPATH_NATIVE)
		void Assign(const wxString& volume, const wxString& path, const wxString& name, const wxString& ext, wxPathFormat format = wxPATH_NATIVE)
		void Assign(const wxString& path, const wxString& name, wxPathFormat format = wxPATH_NATIVE)
		void Assign(const wxString& path, const wxString& name, const wxString& ext, wxPathFormat format = wxPATH_NATIVE)
		static void AssignCwd(const wxString& volume = wxEmptyString)
		void AssignDir(const wxString& dir, wxPathFormat format = wxPATH_NATIVE)
		void AssignHomeDir()
		void AssignTempFileName(const wxString& prefix, wxFile *fileTemp = NULL)
		void Clear()
		void SetClearExt()
		static wxString CreateTempFileName(const wxString& prefix, wxFile *fileTemp = NULL)
		bool DirExists() const
		static bool DirExists(const wxString& dir)
		static wxFileName DirName(const wxString& dir, wxPathFormat format = wxPATH_NATIVE)
		bool FileExists() const
		static bool FileExists(const wxString& file)
		static wxFileName FileName(const wxString& file, wxPathFormat format = wxPATH_NATIVE)
		static wxString GetCwd(const wxString& volume = "")
		size_t GetDirCount() const
		const wxArrayString& GetDirs() const
		wxString GetExt() const
		static wxString GetForbiddenChars(wxPathFormat format = wxPATH_NATIVE)
		static wxPathFormat GetFormat(wxPathFormat format = wxPATH_NATIVE)
		wxString GetFullName() const
		wxString GetFullPath(wxPathFormat format = wxPATH_NATIVE) const
		static wxString GetHomeDir()
		wxString GetLongPath() const
		wxDateTime GetModificationTime() const
		wxString GetName() const
		wxString GetPath(int flags = wxPATH_GET_VOLUME, wxPathFormat format = wxPATH_NATIVE) const
		static wxChar GetPathSeparator(wxPathFormat format = wxPATH_NATIVE)
		static wxString GetPathSeparators(wxPathFormat format = wxPATH_NATIVE)
		static wxString GetPathTerminators(wxPathFormat format = wxPATH_NATIVE)
		wxString GetPathWithSep(wxPathFormat format = wxPATH_NATIVE) const
		wxString GetShortPath() const
		wxULongLong GetSize() const
		static wxULongLong GetSize(const wxString& filename)
		wxString GetHumanReadableSize(const wxString& failmsg = "Not available", int precision = 1) const
		static wxString GetHumanReadableSize(const wxULongLong&amp; bytes, const wxString& nullsize = "Not available", int precision = 1)
		static wxString GetTempDir()
		bool GetTimes(wxDateTime* dtAccess, wxDateTime* dtMod, wxDateTime* dtCreate) const
		wxString GetVolume() const
		static wxString GetVolumeSeparator(wxPathFormat format = wxPATH_NATIVE)
		bool HasExt() const
		bool HasName() const
		bool HasVolume() const
		void InsertDir(size_t before, const wxString& dir)
		bool IsAbsolute(wxPathFormat format = wxPATH_NATIVE)
		static bool IsCaseSensitive(wxPathFormat format = wxPATH_NATIVE)
		bool IsDirReadable() const
		static bool IsDirReadable(const wxString& dir)
		bool IsDirWritable() const
		static bool IsDirWritable(const wxString& dir)
		bool IsFileExecutable() const
		static bool IsFileExecutable(const wxString& file)
		bool IsFileReadable() const
		static bool IsFileReadable(const wxString& file)
		bool IsFileWritable() const
		static bool IsFileWritable(const wxString& file)
		bool IsOk() const
		static bool IsPathSeparator(wxChar ch, wxPathFormat format = wxPATH_NATIVE)
		bool IsRelative(wxPathFormat format = wxPATH_NATIVE)
		bool IsDir() const
		static bool MacFindDefaultTypeAndCreator(const wxString& ext, wxUint32* type, wxUint32* creator)
		static void MacRegisterDefaultTypeAndCreator(const wxString& ext, wxUint32 type, wxUint32 creator)
		bool MacSetDefaultTypeAndCreator()
		bool MakeAbsolute(const wxString& cwd = wxEmptyString, wxPathFormat format = wxPATH_NATIVE)
		bool MakeRelativeTo(const wxString& pathBase = wxEmptyString, wxPathFormat format = wxPATH_NATIVE)
		bool Mkdir(int perm = 0777, int flags = 0)
		static bool Mkdir(const wxString& dir, int perm = 0777, int flags = 0)
		bool Normalize(int flags = wxPATH_NORM_ALL, const wxString& cwd = wxEmptyString, wxPathFormat format = wxPATH_NATIVE)
		void PrependDir(const wxString& dir)
		void RemoveDir(size_t pos)
		void RemoveLastDir()
		bool Rmdir()
		static bool Rmdir(const wxString& dir)
		bool SameAs(const wxFileName& filepath, wxPathFormat format = wxPATH_NATIVE) const
		bool SetCwd()
		static bool SetCwd(const wxString& cwd)
		void SetExt(const wxString& ext)
		void SetEmptyExt()
		void SetFullName(const wxString& fullname)
		void SetName(const wxString& name)
		bool SetTimes(const wxDateTime* dtAccess, const wxDateTime* dtMod, const wxDateTime* dtCreate)
		void SetVolume(const wxString& volume)
		static void SplitPath(const wxString& fullpath, wxString* volume, wxString* path, wxString* name, wxString* ext, bool *hasExt = NULL, wxPathFormat format = wxPATH_NATIVE)
		static void SplitPath(const wxString& fullpath, wxString* volume, wxString* path, wxString* name, wxString* ext, wxPathFormat format = wxPATH_NATIVE)
		static void SplitPath(const wxString& fullpath, wxString* path, wxString* name, wxString* ext, wxPathFormat format = wxPATH_NATIVE)
		static void SplitVolume(const wxString& fullpath, wxString* volume, wxString* path, wxPathFormat format = wxPATH_NATIVE)
		bool Touch()
		wxFileName& operator operator=(const wxFileName& filename)
		wxFileName& operator operator=(const wxString& filename)
		bool operator operator==(const wxFileName& filename) const
		bool operator operator==(const wxString& filename) const
		bool operator operator!=(const wxFileName& filename) const
		bool operator operator!=(const wxString& filename) const
<wx/wfstream.h>
	class wxFileOutputStream public wxOutputStream
		wxFileOutputStream(const wxString& ofileName)
		wxFileOutputStream(wxFile& file)
		wxFileOutputStream(int fd)
		~wxFileOutputStream()
		bool IsOk() const
<wx/filepicker.h>
	wxFLP_DEFAULT_STYLE
	wxFLP_USE_TEXTCTRL
	wxFLP_OPEN
	wxFLP_SAVE
	wxFLP_OVERWRITE_PROMPT
	wxFLP_FILE_MUST_EXIST
	wxFLP_CHANGE_DIR
	EVT_FILEPICKER_CHANGED(id, func)
	class wxFilePickerCtrl public wxPickerBase public wxControl public wxWindow public wxEvtHandler public wxObject
		wxFilePickerCtrl(wxWindow *parent,wxWindowID id,const wxString& path = wxEmptyString,const wxString& message = "Select a file",const wxString& wildcard = "*.*",const wxPoint& pos = wxDefaultPosition,const wxSize& size = wxDefaultSize,long style = wxFLP_DEFAULT_STYLE,const wxValidator& validator = wxDefaultValidator,const wxString& name = "filepickerctrl")
		bool Create(wxWindow *parent,wxWindowID id,const wxString& path = wxEmptyString,const wxString& message = "Select a file",const wxString& wildcard = "*.*",const wxPoint& pos = wxDefaultPosition,const wxSize& size = wxDefaultSize,long style = wxFLP_DEFAULT_STYLE,const wxValidator& validator = wxDefaultValidator,const wxString& name = "filepickerctrl")
		wxString GetPath() const
		void SetPath(const wxString &filename)
<wx/filepicker.h>
	EVT_FILEPICKER_CHANGED(id, func)
	EVT_DIRPICKER_CHANGED(id, func)
	class wxFileDirPickerEvent public wxCommandEvent public wxEvent public wxObject
		wxFileDirPickerEvent(wxEventType type, wxObject * generator, int id, const wxString path)
		wxString GetPath() const
		void SetPath(const wxString &path)
<wx/wfstream.h>
	class wxFileStream public wxFileOutputStream, wxFileInputStream
		wxFileStream(const wxString& iofileName)
<wx/filesys.h>
	class wxFileSystem public wxObject
		wxFileSystem()
		static void AddHandler(wxFileSystemHandler *handler)
		static bool HasHandlerForPath(const wxString & location)
		void ChangePathTo(const wxString& location, bool is_dir = false)
		wxString GetPath()
		static wxString FileNameToURL(wxFileName filename)
		bool FindFileInPath(wxString *str, const wxChar *path, const wxChar *file)
		wxString FindFirst(const wxString& wildcard, int flags = 0)
		wxString FindNext()
		wxFSFile* OpenFile(const wxString& location, int flags = wxFS_READ)
		static wxFileName URLToFileName(const wxString& url)
<wx/filesys.h>
	class wxFileSystemHandler public wxObject
		wxFileSystemHandler()
		virtual bool CanOpen(const wxString& location)
		wxString GetAnchor(const wxString& location) const
		wxString GetLeftLocation(const wxString& location) const
		wxString GetMimeTypeFromExt(const wxString& location)
		wxString GetProtocol(const wxString& location) const
		wxString GetRightLocation(const wxString& location) const
		virtual wxString FindFirst(const wxString& wildcard, int flags = 0)
		virtual wxString FindNext()
		virtual wxFSFile* OpenFile(wxFileSystem& fs, const wxString& location)
<wx/mimetype.h>
	class wxFileType
		wxFileType()
		~wxFileType()
		bool GetMimeType(wxString* mimeType)
		bool GetMimeType(wxArrayString& mimeTypes)
		bool GetExtensions(wxArrayString& extensions)
		bool GetIcon(wxIconLocation * iconLoc)
		bool GetDescription(wxString* desc)
		bool GetOpenCommand(wxString* command, MessageParameters&amp; params)
		wxString GetOpenCommand(const wxString& filename)
		bool GetPrintCommand(wxString* command,MessageParameters&amp; params)
		static wxString ExpandCommand(const wxString& command, MessageParameters&amp; params)
<wx/stream.h>
	class wxFilterClassFactory public wxObject
		bool CanHandle(const wxChar* protocol, wxStreamProtocolType type = wxSTREAM_PROTOCOL) const
		static const wxFilterClassFactory* Find(const wxChar* protocol, wxStreamProtocolType type = wxSTREAM_PROTOCOL)
		static const wxFilterClassFactory* GetFirst()
		const wxFilterClassFactory* GetNext() const
		wxString GetProtocol() const
		const wxChar * const* GetProtocols(wxStreamProtocolType type = wxSTREAM_PROTOCOL) const
		wxFilterInputStream* NewStream(wxInputStream& stream) const
		wxFilterOutputStream* NewStream(wxOutputStream& stream) const
		wxFilterInputStream* NewStream(wxInputStream* stream) const
		wxFilterOutputStream* NewStream(wxOutputStream* stream) const
		wxString PopExtension(const wxString& location) const
		void PushFront()
		void Remove()
<wx/stream.h>
	class wxFilterInputStream public wxInputStream public wxStreamBase
		wxFilterInputStream(wxInputStream& stream)
		wxFilterInputStream(wxInputStream* stream)
<wx/stream.h>
	class wxFilterOutputStream public wxOutputStream public wxStreamBase
		wxFilterOutputStream(wxOutputStream& stream)
		wxFilterOutputStream(wxOutputStream* stream)
<wx/fdrepdlg.h>
	EVT_FIND(id, func)
	EVT_FIND_NEXT(id, func)
	EVT_FIND_REPLACE(id, func)
	EVT_FIND_REPLACE_ALL(id, func)
	EVT_FIND_CLOSE(id, func)
	class wxFindDialogEvent public wxCommandEvent
		wxFindDialogEvent(wxEventType commandType = wxEVT_NULL, int id = 0)
		int GetFlags() const
		wxString GetFindString() const
		const wxString& GetReplaceString() const
		wxFindReplaceDialog* GetDialog() const

	class wxFindReplaceData public wxObject
		wxFindReplaceData(wxUint32 flags = 0)
		const wxString& GetFindString()
		const wxString& GetReplaceString()
		int GetFlags() const
		void SetFlags(wxUint32 flags)
		void SetFindString(const wxString& str)
		void SetReplaceString(const wxString& str)

	class wxFindReplaceDialog public wxDialog
		wxFindReplaceDialog()
		wxFindReplaceDialog(wxWindow * parent, wxFindReplaceData* data, const wxString& title, int style = 0)
		~wxFindReplaceDialog()
		bool Create(wxWindow * parent, wxFindReplaceData* data, const wxString& title, int style = 0)
		const wxFindReplaceData* GetData() const
<wx/sizer.h>
	class wxFlexGridSizer public wxGridSizer public wxSizer public wxObject
		wxFlexGridSizer(int rows, int cols, int vgap, int hgap)
		wxFlexGridSizer(int cols, int vgap = 0, int hgap = 0)
		void AddGrowableCol(size_t idx, int proportion = 0)
		void AddGrowableRow(size_t idx, int proportion = 0)
		int GetFlexibleDirection() const
		int GetNonFlexibleGrowMode() const
		void RemoveGrowableCol(size_t idx)
		void RemoveGrowableRow(size_t idx)
		void SetFlexibleDirection(int direction)
		void SetNonFlexibleGrowMode(wxFlexSizerGrowMode mode)
<wx/event.h>
	EVT_SET_FOCUS(func)
	EVT_KILL_FOCUS(func)
	class wxFocusEvent public wxEvent public wxObject
		wxFocusEvent(WXTYPE eventType = 0, int id = 0)
<wx/font.h>
	class wxFont public wxGDIObject public wxObject
		wxFont()
		wxFont(const wxFont& font)
		wxFont(int pointSize, wxFontFamily family, int style, wxFontWeight weight,const bool underline = false, const wxString& faceName = "",wxFontEncoding encoding = wxFONTENCODING_DEFAULT)
		wxFont(const wxSize& pixelSize, wxFontFamily family, int style, wxFontWeight weight,const bool underline = false, const wxString& faceName = "",wxFontEncoding encoding = wxFONTENCODING_DEFAULT)
		~wxFont()
		bool IsFixedWidth() const
		static wxFontEncoding GetDefaultEncoding()
		wxString GetFaceName() const
		wxFontFamily GetFamily() const
		wxString GetNativeFontInfoDesc() const
		wxString GetNativeFontInfoUserDesc()
		int GetPointSize() const
		int GetStyle() const
		bool GetUnderlined() const
		wxFontWeight GetWeight() const
		static wxFont * New(int pointSize, wxFontFamily family, int style, wxFontWeight weight,const bool underline = false, const wxString& faceName = "",wxFontEncoding encoding = wxFONTENCODING_DEFAULT)
		static wxFont * New(int pointSize, wxFontFamily family,int flags = wxFONTFLAG_DEFAULT, const wxString& faceName = "",wxFontEncoding encoding = wxFONTENCODING_DEFAULT)
		static wxFont * New(const wxSize& pixelSize, wxFontFamily family, int style, wxFontWeight weight,const bool underline = false, const wxString& faceName = "",wxFontEncoding encoding = wxFONTENCODING_DEFAULT)
		static wxFont * New(const wxSize& pixelSize, wxFontFamily family,int flags = wxFONTFLAG_DEFAULT, const wxString& faceName = "",wxFontEncoding encoding = wxFONTENCODING_DEFAULT)
		bool IsOk() const
		static void SetDefaultEncoding(wxFontEncoding encoding)
		bool SetFaceName(const wxString& faceName)
		void SetFamily(wxFontFamily family)
		bool SetNativeFontInfo(const wxString& info)
		bool SetNativeFontInfoUserDesc(const wxString& info)
		void SetPointSize(int pointSize)
		void SetStyle(int style)
		void SetUnderlined(const bool underlined)
		void SetWeight(wxFontWeight weight)
		wxFont& operator =(const wxFont& font)
		bool operator ==(const wxFont& font)
		bool operator !=(const wxFont& font)
<wx/cmndata.h>
	class wxFontData public wxObject
		wxFontData()
		void EnableEffects(bool enable)
		bool GetAllowSymbols()
		wxColour& GetColour()
		wxFont GetChosenFont()
		bool GetEnableEffects()
		wxFont GetInitialFont()
		bool GetShowHelp()
		void SetAllowSymbols(bool allowSymbols)
		void SetChosenFont(const wxFont& font)
		void SetColour(const wxColour& colour)
		void SetInitialFont(const wxFont&font)
		void SetRange(int min, int max)
		void SetShowHelp(bool showHelp)
		void operator =(const wxFontData& data)
<wx/fontdlg.h>
	class wxFontDialog public wxDialog public wxWindow public wxEvtHandler public wxObject
		wxFontDialog()
		wxFontDialog(wxWindow* parent)
		wxFontDialog(wxWindow* parent, const wxFontData& data)
		bool Create(wxWindow* parent)
		bool Create(wxWindow* parent, const wxFontData& data)
		const wxFontData& GetFontData() const
		wxFontData& GetFontData()
		int ShowModal()
<wx/fontenum.h>
	class wxFontEnumerator
		virtual bool EnumerateEncodings(const wxString& font = "")
		static wxArrayString GetEncodings(const wxString& facename = "")
		static wxArrayString GetFacenames(wxFontEncoding encoding = wxFONTENCODING_SYSTEM, bool fixedWidthOnly = false)
		static bool IsValidFacename(const wxString & facename)
		virtual bool OnFacename(const wxString& font)
		virtual bool OnFontEncoding(const wxString& font, const wxString& encoding)
<wx/gdicmn.h>
	class wxFontList public wxList public wxObject
		wxFontList()
		wxFont * FindOrCreateFont(int point_size, int family, int style, int weight, bool underline = false,const wxString& facename = NULL, wxFontEncoding encoding = wxFONTENCODING_DEFAULT)
<wx/fontmap.h>
	class wxFontMapper
		wxFontMapper()
		~wxFontMapper()
		wxFontEncoding CharsetToEncoding(const wxString& charset, bool interactive = true)
		static wxFontMapper * Get()
		static const wxChar** GetAllEncodingNames(wxFontEncoding encoding)
		bool GetAltForEncoding(wxFontEncoding encoding, wxNativeEncodingInfo* info, const wxString& facename = wxEmptyString, bool interactive = true)
		bool GetAltForEncoding(wxFontEncoding encoding, wxFontEncoding* alt_encoding, const wxString& facename = wxEmptyString, bool interactive = true)
		static wxFontEncoding GetEncoding(size_t n)
		static wxString GetEncodingDescription(wxFontEncoding encoding)
		static wxFontEncoding GetEncodingFromName(const wxString& encoding)
		static wxString GetEncodingName(wxFontEncoding encoding)
		static size_t GetSupportedEncodingsCount()
		bool IsEncodingAvailable(wxFontEncoding encoding, const wxString& facename = wxEmptyString)
		void SetDialogParent(wxWindow* parent)
		void SetDialogTitle(const wxString& title)
		static wxFontMapper * Set(wxFontMapper *mapper)
		void SetConfig(wxConfigBase* config)
		void SetConfigPath(const wxString& prefix)
<wx/fontpicker.h>
	wxFNTP_DEFAULT_STYLE
	wxFNTP_USE_TEXTCTRL
	wxFNTP_FONTDESC_AS_LABEL
	wxFNTP_USEFONT_FOR_LABEL
	EVT_FONTPICKER_CHANGED(id, func)
	class wxFontPickerCtrl public wxPickerBase public wxControl public wxWindow public wxEvtHandler public wxObject
		wxFontPickerCtrl(wxWindow *parent,wxWindowID id,const wxFont& font = wxNullFont,const wxPoint& pos = wxDefaultPosition,const wxSize& size = wxDefaultSize,long style = wxFNTP_DEFAULT_STYLE,const wxValidator& validator = wxDefaultValidator,const wxString& name = "fontpickerctrl")
		bool Create(wxWindow *parent,wxWindowID id,const wxFont& font = wxNullFont,const wxPoint& pos = wxDefaultPosition,const wxSize& size = wxDefaultSize,long style = wxFNTP_DEFAULT_STYLE,const wxValidator& validator = wxDefaultValidator,const wxString& name = "fontpickerctrl")
		wxFont GetSelectedFont() const
		void SetSelectedFont(const wxFont &font)
		unsigned int GetMaxPointSize() const
		void GetMaxPointSize(unsigned int max)
<wx/fontpicker.h>
	EVT_FONTPICKER_CHANGED(id, func)
	class wxFontPickerEvent public wxCommandEvent public wxEvent public wxObject
		wxFontPickerEvent(wxObject * generator, int id, const wxFont& font)
		wxFont GetFont() const
		void SetFont(const wxFont & f)
<wx/frame.h>
	wxDEFAULT_FRAME_STYLE
	wxICONIZE
	wxCAPTION
	wxMINIMIZE
	wxMINIMIZE_BOX
	wxMAXIMIZE
	wxMAXIMIZE_BOX
	wxCLOSE_BOX
	wxSTAY_ON_TOP
	wxSYSTEM_MENU
	wxRESIZE_BORDER
	wxFRAME_TOOL_WINDOW
	wxFRAME_NO_TASKBAR
	wxFRAME_FLOAT_ON_PARENT
	wxFRAME_EX_CONTEXTHELP
	wxFRAME_SHAPED
	wxFRAME_EX_METAL
	wxEVT_SIZE
	wxEVT_MENU_HIGHLIGHT
	class wxFrame public wxTopLevelWindow public wxWindow public wxEvtHandler public wxObject
		wxFrame()
		wxFrame(wxWindow* parent, wxWindowID id,const wxString& title, const wxPoint& pos = wxDefaultPosition,const wxSize& size = wxDefaultSize, long style = wxDEFAULT_FRAME_STYLE,const wxString& name = "frame")
		void ~wxFrame()
		void Centre(int direction = wxBOTH)
		bool Create(wxWindow* parent, wxWindowID id,const wxString& title, const wxPoint& pos = wxDefaultPosition,const wxSize& size = wxDefaultSize, long style = wxDEFAULT_FRAME_STYLE,const wxString& name = "frame")
		virtual wxStatusBar* CreateStatusBar(int number = 1,long style = wxST_SIZEGRIP | wxFULL_REPAINT_ON_RESIZE,wxWindowID id = 0, const wxString& name = "statusBar")
		virtual wxToolBar* CreateToolBar(long style = wxNO_BORDER | wxTB_HORIZONTAL,wxWindowID id = -1, const wxString& name = "toolBar")
		wxPoint GetClientAreaOrigin() const
		wxMenuBar* GetMenuBar() const
		wxStatusBar* GetStatusBar() const
		int GetStatusBarPane()
		wxToolBar* GetToolBar() const
		virtual wxStatusBar* OnCreateStatusBar(int number,long style,wxWindowID id, const wxString& name)
		virtual wxToolBar* OnCreateToolBar(long style,wxWindowID id, const wxString& name)
		void ProcessCommand(int id)
		void SendSizeEvent()
		void SetMenuBar(wxMenuBar* menuBar)
		void SetStatusBar(wxStatusBar* statusBar)
		void SetStatusBarPane(int n)
		virtual void SetStatusText(const wxString& text, int number = 0)
		virtual void SetStatusWidths(int n, int *widths)
		void SetToolBar(wxToolBar* toolBar)
<wx/filesys.h>
	class wxFSFile public wxObject
		wxFSFile(wxInputStream *stream, const wxString& loc, const wxString& mimetype, const wxString& anchor, wxDateTime modif)
		void DetachStream()
		const wxString& GetAnchor() const
		const wxString& GetLocation() const
		const wxString& GetMimeType() const
		wxDateTime GetModificationTime() const
		wxInputStream* GetStream() const
<wx/protocol/ftp.h>
	class wxFTP public wxProtocol
		wxFTP()
		~wxFTP()
		bool Abort()
		bool CheckCommand(const wxString& command, char ret)
		char SendCommand(const wxString& command)
		const wxString& GetLastResult()
		bool ChDir(const wxString& dir)
		bool MkDir(const wxString& dir)
		bool RmDir(const wxString& dir)
		wxString Pwd()
		bool Rename(const wxString& src, const wxString& dst)
		bool RmFile(const wxString& path)
		bool SetAscii()
		bool SetBinary()
		void SetPassive(bool pasv)
		bool SetTransferMode(TransferMode mode)
		void SetUser(const wxString& user)
		void SetPassword(const wxString& passwd)
		bool FileExists(const wxString& filename)
		int GetFileSize(const wxString& filename)
		bool GetDirList(wxArrayString& files, const wxString& wildcard = "")
		bool GetFilesList(wxArrayString& files, const wxString& wildcard = "")
		wxOutputStream * GetOutputStream(const wxString& file)
		wxInputStream * GetInputStream(const wxString& path)
<wx/gauge.h>
	wxGA_HORIZONTAL
	wxGA_VERTICAL
	wxGA_SMOOTH
	class wxGauge public wxControl public wxWindow public wxEvtHandler public wxObject
		wxGauge()
		wxGauge(wxWindow* parent, wxWindowID id,int range, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize,long style = wxGA_HORIZONTAL, const wxValidator& validator = wxDefaultValidator, const wxString& name = "gauge")
		~wxGauge()
		bool Create(wxWindow* parent, wxWindowID id,int range, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize,long style = wxGA_HORIZONTAL, const wxValidator& validator = wxDefaultValidator, const wxString& name = "gauge")
		int GetBezelFace() const
		int GetRange() const
		int GetShadowWidth() const
		int GetValue() const
		bool IsVertical() const
		void SetBezelFace(int width)
		void SetRange(int range)
		void SetShadowWidth(int width)
		void SetValue(int pos)
		void Pulse()
<wx/gbsizer.h>
	class wxGBPosition
		wxGBPosition()
		wxGBPosition(int row, int col)
		int GetCol() const
		int GetRow() const
		void SetCol(int col)
		void SetRow(int row)
		bool operator!(const wxGBPosition& p) const
		bool operator operator==(const wxGBPosition& p) const
<wx/gbsizer.h>
	class wxGBSizerItem public wxSizerItem
		wxGBSizerItem(int width, int height, const wxGBPosition& pos, const wxGBSpan& span, int flag, int border, wxObject* userData)
		wxGBSizerItem(wxWindow* window, const wxGBPosition& pos, const wxGBSpan& span, int flag, int border, wxObject* userData)
		wxGBSizerItem(wxSizer* sizer, const wxGBPosition& pos, const wxGBSpan& span, int flag, int border, wxObject* userData)
		void GetEndPos(int&amp; row, int&amp; col)
		wxGBPosition GetPos() const
		void GetPos(int&amp; row, int&amp; col) const
		wxGBSpan GetSpan() const
		void GetSpan(int&amp; rowspan, int&amp; colspan) const
		bool Intersects(const wxGBSizerItem& other)
		bool Intersects(const wxGBPosition& pos, const wxGBSpan& span)
		bool SetPos(const wxGBPosition& pos)
		bool SetSpan(const wxGBSpan& span)
<wx/gbsizer.h>
	class wxGBSpan
		wxGBSpan()
		wxGBSpan(int rowspan, int colspan)
		int GetColspan() const
		int GetRowspan() const
		void SetColspan(int colspan)
		void SetRowspan(int rowspan)
		bool operator!(const wxGBSpan& o) const
		bool operator operator==(const wxGBSpan& o) const
<wx/gdiobj.h>
	class wxGDIObject public wxObject
		wxGDIObject()
<wx/dirctrl.h>
	wxDIRCTRL_DIR_ONLY
	wxDIRCTRL_3D_INTERNAL
	wxDIRCTRL_SELECT_FIRST
	wxDIRCTRL_SHOW_FILTERS
	wxDIRCTRL_EDIT_LABELS
	class wxGenericDirCtrl public wxControl public wxWindow public wxEvtHandler public wxObject
		wxGenericDirCtrl()
		wxGenericDirCtrl(wxWindow* parent, const wxWindowID id = -1,const wxString& dir = wxDirDialogDefaultFolderStr, const wxPoint& pos = wxDefaultPosition,const wxSize& size = wxDefaultSize, long style = wxDIRCTRL_3D_INTERNAL|wxSUNKEN_BORDER,const wxString& filter = wxEmptyString,int defaultFilter = 0,const wxString& name = wxTreeCtrlNameStr)
		~wxGenericDirCtrl()
		bool Create(wxWindow* parent, const wxWindowID id = -1, const wxString& dir = wxDirDialogDefaultFolderStr, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxDIRCTRL_3D_INTERNAL|wxSUNKEN_BORDER, const wxString& filter = wxEmptyString, int defaultFilter = 0, const wxString& name = wxTreeCtrlNameStr)
		void Init()
		void CollapseTree()
		bool ExpandPath(const wxString& path)
		bool CollapsePath(const wxString& path)
		wxString GetDefaultPath() const
		wxString GetPath() const
		wxString GetFilePath() const
		wxString GetFilter() const
		int GetFilterIndex() const
		wxDirFilterListCtrl* GetFilterListCtrl() const
		wxTreeItemId GetRootId()
		wxTreeCtrl* GetTreeCtrl() const
		void ReCreateTree()
		void SetDefaultPath(const wxString& path)
		void SetFilter(const wxString& filter)
		void SetFilterIndex(int n)
		void SetPath(const wxString& path)
		void ShowHidden(bool show)
<wx/valgen.h>
	class wxGenericValidator public wxValidator public wxEvtHandler public wxObject
		wxGenericValidator(const wxGenericValidator& validator)
		wxGenericValidator(bool* valPtr)
		wxGenericValidator(wxString* valPtr)
		wxGenericValidator(int* valPtr)
		wxGenericValidator(wxArrayInt* valPtr)
		~wxGenericValidator()
		virtual wxValidator* Clone() const
		virtual bool TransferFromWindow()
		virtual bool TransferToWindow()
<wx/glcanvas.h>
	WX_GL_RGBA
	WX_GL_BUFFER_SIZE
	WX_GL_LEVEL
	WX_GL_DOUBLEBUFFER
	WX_GL_STEREO
	WX_GL_AUX_BUFFERS
	WX_GL_MIN_RED
	WX_GL_MIN_GREEN
	WX_GL_MIN_BLUE
	WX_GL_MIN_ALPHA
	WX_GL_DEPTH_SIZE
	WX_GL_STENCIL_SIZE
	WX_GL_MIN_ACCUM_RED
	WX_GL_MIN_ACCUM_GREEN
	WX_GL_MIN_ACCUM_BLUE
	WX_GL_MIN_ACCUM_ALPHA
	class wxGLCanvas public wxWindow public wxEvtHandler public wxObject
		void wxGLCanvas(wxWindow* parent, wxWindowID id = -1,const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize,long style=0, const wxString& name="GLCanvas",int* attribList = 0, const wxPalette& palette = wxNullPalette)
		void wxGLCanvas(wxWindow* parent, wxGLContext* sharedContext, wxWindowID id = -1,const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize,long style=0, const wxString& name="GLCanvas",int* attribList = 0, const wxPalette& palette = wxNullPalette)
		void wxGLCanvas(wxWindow* parent, wxGLCanvas* sharedCanvas, wxWindowID id = -1,const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize,long style=0, const wxString& name="GLCanvas",int* attribList = 0, const wxPalette& palette = wxNullPalette)
		void wxGLCanvas(wxWindow* parent, wxWindowID id = wxID_ANY,int* attribList = 0,const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize,long style=0, const wxString& name="GLCanvas",const wxPalette& palette = wxNullPalette)
		wxGLContext* GetContext()
		void SetCurrent()
		void SetColour(const char* colour)
		void SwapBuffers()
<wx/glcanvas.h>
	class wxGLContext public wxObject
		void SetCurrent(const wxGLCanvas& win)
<wx/graphics.h>
	class wxGraphicsBrush public wxGraphicsObject
<wx/graphics.h>
	class wxGraphicsContext public wxGraphicsObject
		wxGraphicsContext* Create(const wxWindowDC& dc)
		wxGraphicsContext* Create(wxWindow* window)
		wxGraphicsContext* CreateFromNative(void * context)
		wxGraphicsContext* CreateFromNativeWindow(void * window)
		wxGraphicsPen CreatePen(const wxPen& pen) const
		wxGraphicsBrush CreateBrush(const wxBrush& brush) const
		wxGraphicsBrush CreateRadialGradientBrush(wxDouble xo, wxDouble yo, wxDouble xc, wxDouble yc, wxDouble radius, const wxColour& oColor, const wxColour& cColor) const
		wxGraphicsBrush CreateLinearGradientBrush(wxDouble x1, wxDouble y1, wxDouble x2, wxDouble y2, const wxColour&amp;c1, const wxColour&amp;c2) const
		wxGraphicsFont CreateFont(const wxFont& font, const wxColour& col = *wxBLACK) const
		wxGraphicsMatrix CreateMatrix(wxDouble a = 1.0, wxDouble b = 0.0, wxDouble c = 0.0, wxDouble d = 1.0, wxDouble tx = 0.0, wxDouble ty = 0.0) const
		wxGraphicsPath CreatePath() const
		void Clip(const wxRegion& region)
		void Clip(wxDouble x, wxDouble y, wxDouble w, wxDouble h)
		void ResetClip()
		void DrawBitmap(const wxBitmap& bmp, wxDouble x, wxDouble y, wxDouble w, wxDouble h)
		void DrawEllipse(wxDouble x, wxDouble y, wxDouble w, wxDouble h)
		void DrawIcon(const wxIcon& icon, wxDouble x, wxDouble y, wxDouble w, wxDouble h)
		void DrawLines(size_t n, const wxPoint2DDouble* points, int fillStyle = wxODDEVEN_RULE)
		void DrawPath(const wxGraphicsPath& path, int fillStyle = wxODDEVEN_RULE)
		void DrawRectangle(wxDouble x, wxDouble y, wxDouble w, wxDouble h)
		void DrawRoundedRectangle(wxDouble x, wxDouble y, wxDouble w, wxDouble h, wxDouble radius)
		void DrawText(const wxString& str, wxDouble x, wxDouble y, wxDouble angle)
		void DrawText(const wxString& str, wxDouble x, wxDouble y)
		void FillPath(const wxGraphicsPath& path, int fillStyle = wxODDEVEN_RULE)
		void StrokePath(const wxGraphicsPath& path)
		void * GetNativeContext()
		void GetPartialTextExtents(const wxString& text, wxArrayDouble&amp; widths) const
		void GetTextExtent(const wxString& text, wxDouble* width, wxDouble* height, wxDouble* descent, wxDouble* externalLeading) const
		void Rotate(wxDouble angle)
		void Scale(wxDouble xScale, wxDouble yScale)
		void Translate(wxDouble dx, wxDouble dy)
		wxGraphicsMatrix GetTransform() const
		void SetTransform(const wxGraphicsMatrix& matrix)
		void ConcatTransform(const wxGraphicsMatrix& matrix)
		void SetBrush(const wxBrush& brush)
		void SetBrush(const wxGraphicsBrush& brush)
		void SetFont(const wxFont& font, const wxColour& colour)
		void SetFont(const wxGraphicsFont& font)
		void SetPen(const wxGraphicsPen& pen)
		void SetPen(const wxPen& pen)
		void StrokeLine(wxDouble x1, wxDouble y1, wxDouble x2, wxDouble y2)
		void StrokeLines(size_t n, const wxPoint2DDouble* beginPoints, const wxPoint2DDouble* endPoints)
		void StrokeLines(size_t n, const wxPoint2DDouble* points)
<wx/graphics.h>
	class wxGraphicsFont public wxGraphicsObject
<wx/graphics.h>
	class wxGraphicsMatrix public wxGraphicsObject
		void Concat(const wxGraphicsMatrix* t)
		void Concat(const wxGraphicsMatrix& t)
		void Get(wxDouble* a=NULL, wxDouble* b=NULL, wxDouble* c=NULL, wxDouble* d=NULL, wxDouble* tx=NULL, wxDouble* ty=NULL) const
		void * GetNativeMatrix() const
		void Invert()
		bool IsEqual(const wxGraphicsMatrix& t) const
		bool IsIdentity() const
		void Rotate(wxDouble angle)
		void Scale(wxDouble xScale, wxDouble yScale)
		void Translate(wxDouble dx, wxDouble dy)
		void Set(wxDouble a = 1.0, wxDouble b = 0.0, wxDouble c = 0.0, wxDouble d = 1.0, wxDouble tx = 0.0, wxDouble ty = 0.0)
		void TransformPoint(wxDouble* x, wxDouble* y) const
		void TransformDistance(wxDouble* dx, wxDouble* dy) const
<wx/graphics.h>
	class wxGraphicsObject public wxObject
		wxGraphicsRenderer* GetRenderer() const
		bool IsNull() const
<wx/graphics.h>
	class wxGraphicsPath public wxGraphicsObject
		void MoveToPoint(wxDouble x, wxDouble y)
		void MoveToPoint(const wxPoint2DDouble&amp; p)
		void AddArc(wxDouble x, wxDouble y, wxDouble r, wxDouble startAngle, wxDouble endAngle,bool clockwise)
		void AddArc(const wxPoint2DDouble&amp; c, wxDouble r, wxDouble startAngle, wxDouble endAngle, bool clockwise)
		void AddArcToPoint(wxDouble x1, wxDouble y1, wxDouble x2, wxDouble y2, wxDouble r)
		void AddCircle(wxDouble x, wxDouble y, wxDouble r)
		void AddCurveToPoint(wxDouble cx1, wxDouble cy1, wxDouble cx2, wxDouble cy2, wxDouble x, wxDouble y)
		void AddCurveToPoint(const wxPoint2DDouble&amp; c1, const wxPoint2DDouble&amp; c2, const wxPoint2DDouble&amp; e)
		void AddEllipse(wxDouble x, wxDouble y, wxDouble w, wxDouble h)
		void AddLineToPoint(wxDouble x, wxDouble y)
		void AddLineToPoint(const wxPoint2DDouble&amp; p)
		void AddPath(const wxGraphicsPath& path)
		void AddQuadCurveToPoint(wxDouble cx, wxDouble cy, wxDouble x, wxDouble y)
		void AddRectangle(wxDouble x, wxDouble y, wxDouble w, wxDouble h)
		void AddRoundedRectangle(wxDouble x, wxDouble y, wxDouble w, wxDouble h, wxDouble radius)
		void CloseSubpath()
		bool Contains(const wxPoint2DDouble&amp; c, int fillStyle = wxODDEVEN_RULE) const
		bool Contains(wxDouble x, wxDouble y, int fillStyle = wxODDEVEN_RULE) const
		wxRect2DDouble GetBox() const
		void GetBox(wxDouble* x, wxDouble* y, wxDouble* w, wxDouble* h) const
		void GetCurrentPoint(wxDouble* x, wxDouble* y) const
		wxPoint2DDouble GetCurrentPoint() const
		void Transform(const wxGraphicsMatrix& matrix)
		void * GetNativePath() const
		void UnGetNativePath(void* p) const
<wx/graphics.h>
	class wxGraphicsPen public wxGraphicsObject
<wx/graphics.h>
	class wxGraphicsRenderer public wxObject
		wxGraphicsRenderer* GetDefaultRenderer()
		wxGraphicsContext * CreateContext(const wxWindowDC& dc)
		wxGraphicsContext * CreateContext(wxWindow* window)
		wxGraphicsContext * CreateContextFromNativeContext(void * context)
		wxGraphicsContext * CreateContextFromNativeWindow(void * window)
		wxGraphicsPen CreatePen(const wxPen& pen)
		wxGraphicsBrush CreateBrush(const wxBrush& brush)
		wxGraphicsBrush CreateLinearGradientBrush(wxDouble x1, wxDouble y1, wxDouble x2, wxDouble y2, const wxColour&amp;c1, const wxColour&amp;c2)
		wxGraphicsBrush CreateRadialGradientBrush(wxDouble xo, wxDouble yo, wxDouble xc, wxDouble yc, wxDouble radius, const wxColour& oColour, const wxColour& cColour)
		wxGraphicsFont CreateFont(const wxFont& font, const wxColour& col = *wxBLACK)
		wxGraphicsMatrix CreateMatrix(wxDouble a = 1.0, wxDouble b = 0.0, wxDouble c = 0.0, wxDouble d = 1.0, wxDouble tx = 0.0, wxDouble ty = 0.0)
		wxGraphicsPath CreatePath()
<wx/grid.h>
	EVT_GRID_CELL_LEFT_CLICK(func)
	EVT_GRID_CELL_RIGHT_CLICK(func)
	EVT_GRID_CELL_LEFT_DCLICK(func)
	EVT_GRID_CELL_RIGHT_DCLICK(func)
	EVT_GRID_LABEL_LEFT_CLICK(func)
	EVT_GRID_LABEL_RIGHT_CLICK(func)
	EVT_GRID_LABEL_LEFT_DCLICK(func)
	EVT_GRID_LABEL_RIGHT_DCLICK(func)
	EVT_GRID_CELL_CHANGE(func)
	EVT_GRID_SELECT_CELL(func)
	EVT_GRID_EDITOR_HIDDEN(func)
	EVT_GRID_EDITOR_SHOWN(func)
	EVT_GRID_CMD_CELL_LEFT_CLICK(id, func)
	EVT_GRID_CMD_CELL_RIGHT_CLICK(id, func)
	EVT_GRID_CMD_CELL_LEFT_DCLICK(id, func)
	EVT_GRID_CMD_CELL_RIGHT_DCLICK(id, func)
	EVT_GRID_CMD_LABEL_LEFT_CLICK(id, func)
	EVT_GRID_CMD_LABEL_RIGHT_CLICK(id, func)
	EVT_GRID_CMD_LABEL_LEFT_DCLICK(id, func)
	EVT_GRID_CMD_LABEL_RIGHT_DCLICK(id, func)
	EVT_GRID_CMD_CELL_CHANGE(id, func)
	EVT_GRID_CMD_SELECT_CELL(id, func)
	EVT_GRID_CMD_EDITOR_HIDDEN(id, func)
	EVT_GRID_CMD_EDITOR_SHOWN(id, func)
	EVT_GRID_COL_SIZE(func)
	EVT_GRID_ROW_SIZE(func)
	EVT_GRID_CMD_COL_SIZE(func)
	EVT_GRID_CMD_ROW_SIZE(func)
	EVT_GRID_RANGE_SELECT(func)
	EVT_GRID_CMD_RANGE_SELECT(id, func)
	EVT_GRID_EDITOR_CREATED(func)
	EVT_GRID_CMD_EDITOR_CREATED(id, func)
	class wxGrid public wxScrolledWindow public wxWindow public wxEvtHandler public wxObject
		wxGrid()
		wxGrid(wxWindow* parent, wxWindowID id, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxWANTS_CHARS, const wxString& name = wxPanelNameStr)
		~wxGrid()
		bool AppendCols(int numCols = 1, bool updateLabels = true)
		bool AppendRows(int numRows = 1, bool updateLabels = true)
		void AutoSize()
		void AutoSizeColumn(int col, bool setAsMin = true)
		void AutoSizeColumns(bool setAsMin = true)
		void AutoSizeRow(int row, bool setAsMin = true)
		void AutoSizeRows(bool setAsMin = true)
		void BeginBatch()
		wxRect BlockToDeviceRect(const wxGridCellCoords &amp; topLeft, const wxGridCellCoords &amp; bottomRight)
		bool CanDragColMove()
		bool CanDragColSize()
		bool CanDragRowSize()
		bool CanDragGridSize()
		bool CanEnableCellControl() const
		bool CanHaveAttributes()
		wxRect CellToRect(int row, int col)
		wxRect CellToRect(const wxGridCellCoords&amp; coords)
		void ClearGrid()
		void ClearSelection()
		bool CreateGrid(int numRows, int numCols, wxGrid::wxGridSelectionModes selmode = wxGrid::wxGridSelectCells)
		bool DeleteCols(int pos = 0, int numCols = 1, bool updateLabels = true)
		bool DeleteRows(int pos = 0, int numRows = 1, bool updateLabels = true)
		void DisableCellEditControl()
		void DisableDragColMove()
		void DisableDragColSize()
		void DisableDragGridSize()
		void DisableDragRowSize()
		void EnableCellEditControl(bool enable = true)
		void EnableDragColSize(bool enable = true)
		void EnableDragColMove(bool enable = true)
		void EnableDragGridSize(bool enable = true)
		void EnableDragRowSize(bool enable = true)
		void EnableEditing(bool edit)
		void EnableGridLines(bool enable = true)
		void EndBatch()
		void Fit()
		void ForceRefresh()
		int GetBatchCount()
		void GetCellAlignment(int row, int col, int* horiz, int* vert)
		wxColour GetCellBackgroundColour(int row, int col)
		wxGridCellEditor* GetCellEditor(int row, int col)
		wxFont GetCellFont(int row, int col)
		wxGridCellRenderer* GetCellRenderer(int row, int col)
		wxColour GetCellTextColour(int row, int col)
		wxString GetCellValue(int row, int col)
		wxString GetCellValue(const wxGridCellCoords&amp;coords)
		int GetColAt(int colPos) const
		int GetColLeft(int col) const
		void GetColLabelAlignment(int* horiz, int* vert)
		int GetColLabelSize()
		wxString GetColLabelValue(int col)
		int GetColMinimalAcceptableWidth()
		int GetColMinimalWidth(int col) const
		int GetColPos(int colID) const
		int GetColRight(int col) const
		int GetColSize(int col)
		void GetDefaultCellAlignment(int* horiz, int* vert)
		wxColour GetDefaultCellBackgroundColour()
		wxFont GetDefaultCellFont()
		wxColour GetDefaultCellTextColour()
		int GetDefaultColLabelSize()
		int GetDefaultColSize()
		wxGridCellEditor* GetDefaultEditor() const
		wxGridCellEditor* GetDefaultEditorForCell(int row, int col) const
		wxGridCellEditor* GetDefaultEditorForCell(const wxGridCellCoords&amp; c) const
		wxGridCellEditor* GetDefaultEditorForType(const wxString& typeName) const
		wxGridCellRenderer* GetDefaultRenderer() const
		wxGridCellRenderer* GetDefaultRendererForCell(int row, int col) const
		wxGridCellRenderer* GetDefaultRendererForType(const wxString& typeName) const
		int GetDefaultRowLabelSize()
		int GetDefaultRowSize()
		int GetGridCursorCol()
		int GetGridCursorRow()
		wxColour GetGridLineColour()
		wxPen GetDefaultGridLinePen()
		wxPen GetRowGridLinePen(int row)
		wxPen GetColGridLinePen(int col)
		bool GridLinesEnabled()
		wxColour GetLabelBackgroundColour()
		wxFont GetLabelFont()
		wxColour GetLabelTextColour()
		int GetNumberCols()
		int GetNumberRows()
		wxGridCellAttr* GetOrCreateCellAttr(int row, int col) const
		int GetRowMinimalAcceptableHeight()
		int GetRowMinimalHeight(int col) const
		void GetRowLabelAlignment(int* horiz, int* vert)
		int GetRowLabelSize()
		wxString GetRowLabelValue(int row)
		int GetRowSize(int row)
		int GetScrollLineX() const
		int GetScrollLineY() const
		wxGrid::wxGridSelectionModes GetSelectionMode() const
		wxGridCellCoordsArray GetSelectedCells() const
		wxArrayInt GetSelectedCols() const
		wxArrayInt GetSelectedRows() const
		wxColour GetSelectionBackground() const
		wxGridCellCoordsArray GetSelectionBlockTopLeft() const
		wxGridCellCoordsArray GetSelectionBlockBottomRight() const
		wxColour GetSelectionForeground() const
		wxGridTableBase * GetTable() const
		int GetViewWidth()
		void HideCellEditControl()
		void InitColWidths()
		void InitRowHeights()
		bool InsertCols(int pos = 0, int numCols = 1, bool updateLabels = true)
		bool InsertRows(int pos = 0, int numRows = 1, bool updateLabels = true)
		bool IsCellEditControlEnabled() const
		bool IsCurrentCellReadOnly() const
		bool IsEditable()
		bool IsInSelection(int row, int col) const
		bool IsInSelection(const wxGridCellCoords&amp; coords) const
		bool IsReadOnly(int row, int col) const
		bool IsSelection()
		bool IsVisible(int row, int col, bool wholeCellVisible = true)
		bool IsVisible(const wxGridCellCoords&amp; coords, bool wholeCellVisible = true)
		void MakeCellVisible(int row, int col)
		void MakeCellVisible(const wxGridCellCoords&amp; coords)
		bool MoveCursorDown(bool expandSelection)
		bool MoveCursorLeft(bool expandSelection)
		bool MoveCursorRight(bool expandSelection)
		bool MoveCursorUp(bool expandSelection)
		bool MoveCursorDownBlock(bool expandSelection)
		bool MoveCursorLeftBlock(bool expandSelection)
		bool MoveCursorRightBlock(bool expandSelection)
		bool MoveCursorUpBlock(bool expandSelection)
		bool MovePageDown()
		bool MovePageUp()
		void RegisterDataType(const wxString& typeName, wxGridCellRenderer* renderer, wxGridCellEditor* editor)
		void SaveEditControlValue()
		void SelectAll()
		void SelectBlock(int topRow, int leftCol,int bottomRow, int rightCol, bool addToSelected = false)
		void SelectBlock(const wxGridCellCoords&amp; topLeft,const wxGridCellCoords&amp; bottomRight, bool addToSelected = false)
		void SelectCol(int col, bool addToSelected = false)
		wxRect SelectionToDeviceRect()
		void SelectRow(int row, bool addToSelected = false)
		void SetCellAlignment(int row, int col, int horiz, int vert)
		void SetCellAlignment(int align, int row, int col)
		void SetCellBackgroundColour(int row, int col, const wxColour& colour)
		void SetCellEditor(int row, int col, wxGridCellEditor* editor)
		void SetCellFont(int row, int col, const wxFont& font)
		void SetCellRenderer(int row, int col, wxGridCellRenderer* renderer)
		void SetCellTextColour(int row, int col, const wxColour& colour)
		void SetCellTextColour(const wxColour& val, int row, int col)
		void SetCellTextColour(const wxColour& colour)
		void SetCellValue(int row, int col, const wxString& s)
		void SetCellValue(const wxGridCellCoords&amp; coords, const wxString& s)
		void SetCellValue(const wxString& val, int row, int col)
		void SetColAttr(int col, wxGridCellAttr* attr)
		void SetColFormatBool(int col)
		void SetColFormatNumber(int col)
		void SetColFormatFloat(int col, int width = -1, int precision = -1)
		void SetColFormatCustom(int col, const wxString& typeName)
		void SetColLabelAlignment(int horiz, int vert)
		void SetColLabelSize(int height)
		void SetColLabelValue(int col, const wxString& value)
		void SetColMinimalWidth(int col, int width)
		void SetColMinimalAcceptableWidth(int width)
		void SetColPos(int colID, int newPos)
		void SetColSize(int col, int width)
		void SetDefaultCellAlignment(int horiz, int vert)
		void SetDefaultCellBackgroundColour(const wxColour& colour)
		void SetDefaultCellFont(const wxFont& font)
		void SetDefaultCellTextColour(const wxColour& colour)
		void SetDefaultEditor(wxGridCellEditor* editor)
		void SetDefaultRenderer(wxGridCellRenderer* renderer)
		void SetDefaultColSize(int width, bool resizeExistingCols = false)
		void SetDefaultRowSize(int height, bool resizeExistingRows = false)
		void SetGridCursor(int row, int col)
		void SetGridLineColour(const wxColour&colour)
		void SetLabelBackgroundColour(const wxColour& colour)
		void SetLabelFont(const wxFont& font)
		void SetLabelTextColour(const wxColour& colour)
		void SetMargins(int extraWidth, int extraHeight)
		int SetOrCalcColumnSizes(bool calcOnly, bool setAsMin = true)
		int SetOrCalcRowSizes(bool calcOnly, bool setAsMin = true)
		void SetReadOnly(int row, int col, bool isReadOnly = true)
		void SetRowAttr(int row, wxGridCellAttr* attr)
		void SetRowLabelAlignment(int horiz, int vert)
		void SetRowLabelSize(int width)
		void SetRowLabelValue(int row, const wxString& value)
		void SetRowMinimalHeight(int row, int height)
		void SetRowMinimalAcceptableHeight(int height)
		void SetRowSize(int row, int height)
		void SetScrollLineX(int x)
		void SetScrollLineY(int y)
		void SetSelectionBackground(const wxColour& c)
		void SetSelectionForeground(const wxColour& c)
		void SetSelectionMode(wxGrid::wxGridSelectionModes selmode)
		bool SetTable(wxGridTableBase* table, bool takeOwnership = false, wxGrid::wxGridSelectionModes selmode = wxGrid::wxGridSelectCells)
		void ShowCellEditControl()
		int XToCol(int x, bool clipToMinMax = false)
		int XToEdgeOfCol(int x)
		int YToEdgeOfRow(int y)
		int YToRow(int y)
<wx/grid.h>
	class wxGridCellAttr
		wxGridCellAttr()
		wxGridCellAttr(const wxColour& colText, const wxColour& colBack, const wxFont& font, int hAlign, int vAlign)
		wxGridCellAttr* Clone() const
		void IncRef()
		void DecRef()
		void SetTextColour(const wxColour& colText)
		void SetBackgroundColour(const wxColour& colBack)
		void SetFont(const wxFont& font)
		void SetAlignment(int hAlign, int vAlign)
		void SetReadOnly(bool isReadOnly = true)
		void SetRenderer(wxGridCellRenderer* renderer)
		void SetEditor(wxGridCellEditor* editor)
		bool HasTextColour() const
		bool HasBackgroundColour() const
		bool HasFont() const
		bool HasAlignment() const
		bool HasRenderer() const
		bool HasEditor() const
		const wxColour& GetTextColour() const
		const wxColour& GetBackgroundColour() const
		const wxFont& GetFont() const
		void GetAlignment(int* hAlign, int* vAlign) const
		wxGridCellRenderer* GetRenderer(wxGrid* grid, int row, int col) const
		wxGridCellEditor* GetEditor(wxGrid* grid, int row, int col) const
		bool IsReadOnly() const
		void SetDefAttr(wxGridCellAttr* defAttr)
<wx/gbsizer.h>
	class wxGridBagSizer public wxFlexGridSizer public wxGridSizer public wxSizer public wxObject
		wxGridBagSizer(int vgap = 0, int hgap = 0)
		wxSizerItem* Add(wxWindow* window, const wxGBPosition& pos, const wxGBSpan& span = wxDefaultSpan, int flag = 0, int border = 0, wxObject* userData = NULL)
		wxSizerItem* Add(wxSizer* sizer, const wxGBPosition& pos, const wxGBSpan& span = wxDefaultSpan, int flag = 0, int border = 0, wxObject* userData = NULL)
		wxSizerItem* Add(int width, int height, const wxGBPosition& pos, const wxGBSpan& span = wxDefaultSpan, int flag = 0, int border = 0, wxObject* userData = NULL)
		wxSizerItem* Add(wxGBSizerItem* item)
		wxSize CalcMin()
		bool CheckForIntersection(wxGBSizerItem* item, wxGBSizerItem* excludeItem = NULL)
		bool CheckForIntersection(const wxGBPosition& pos, const wxGBSpan& span, wxGBSizerItem* excludeItem = NULL)
		wxGBSizerItem* FindItem(wxWindow* window)
		wxGBSizerItem* FindItem(wxSizer* sizer)
		wxGBSizerItem* FindItemAtPoint(const wxPoint& pt)
		wxGBSizerItem* FindItemAtPosition(const wxGBPosition& pos)
		wxGBSizerItem* FindItemWithData(const wxObject* userData)
		wxSize GetCellSize(int row, int col) const
		wxSize GetEmptyCellSize() const
		wxGBPosition GetItemPosition(wxWindow* window)
		wxGBPosition GetItemPosition(wxSizer* sizer)
		wxGBPosition GetItemPosition(size_t index)
		wxGBSpan GetItemSpan(wxWindow* window)
		wxGBSpan GetItemSpan(wxSizer* sizer)
		wxGBSpan GetItemSpan(size_t index)
		void RecalcSizes()
		void SetEmptyCellSize(const wxSize& sz)
		bool SetItemPosition(wxWindow* window, const wxGBPosition& pos)
		bool SetItemPosition(wxSizer* sizer, const wxGBPosition& pos)
		bool SetItemPosition(size_t index, const wxGBPosition& pos)
		bool SetItemSpan(wxWindow* window, const wxGBSpan& span)
		bool SetItemSpan(wxSizer* sizer, const wxGBSpan& span)
		bool SetItemSpan(size_t index, const wxGBSpan& span)
<wx/grid.h>
	class wxGridCellBoolEditor public wxGridCellEditor
		wxGridCellBoolEditor()
		static bool IsTrueValue(const wxString& value)
		static void UseStringValues(const wxString& valueTrue = _T("1"), const wxString& valueFalse = _T(""))
	class wxGridCellChoiceEditor public wxGridCellEditor
		wxGridCellChoiceEditor(size_t count = 0, const wxString choices[] = NULL, bool allowOthers = false)
		wxGridCellChoiceEditor(const wxArrayString& choices, bool allowOthers = false)
		void SetParameters(const wxString& params)
<wx/grid.h>
	class wxGridCellEditor
		wxGridCellEditor()
		bool IsCreated()
		void Create(wxWindow* parent, wxWindowID id, wxEvtHandler* evtHandler)
		void SetSize(const wxRect& rect)
		void Show(bool show, wxGridCellAttr* attr = NULL)
		void PaintBackground(const wxRect& rectCell, wxGridCellAttr* attr)
		void BeginEdit(int row, int col, wxGrid* grid)
		bool EndEdit(int row, int col, wxGrid* grid)
		void Reset()
		void StartingKey(wxKeyEvent& event)
		void StartingClick()
		void HandleReturn(wxKeyEvent& event)
		void Destroy()
		wxGridCellEditor* Clone() const
		~wxGridCellEditor()
<wx/grid.h>
	class wxGridCellFloatEditor public wxGridCellTextEditor public wxGridCellEditor
		wxGridCellFloatEditor(int width = -1, int precision = -1)
		void SetParameters(const wxString& params)
<wx/grid.h>
	class wxGridCellNumberEditor public wxGridCellTextEditor public wxGridCellEditor
		wxGridCellNumberEditor(int min = -1, int max = -1)
		wxString GetString() const
		bool HasRange() const
		void SetParameters(const wxString& params)
<wx/grid.h>
	class wxGridCellTextEditor public wxGridCellEditor
		wxGridCellTextEditor()
		void SetParameters(const wxString& params)
	EVT_GRID_EDITOR_CREATED(func)
	EVT_GRID_CMD_EDITOR_CREATED(id, func)
<wx/grid.h>
	class wxGridEditorCreatedEvent public wxCommandEvent public wxEvent public wxObject
		wxGridEditorCreatedEvent()
		wxGridEditorCreatedEvent(int id, wxEventType type,wxObject* obj, int row, int col, wxControl* ctrl)
		int GetCol()
		wxControl* GetControl()
		int GetRow()
		void SetCol(int col)
		void SetControl(wxControl* ctrl)
		void SetRow(int row)
<wx/grid.h>
	EVT_GRID_CELL_LEFT_CLICK(func)
	EVT_GRID_CELL_RIGHT_CLICK(func)
	EVT_GRID_CELL_LEFT_DCLICK(func)
	EVT_GRID_CELL_RIGHT_DCLICK(func)
	EVT_GRID_LABEL_LEFT_CLICK(func)
	EVT_GRID_LABEL_RIGHT_CLICK(func)
	EVT_GRID_LABEL_LEFT_DCLICK(func)
	EVT_GRID_LABEL_RIGHT_DCLICK(func)
	EVT_GRID_CELL_CHANGE(func)
	EVT_GRID_SELECT_CELL(func)
	EVT_GRID_EDITOR_HIDDEN(func)
	EVT_GRID_EDITOR_SHOWN(func)
	EVT_GRID_CMD_CELL_LEFT_CLICK(id, func)
	EVT_GRID_CMD_CELL_RIGHT_CLICK(id, func)
	EVT_GRID_CMD_CELL_LEFT_DCLICK(id, func)
	EVT_GRID_CMD_CELL_RIGHT_DCLICK(id, func)
	EVT_GRID_CMD_LABEL_LEFT_CLICK(id, func)
	EVT_GRID_CMD_LABEL_RIGHT_CLICK(id, func)
	EVT_GRID_CMD_LABEL_LEFT_DCLICK(id, func)
	EVT_GRID_CMD_LABEL_RIGHT_DCLICK(id, func)
	EVT_GRID_CMD_CELL_CHANGE(id, func)
	EVT_GRID_CMD_SELECT_CELL(id, func)
	EVT_GRID_CMD_EDITOR_HIDDEN(id, func)
	EVT_GRID_CMD_EDITOR_SHOWN(id, func)
	class wxGridEvent public wxNotifyEvent public wxCommandEvent public wxEvent public wxObject
		wxGridEvent()
		wxGridEvent(int id, wxEventType type, wxObject* obj,int row = -1, int col = -1, int x = -1, int y = -1,bool sel = true, bool control = false, bool shift = false,bool alt = false, bool meta = false)
		bool AltDown()
		bool ControlDown()
		int GetCol()
		wxPoint GetPosition()
		int GetRow()
		bool MetaDown()
		bool Selecting()
		bool ShiftDown()
	EVT_GRID_RANGE_SELECT(func)
	EVT_GRID_CMD_RANGE_SELECT(func)
<wx/grid.h>
	class wxGridRangeSelectEvent public wxNotifyEvent public wxCommandEvent public wxEvent public wxObject
		wxGridRangeSelectEvent()
		wxGridRangeSelectEvent(int id, wxEventType type,wxObject* obj, const wxGridCellCoords&amp; topLeft,const wxGridCellCoords&amp; bottomRight, bool sel = true,bool control = false, bool shift = false, bool alt = false,bool meta = false)
		bool AltDown()
		bool ControlDown()
		wxGridCellCoords GetBottomRightCoords()
		int GetBottomRow()
		int GetLeftCol()
		int GetRightCol()
		wxGridCellCoords GetTopLeftCoords()
		int GetTopRow()
		bool MetaDown()
		bool Selecting()
		bool ShiftDown()
<wx/grid.h>
	EVT_GRID_COL_SIZE(func)
	EVT_GRID_ROW_SIZE(func)
	EVT_GRID_CMD_COL_SIZE(func)
	EVT_GRID_CMD_ROW_SIZE(func)
	class wxGridSizeEvent public wxNotifyEvent public wxCommandEvent public wxEvent public wxObject
		wxGridSizeEvent()
		wxGridSizeEvent(int id, wxEventType type,wxObject* obj, int rowOrCol = -1, int x = -1,int y = -1, bool control = false, bool shift = false,bool alt = false, bool meta = false)
		bool AltDown()
		bool ControlDown()
		wxPoint GetPosition()
		int GetRowOrCol()
		bool MetaDown()
		bool ShiftDown()
<wx/grid.h>
	class wxGridCellBoolRenderer public wxGridCellRenderer
		wxGridCellBoolRenderer()
<wx/grid.h>
	class wxGridCellFloatRenderer public wxGridCellStringRenderer public wxGridCellRenderer
		wxGridCellFloatRenderer(int width = -1, int precision = -1)
		int GetPrecision() const
		int GetWidth() const
		void SetParameters(const wxString& params)
		void SetPrecision(int precision)
		void SetWidth(int width)
<wx/grid.h>
	class wxGridCellNumberRenderer public wxGridellStringRenderer public wxGridCellRenderer
		wxGridCellNumberRenderer()
<wx/grid.h>
	class wxGridCellRenderer
		void Draw(wxGrid& grid, wxGridCellAttr& attr, wxDC& dc, const wxRect& rect, int row, int col, bool isSelected)
		wxSize GetBestSize(wxGrid& grid, wxGridCellAttr& attr, wxDC& dc, int row, int col)
		wxGridCellRenderer* Clone() const
<wx/grid.h>
	class wxGridCellStringRenderer public wxGridCellRenderer
		wxGridCellStringRenderer()
<wx/grid.h>
	class wxGridTableBase public wxObject
		wxGridTableBase()
		~wxGridTableBase()
		int GetNumberRows()
		int GetNumberCols()
		bool IsEmptyCell(int row, int col)
		wxString GetValue(int row, int col)
		void SetValue(int row, int col, const wxString& value)
		wxString GetTypeName(int row, int col)
		bool CanGetValueAs(int row, int col, const wxString& typeName)
		bool CanSetValueAs(int row, int col, const wxString& typeName)
		long GetValueAsLong(int row, int col)
		double GetValueAsDouble(int row, int col)
		bool GetValueAsBool(int row, int col)
		void SetValueAsLong(int row, int col, long value)
		void SetValueAsDouble(int row, int col, double value)
		void SetValueAsBool(int row, int col, bool value)
		void* GetValueAsCustom(int row, int col, const wxString& typeName)
		void SetValueAsCustom(int row, int col, const wxString& typeName, void* value)
		void SetView(wxGrid* grid)
		wxGrid * GetView() const
		void Clear()
		bool InsertRows(size_t pos = 0, size_t numRows = 1)
		bool AppendRows(size_t numRows = 1)
		bool DeleteRows(size_t pos = 0, size_t numRows = 1)
		bool InsertCols(size_t pos = 0, size_t numCols = 1)
		bool AppendCols(size_t numCols = 1)
		bool DeleteCols(size_t pos = 0, size_t numCols = 1)
		wxString GetRowLabelValue(int row)
		wxString GetColLabelValue(int col)
		void SetRowLabelValue(int WXUNUSED(row), const wxString&amp;)
		void SetColLabelValue(int WXUNUSED(col), const wxString&amp;)
		void SetAttrProvider(wxGridCellAttrProvider* attrProvider)
		wxGridCellAttrProvider* GetAttrProvider() const
		bool CanHaveAttributes()
		void UpdateAttrRows(size_t pos, int numRows)
		void UpdateAttrCols(size_t pos, int numCols)
		wxGridCellAttr* GetAttr(int row, int col)
		void SetAttr(wxGridCellAttr* attr, int row, int col)
		void SetRowAttr(wxGridCellAttr* attr, int row)
		void SetColAttr(wxGridCellAttr* attr, int col)
<wx/sizer.h>
	class wxGridSizer public wxSizer public wxObject
		wxGridSizer(int rows, int cols, int vgap, int hgap)
		wxGridSizer(int cols, int vgap = 0, int hgap = 0)
		int GetCols()
		int GetHGap()
		int GetRows()
		int GetVGap()
		void SetCols(int cols)
		void SetHGap(int gap)
		void SetRows(int rows)
		void SetVGap(int gap)
<wx/hashmap.h>
	class wxHashMap
		wxHashMap(size_type size = 10)
		wxHashMap(const wxHashMap& map)
		const_iterator begin() const
		iterator begin()
		void clear()
		size_type count(const key_type&amp; key) const
		bool empty() const
		const_iterator end() const
		iterator end()
		size_type erase(const key_type&amp; key)
		void erase(iterator it)
		void erase(const_iterator it)
		iterator find(const key_type&amp; key)
		const_iterator find(const key_type&amp; key) const
		Insert_Result insert(const value_type&amp; v)
		mapped_type&amp; operator[](const key_type&amp; key)
		size_type size() const
<wx/hashset.h>
	class wxHashSet
		wxHashSet(size_type size = 10)
		wxHashSet(const wxHashSet& set)
		const_iterator begin() const
		iterator begin()
		void clear()
		size_type count(const key_type&amp; key) const
		bool empty() const
		const_iterator end() const
		iterator end()
		size_type erase(const key_type&amp; key)
		void erase(iterator it)
		void erase(const_iterator it)
		iterator find(const key_type&amp; key)
		const_iterator find(const key_type&amp; key) const
		Insert_Result insert(const value_type&amp; v)
		size_type size() const
<wx/hash.h>
	class wxHashTable public wxObject
		wxHashTable(unsigned int key_type, int size = 1000)
		~wxHashTable()
		void BeginFind()
		void Clear()
		wxObject * Delete(long key)
		wxObject * Delete(const wxString& key)
		void DeleteContents(bool flag)
		wxObject * Get(long key)
		wxObject * Get(const char* key)
		long MakeKey(const wxString& string)
		wxHashTable::Node * Next()
		void Put(long key, wxObject *object)
		void Put(const char* key, wxObject *object)
		size_t GetCount() const
<wx/help.h>
	class wxHelpController public wxObject
		wxHelpController(wxWindow* parentWindow = NULL)
		~wxHelpController()
		virtual bool Initialize(const wxString& file)
		virtual bool Initialize(const wxString& file, int server)
		virtual bool DisplayBlock(long blockNo)
		virtual bool DisplayContents()
		virtual bool DisplayContextPopup(int contextId)
		virtual bool DisplaySection(const wxString& section)
		virtual bool DisplaySection(int sectionNo)
		virtual bool DisplayTextPopup(const wxString& text, const wxPoint& pos)
		virtual wxFrame * GetFrameParameters(const wxSize * size = NULL, const wxPoint * pos = NULL,bool *newFrameEachTime = NULL)
		virtual wxWindow* GetParentWindow() const
		virtual bool KeywordSearch(const wxString& keyWord, wxHelpSearchMode mode = wxHELP_SEARCH_ALL)
		virtual bool LoadFile(const wxString& file = "")
		virtual bool OnQuit()
		virtual void SetFrameParameters(const wxString & title,const wxSize & size, const wxPoint & pos = wxDefaultPosition,bool newFrameEachTime = false)
		virtual void SetParentWindow(wxWindow* parentWindow)
		virtual void SetViewer(const wxString& viewer, long flags)
		virtual bool Quit()
<wx/cshelp.h>
	class wxHelpControllerHelpProvider public wxSimpleHelpProvider public wxHelpProvider
		wxHelpControllerHelpProvider(wxHelpControllerBase* hc = NULL)
		void SetHelpController(wxHelpControllerBase* hc)
		wxHelpControllerBase* GetHelpController() const
<wx/event.h>
	EVT_HELP(id, func)
	EVT_HELP_RANGE(id1, id2, func)
	class wxHelpEvent public wxCommandEvent public wxEvent public wxObject
		wxHelpEvent(WXTYPE eventType = 0, wxWindowID id = 0,const wxPoint& point)
		wxHelpEvent::Origin GetOrigin() const
		const wxPoint& GetPosition() const
		void SetOrigin(wxHelpEvent::Origin origin)
		void SetPosition(const wxPoint& pt)
<wx/cshelp.h>
	class wxHelpProvider
		~wxHelpProvider()
		virtual void AddHelp(wxWindowBase* window, const wxString& text)
		virtual void AddHelp(wxWindowID id, const wxString& text)
		static wxHelpProvider* Get()
		virtual wxString GetHelp(const wxWindowBase* window)
		virtual void RemoveHelp(wxWindowBase* window)
		static wxHelpProvider* Set(wxHelpProvider* helpProvider)
		virtual bool ShowHelpAtPoint(wxWindowBase* window, const wxPointpoint, wxHelpEvent::Origin origin)
		virtual bool ShowHelp(wxWindowBase* window)
<wx/html/htmlcell.h>
	class wxHtmlCell public wxObject
		wxHtmlCell()
		virtual bool AdjustPagebreak(int * pagebreak)
		virtual void Draw(wxDC& dc, int x, int y, int view_y1, int view_y2)
		virtual void DrawInvisible(wxDC& dc, int x, int y)
		virtual const wxHtmlCell* Find(int condition, const void* param)
		int GetDescent() const
		wxHtmlCell* GetFirstChild()
		int GetHeight() const
		virtual wxString GetId() const
		virtual wxHtmlLinkInfo* GetLink(int x = 0, int y = 0) const
		virtual wxCursor GetMouseCursor(wxHtmlWindowInterface* window)
		wxHtmlCell* GetNext() const
		wxHtmlContainerCell* GetParent() const
		int GetPosX() const
		int GetPosY() const
		int GetWidth() const
		virtual void Layout(int w)
		virtual bool ProcessMouseClick(wxHtmlWindowInterface* window, const wxPoint& pos, const wxMouseEvent& event)
		void SetId(const wxString& id)
		void SetLink(const wxHtmlLinkInfo& link)
		void SetNext(wxHtmlCell *cell)
		void SetParent(wxHtmlContainerCell *p)
		void SetPos(int x, int y)
<wx/html/htmlcell.h>
	class wxHtmlColourCell public wxHtmlCell
		wxHtmlColourCell(wxColour clr, int flags = wxHTML_CLR_FOREGROUND)
<wx/html/htmlcell.h>
	class wxHtmlContainerCell public wxHtmlCell
		wxHtmlContainerCell(wxHtmlContainerCell *parent)
		int GetAlignHor() const
		int GetAlignVer() const
		wxColour GetBackgroundColour()
		int GetIndent(int ind) const
		int GetIndentUnits(int ind) const
		void InsertCell(wxHtmlCell *cell)
		void SetAlign(const wxHtmlTag& tag)
		void SetAlignHor(int al)
		void SetAlignVer(int al)
		void SetBackgroundColour(const wxColour& clr)
		void SetBorder(const wxColour& clr1, const wxColour& clr2)
		void SetIndent(int i, int what, int units = wxHTML_UNITS_PIXELS)
		void SetMinHeight(int h, int align = wxHTML_ALIGN_TOP)
		void SetWidthFloat(int w, int units)
		void SetWidthFloat(const wxHtmlTag& tag, double pixel_scale = 1.0)
<wx/html/htmprint.h>
	class wxHtmlDCRenderer public wxObject
		wxHtmlDCRenderer()
		void SetDC(wxDC* dc, double pixel_scale = 1.0)
		void SetFonts(const wxString& normal_face, const wxString& fixed_face, const int *sizes = NULL)
		void SetSize(int width, int height)
		void SetHtmlText(const wxString& html, const wxString& basepath = wxEmptyString, bool isdir = true)
		int Render(int x, int y, int from = 0, int dont_render = false)
		int GetTotalHeight()
<wx/html/htmprint.h>
	class wxHtmlEasyPrinting public wxObject
		wxHtmlEasyPrinting(const wxString& name = "Printing", wxWindow* parentWindow = NULL)
		wxWindow* GetParentWindow() const
		wxPrintData* GetPrintData()
		wxPageSetupDialogData* GetPageSetupData()
		bool PreviewFile(const wxString& htmlfile)
		bool PreviewText(const wxString& htmltext, const wxString& basepath = wxEmptyString)
		bool PrintFile(const wxString& htmlfile)
		bool PrintText(const wxString& htmltext, const wxString& basepath = wxEmptyString)
		void PageSetup()
		void SetFonts(const wxString& normal_face, const wxString& fixed_face, const int *sizes = NULL)
		void SetHeader(const wxString& header, int pg = wxPAGE_ALL)
		void SetFooter(const wxString& footer, int pg = wxPAGE_ALL)
		void SetParentWindow(wxWindow* window)
<wx/html/htmlfilt.h>
	class wxHtmlFilter public wxObject
		wxHtmlFilter()
		bool CanRead(const wxFSFile& file)
		wxString ReadFile(const wxFSFile& file)
<wx/html/helpctrl.h>
	class wxHtmlHelpController
		wxHtmlHelpController(int style = wxHF_DEFAULT_STYLE, wxWindow* parentWindow = NULL)
		bool AddBook(const wxFileName& bookFile, bool showWaitMsg)
		bool AddBook(const wxString& bookUrl, bool showWaitMsg)
		virtual wxHtmlHelpDialog* CreateHelpDialog(wxHtmlHelpData * data)
		virtual wxHtmlHelpFrame* CreateHelpFrame(wxHtmlHelpData * data)
		void Display(const wxString& x)
		void Display(const int id)
		void DisplayContents()
		void DisplayIndex()
		bool KeywordSearch(const wxString& keyword, wxHelpSearchMode mode = wxHELP_SEARCH_ALL)
		void ReadCustomization(wxConfigBase* cfg, wxString path = wxEmptyString)
		void SetTempDir(const wxString& path)
		void SetTitleFormat(const wxString& format)
		void UseConfig(wxConfigBase* config, const wxString& rootpath = wxEmptyString)
		void WriteCustomization(wxConfigBase* cfg, wxString path = wxEmptyString)
<wx/html/helpdata.h>
	class wxHtmlHelpData public wxObject
		wxHtmlHelpData()
		bool AddBook(const wxString& book_url)
		wxString FindPageById(int id)
		wxString FindPageByName(const wxString& page)
		const wxHtmlBookRecArray&amp; GetBookRecArray()
		const wxHtmlHelpDataItems&amp; GetContentsArray()
		const wxHtmlHelpDataItems&amp; GetIndexArray()
		void SetTempDir(const wxString& path)
<wx/html/helpdlg.h>
	class wxHtmlHelpDialog public wxFrame
		wxHtmlHelpDialog(wxHtmlHelpData* data = NULL)
		wxHtmlHelpDialog(wxWindow* parent, int wxWindowID, const wxString& title = wxEmptyString, int style = wxHF_DEFAULT_STYLE, wxHtmlHelpData* data = NULL)
		virtual void AddToolbarButtons(wxToolBar *toolBar, int style) 
		bool Create(wxWindow* parent, wxWindowID id, const wxString& title = wxEmptyString, int style = wxHF_DEFAULT_STYLE)
		wxHtmlHelpController* GetController() const 
		void ReadCustomization(wxConfigBase* cfg, const wxString& path = wxEmptyString)
		void SetController(wxHtmlHelpController* contoller) 
		void SetTitleFormat(const wxString& format)
		void WriteCustomization(wxConfigBase* cfg, const wxString& path = wxEmptyString)
<wx/html/helpfrm.h>
	class wxHtmlHelpFrame public wxFrame
		wxHtmlHelpFrame(wxHtmlHelpData* data = NULL)
		wxHtmlHelpFrame(wxWindow* parent, int wxWindowID, const wxString& title = wxEmptyString, int style = wxHF_DEFAULT_STYLE, wxHtmlHelpData* data = NULL)
		virtual void AddToolbarButtons(wxToolBar *toolBar, int style) 
		bool Create(wxWindow* parent, wxWindowID id, const wxString& title = wxEmptyString, int style = wxHF_DEFAULT_STYLE)
		wxHtmlHelpController* GetController() const 
		void ReadCustomization(wxConfigBase* cfg, const wxString& path = wxEmptyString)
		void SetController(wxHtmlHelpController* contoller) 
		void SetTitleFormat(const wxString& format)
		void WriteCustomization(wxConfigBase* cfg, const wxString& path = wxEmptyString)
<wx/html/helpwnd.h>
	class wxHtmlHelpWindow public wxWindow
		wxHtmlHelpWindow(wxHtmlHelpData* data = NULL)
		wxHtmlHelpWindow(wxWindow* parent, int wxWindowID, const wxPoint& pos = wxDefaultPosition, const wxSize& pos = wxDefaultSize, int style = wxTAB_TRAVERSAL|wxTAB_wxNO_BORDER, int helpStyle = wxHF_DEFAULT_STYLE, wxHtmlHelpData* data = NULL)
		bool Create(wxWindow* parent, wxWindowID id, const wxPoint& pos = wxDefaultPosition, const wxSize& pos = wxDefaultSize, int style = wxTAB_TRAVERSAL|wxTAB_wxNO_BORDER, int helpStyle = wxHF_DEFAULT_STYLE, wxHtmlHelpData* data = NULL)
		void CreateContents()
		void CreateIndex()
		void CreateSearch()
		bool Display(const wxString& x)
		bool Display(const int id)
		bool DisplayContents()
		bool DisplayIndex()
		wxHtmlHelpData* GetData()
		bool KeywordSearch(const wxString& keyword, wxHelpSearchMode mode = wxHELP_SEARCH_ALL)
		void ReadCustomization(wxConfigBase* cfg, const wxString& path = wxEmptyString)
		void RefreshLists()
		void SetTitleFormat(const wxString& format)
		void UseConfig(wxConfigBase* config, const wxString& rootpath = wxEmptyString)
		void WriteCustomization(wxConfigBase* cfg, const wxString& path = wxEmptyString)
		virtual void AddToolbarButtons(wxToolBar *toolBar, int style) 
<wx/html/helpctrl.h>
	class wxHtmlModalHelp
		wxHtmlModalHelp(wxWindow* parent, const wxString& helpFile, const wxString& topic = wxEmptyString,int style = wxHF_DEFAULT_STYLE | wxHF_DIALOG | wxHF_MODAL)
<wx/html/htmlcell.h>
	class wxHtmlLinkInfo public wxObject
		wxHtmlLinkInfo()
		wxHtmlLinkInfo(const wxString& href, const wxString& target = wxEmptyString)
		const wxMouseEvent * GetEvent()
		const wxHtmlCell * GetHtmlCell()
		wxString GetHref()
		wxString GetTarget()
<wx/htmllbox.h>
	EVT_HTML_CELL_CLICKED(id, func)
	EVT_HTML_CELL_HOVER(id, func)
	EVT_HTML_LINK_CLICKED(id, func)
	class wxHtmlListBox public wxVListBox public wxVScrolledWindow public wxPanel public wxWindow public wxEvtHandler public wxObject
		wxHtmlListBox(wxWindow* parent, wxWindowID id = wxID_ANY, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = 0, const wxString& name = wxHtmlListBoxNameStr)
		wxHtmlListBox()
		~wxHtmlListBox()
		bool Create(wxWindow* parent, wxWindowID id = wxID_ANY, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = 0, const wxString& name = wxHtmlListBoxNameStr)
		wxFileSystem& GetFileSystem()
		const wxFileSystem& GetFileSystem() const
		wxColour GetSelectedTextBgColour(const wxColour& colBg) const
		wxColour GetSelectedTextColour(const wxColour& colFg) const
		wxString OnGetItem(size_t n) const
		wxString OnGetItemMarkup(size_t n) const
		virtual void OnLinkClicked(size_t n, const wxHtmlLinkInfo& link)
<wx/htmllbox.h>
	wxHLB_DEFAULT_STYLE
	wxHLB_MULTIPLE
	EVT_LISTBOX(id, func)
	EVT_LISTBOX_DCLICK(id, func)
	EVT_HTML_CELL_CLICKED(id, func)
	EVT_HTML_CELL_HOVER(id, func)
	EVT_HTML_LINK_CLICKED(id, func)
	class wxSimpleHtmlListBox public wxHtmlListBox, wxControlWithItems public wxVListBox public wxVScrolledWindow public wxPanel public wxWindow public wxEvtHandler public wxObject
		wxHtmlListBox(wxWindow* parent, wxWindowID id,const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize,int n = 0, const wxString choices[] = NULL,long style = wxHLB_DEFAULT_STYLE, const wxValidator& validator = wxDefaultValidator,const wxString& name = "simpleHtmlListBox")
		wxHtmlListBox(wxWindow* parent, wxWindowID id,const wxPoint& pos, const wxSize& size,const wxArrayString& choices,long style = wxHLB_DEFAULT_STYLE, const wxValidator& validator = wxDefaultValidator,const wxString& name = "simpleHtmlListBox")
		wxSimpleHtmlListBox()
		~wxSimpleHtmlListBox()
		bool Create(wxWindow* parent, wxWindowID id,const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize,int n, const wxString choices[] = NULL,long style = wxHLB_DEFAULT_STYLE, const wxValidator& validator = wxDefaultValidator,const wxString& name = "simpleHtmlListBox")
		bool Create(wxWindow* parent, wxWindowID id,const wxPoint& pos, const wxSize& size,const wxArrayString& choices,long style = wxHLB_DEFAULT_STYLE, const wxValidator& validator = wxDefaultValidator,const wxString& name = "simpleHtmlListBox")
<wx/html/htmlpars.h>
	class wxHtmlParser
		wxHtmlParser()
		void AddTag(const wxHtmlTag& tag)
		virtual void AddTagHandler(wxHtmlTagHandler *handler)
		virtual void AddWord(const char* txt)
		void DoParsing(int begin_pos, int end_pos)
		void DoParsing()
		virtual void DoneParser()
		wxFileSystem* GetFS() const
		virtual wxObject* GetProduct()
		wxString* GetSource()
		virtual void InitParser(const wxString& source)
		virtual wxFSFile* OpenURL(wxHtmlURLType type, const wxString& url)
		wxObject* Parse(const wxString& source)
		void PushTagHandler(wxHtmlTagHandler* handler, const wxString& tags)
		void PopTagHandler()
		void SetFS(wxFileSystem *fs)
		void StopParsing()
<wx/html/htmprint.h>
	class wxHtmlPrintout public wxPrintout
		wxHtmlPrintout(const wxString& title = "Printout")
		static void AddFilter(wxHtmlFilter* filter)
		void SetFonts(const wxString& normal_face, const wxString& fixed_face, const int *sizes = NULL)
		void SetFooter(const wxString& footer, int pg = wxPAGE_ALL)
		void SetHeader(const wxString& header, int pg = wxPAGE_ALL)
		void SetHtmlFile(const wxString& htmlfile)
		void SetHtmlText(const wxString& html, const wxString& basepath = wxEmptyString, bool isdir = true)
		void SetMargins(float top = 25.2, float bottom = 25.2, float left = 25.2, float right = 25.2, float spaces = 5)
<wx/html/htmltag.h>
	class wxHtmlTag
		wxHtmlTag(wxHtmlTag *parent, const wxString& source, int pos, int end_pos, wxHtmlTagsCache* cache, wxHtmlEntitiesParser *entParser)
		const wxString& GetAllParams() const
		int GetBeginPos() const
		int GetEndPos1() const
		int GetEndPos2() const
		wxString GetName() const
		wxString GetParam(const wxString& par, bool with_commas = false) const
		bool GetParamAsColour(const wxString& par, wxColour *clr) const
		bool GetParamAsInt(const wxString& par, int *value) const
		bool HasEnding() const
		bool HasParam(const wxString& par) const
		wxString ScanParam(const wxString& par, const wxChar *format, void *value) const
<wx/html/htmlpars.h>
	class wxHtmlTagHandler public wxObject
		wxHtmlTagHandler()
		virtual wxString GetSupportedTags()
		virtual bool HandleTag(const wxHtmlTag& tag)
		void ParseInner(const wxHtmlTag& tag)
		virtual void SetParser(wxHtmlParser *parser)
<wx/html/winpars.h>
	class wxHtmlTagsModule public wxModule
		virtual void FillHandlersTable(wxHtmlWinParser *parser)
<wx/html/htmlcell.h>
	class wxHtmlWidgetCell public wxHtmlCell
		wxHtmlWidgetCell(wxWindow* wnd, int w = 0)
<wx/html/htmlwin.h>
	wxHW_SCROLLBAR_NEVER
	wxHW_SCROLLBAR_AUTO
	wxHW_NO_SELECTION
	EVT_HTML_CELL_CLICKED(id, func)
	EVT_HTML_CELL_HOVER(id, func)
	EVT_HTML_LINK_CLICKED(id, func)
	class wxHtmlWindow public wxScrolledWindow
		wxHtmlWindow()
		wxHtmlWindow(wxWindow *parent, wxWindowID id = -1, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxHW_DEFAULT_STYLE, const wxString& name = "htmlWindow")
		static void AddFilter(wxHtmlFilter *filter)
		bool AppendToPage(const wxString& source)
		wxHtmlContainerCell* GetInternalRepresentation() const
		wxString GetOpenedAnchor()
		wxString GetOpenedPage()
		wxString GetOpenedPageTitle()
		wxFrame* GetRelatedFrame() const
		bool HistoryBack()
		bool HistoryCanBack()
		bool HistoryCanForward()
		void HistoryClear()
		bool HistoryForward()
		virtual bool LoadFile(const wxFileName& filename)
		virtual bool LoadPage(const wxString& location)
		virtual bool OnCellClicked(wxHtmlCell *cell, wxCoord x, wxCoord y, const wxMouseEvent& event)
		virtual void OnCellMouseHover(wxHtmlCell *cell, wxCoord x, wxCoord y)
		virtual void OnLinkClicked(const wxHtmlLinkInfo& link)
		virtual wxHtmlOpeningStatus OnOpeningURL(wxHtmlURLType type,const wxString& url, wxString *redirect)
	wxHTML_URL_PAGE
	wxHTML_URL_IMAGE
	wxHTML_URL_OTHER
	wxHTML_OPEN
	wxHTML_BLOCK
	wxHTML_REDIRECT
		virtual void OnSetTitle(const wxString& title)
		virtual void ReadCustomization(wxConfigBase *cfg, wxString path = wxEmptyString)
		void SelectAll()
		wxString SelectionToText()
		void SelectLine(const wxPoint& pos)
		void SelectWord(const wxPoint& pos)
		void SetBorders(int b)
		void SetFonts(const wxString& normal_face, const wxString& fixed_face, const int *sizes = NULL)
		bool SetPage(const wxString& source)
		void SetRelatedFrame(wxFrame* frame, const wxString& format)
		void SetRelatedStatusBar(int bar)
		wxString ToText()
		virtual void WriteCustomization(wxConfigBase *cfg, wxString path = wxEmptyString)
<wx/html/htmlwin.h>
	EVT_HTML_LINK_CLICKED(id, func)
	class wxHtmlLinkEvent public wxCommandEvent public wxEvent public wxObject
		wxHyperlinkEvent(int id, const wxHtmlLinkInfo & linkinfo)
		const wxHtmlLinkInfo GetLinkInfo() const
<wx/html/htmlwin.h>
	EVT_HTML_CELL_HOVER(id, func)
	EVT_HTML_CELL_CLICKED(id, func)
	class wxHtmlCellEvent public wxCommandEvent public wxEvent public wxObject
		wxHtmlCellEvent(wxEventType commandType, int id, wxHtmlCell * cell, const wxPoint & point)
		wxHtmlCell * GetCell() const
		wxPoint GetPoint() const
		bool SetLinkClicked(bool linkclicked)
		bool GetLinkClicked() const
<wx/html/winpars.h>
	class wxHtmlWinParser public wxHtmlParser
		wxHtmlWinParser()
		wxHtmlWinParser(wxHtmlWindowInterface *wndIface)
		static void AddModule(wxHtmlTagsModule *module)
		wxHtmlContainerCell* CloseContainer()
		virtual wxFont* CreateCurrentFont()
		const wxColour& GetActualColor() const
		int GetAlign() const
		int GetCharHeight() const
		int GetCharWidth() const
		wxHtmlContainerCell* GetContainer() const
		wxDC* GetDC()
		wxEncodingConverter * GetEncodingConverter() const
		int GetFontBold() const
		wxString GetFontFace() const
		int GetFontFixed() const
		int GetFontItalic() const
		int GetFontSize() const
		int GetFontUnderlined() const
		wxFontEncoding GetInputEncoding() const
		const wxHtmlLinkInfo& GetLink() const
		const wxColour& GetLinkColor() const
		wxFontEncoding GetOutputEncoding() const
		wxHtmlWindow* GetWindow()
		wxHtmlContainerCell* OpenContainer()
		void SetActualColor(const wxColour& clr)
		void SetAlign(int a)
		wxHtmlContainerCell* SetContainer(wxHtmlContainerCell *c)
		virtual void SetDC(wxDC *dc, double pixel_scale = 1.0)
		void SetFontBold(int x)
		void SetFontFace(const wxString& face)
		void SetFontFixed(int x)
		void SetFontItalic(int x)
		void SetFontSize(int s)
		void SetFontUnderlined(int x)
		void SetFonts(const wxString& normal_face, const wxString& fixed_face, const int *sizes = NULL)
		void SetInputEncoding(wxFontEncoding enc)
		void SetLink(const wxHtmlLinkInfo& link)
		void SetLinkColor(const wxColour& clr)
<wx/html/winpars.h>
	class wxHtmlWinTagHandler public wxHtmlTagHandler
<wx/protocol/http.h>
	class wxHTTP public wxProtocol
<wx/hyperlink.h>
	wxHL_ALIGN_LEFT
	wxHL_ALIGN_RIGHT
	wxHL_ALIGN_CENTRE
	wxHL_CONTEXTMENU
	wxHL_DEFAULT_STYLE
	EVT_HYPERLINK(id, func)
	class wxHyperlinkCtrl public wxControl public wxWindow public wxEvtHandler public wxObject
		wxHyperLink(wxWindow* parent, wxWindowID id, const wxString & label, const wxString & url, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style, const wxString& name = "hyperlink")
		bool Create(wxWindow* parent, wxWindowID id, const wxString & label, const wxString & url, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style, const wxString& name = "hyperlink")
		wxColour GetHoverColour() const
		void SetHoverColour(const wxColour & colour)
		wxColour GetNormalColour() const
		void SetNormalColour(const wxColour & colour)
		wxColour GetVisitedColour() const
		void SetVisitedColour(const wxColour & colour)
		bool GetVisited() const
		void SetVisited(bool visited = true)
		wxString GetURL() const
		void SetURL(const wxString & url)
<wx/hyperlink.h>
	EVT_HYPERLINK(id, func)
	class wxHyperlinkEvent public wxCommandEvent public wxEvent public wxObject
		wxHyperlinkEvent(wxObject * generator, int id, const wxString & url)
		wxString GetURL() const
		void SetURL(const wxString & url)
<wx/icon.h>
	class wxIcon public wxBitmap public wxGDIObject public wxObject
		wxIcon()
		wxIcon(const wxIcon& icon)
		wxIcon(void* data, int type, int width, int height, int depth = -1)
		wxIcon(const char bits[], int width, int heightint depth = 1)
		wxIcon(int width, int height, int depth = -1)
		wxIcon(char** bits)
		wxIcon(const char** bits)
		wxIcon(const wxString& name, wxBitmapType type,int desiredWidth = -1, int desiredHeight = -1)
		wxIcon(const wxIconLocation& loc)
		void CopyFromBitmap(const wxBitmap& bmp)
		~wxIcon()
		int GetDepth() const
		int GetHeight() const
		int GetWidth() const
		bool LoadFile(const wxString& name, wxBitmapType type)
		bool IsOk() const
		void SetDepth(int depth)
		void SetHeight(int height)
		void SetWidth(int width)
		wxIcon& operator =(const wxIcon& icon)
	class wxIconBundle
		wxIconBundle()
		wxIconBundle(const wxString& file, long type)
		wxIconBundle(const wxIcon& icon)
		wxIconBundle(const wxIconBundle& ic)
		~wxIconBundle()
		void AddIcon(const wxString& file, long type)
		void AddIcon(const wxIcon& icon)
		const wxIcon& GetIcon(const wxSize& size) const
		const wxIcon& GetIcon(wxCoord size = -1) const
		const wxIconBundle& operator=(const wxIconBundle& ic)
<wx/iconloc.h>
	class wxIconLocation
		bool IsOk() const
<wx/event.h>
	EVT_ICONIZE(func)
	class wxIconizeEvent public wxEvent public wxObject
		wxIconizeEvent(int id = 0, bool iconized = true)
		bool Iconized() const
<wx/event.h>
	EVT_IDLE(func)
	class wxIdleEvent public wxEvent public wxObject
		wxIdleEvent()
		static bool CanSend(wxWindow* window)
		static wxIdleMode GetMode()
		void RequestMore(bool needMore = true)
		bool MoreRequested() const
		static void SetMode(wxIdleMode mode)
<wx/image.h>
	class wxImage public wxObject
		wxImage()
		wxImage(const wxImage& image)
		wxImage(const wxBitmap& bitmap)
		wxImage(int width, int height, bool clear=true)
		wxImage(int width, int height, unsigned char* data, bool static_data = false)
		wxImage(const wxString& name, long type = wxBITMAP_TYPE_ANY, int index = -1)
		wxImage(const wxString& name, const wxString& mimetype, int index = -1)
		wxImage(wxInputStream& stream, long type = wxBITMAP_TYPE_ANY, int index = -1)
		wxImage(wxInputStream& stream, const wxString& mimetype, int index = -1)
		wxImage(const char* const* xpmData)
		~wxImage()
		static void AddHandler(wxImageHandler* handler)
		bool CanRead(const wxString& filename)
		wxImage Blur(int blurRadius)
		wxImage BlurHorizontal(int blurRadius)
		wxImage BlurVertical(int blurRadius)
		static void CleanUpHandlers()
		unsigned long ComputeHistogram(wxImageHistogram&amp; histogram) const
		bool ConvertAlphaToMask(unsigned char threshold = 128)
		wxBitmap ConvertToBitmap() const
		wxImage ConvertToGreyscale(double lr = 0.299, double lg = 0.587, double lb = 0.114) const
		wxImage ConvertToMono(unsigned char r, unsigned char g, unsigned char b) const
		wxImage Copy() const
		bool Create(int width, int height, bool clear=true)
		void Destroy()
		bool FindFirstUnusedColour(unsigned char * r, unsigned char * g, unsigned char * b, unsigned char startR = 1, unsigned char startG = 0, unsigned char startB = 0)
		static wxImageHandler* FindHandler(const wxString& name)
		static wxImageHandler* FindHandler(const wxString& extension, long imageType)
		static wxImageHandler* FindHandler(long imageType)
		static wxImageHandler* FindHandlerMime(const wxString& mimetype)
		static wxString GetImageExtWildcard()
		unsigned char GetAlpha(int x, int y) const
		unsigned char * GetAlpha() const
		unsigned char GetBlue(int x, int y) const
		unsigned char* GetData() const
		unsigned char GetGreen(int x, int y) const
		static int GetImageCount(const wxString& filename, long type = wxBITMAP_TYPE_ANY)
		static int GetImageCount(wxInputStream& stream, long type = wxBITMAP_TYPE_ANY)
		static wxList& GetHandlers()
		int GetHeight() const
		unsigned char GetMaskBlue() const
		unsigned char GetMaskGreen() const
		unsigned char GetMaskRed() const
		bool GetOrFindMaskColour(unsigned char *r, unsigned char *g, unsigned char *b) const
		const wxPalette& GetPalette() const
		unsigned char GetRed(int x, int y) const
		wxImage GetSubImage(const wxRect& rect) const
		int GetWidth() const
		HSVValue(double h = 0.0, double s = 0.0, double v = 0.0)
		wxImage::RGBValue HSVtoRGB(const HSVValue &amp; hsv)
		bool HasAlpha() const
		bool HasMask() const
		wxString GetOption(const wxString& name) const
		int GetOptionInt(const wxString& name) const
		bool HasOption(const wxString& name) const
		void InitAlpha()
		static void InitStandardHandlers()
		static void InsertHandler(wxImageHandler* handler)
		bool IsTransparent(int x, int y, unsigned char threshold = 128) const
		bool LoadFile(const wxString& name, long type = wxBITMAP_TYPE_ANY, int index = -1)
		bool LoadFile(const wxString& name, const wxString& mimetype, int index = -1)
		bool LoadFile(wxInputStream& stream, long type, int index = -1)
		bool LoadFile(wxInputStream& stream, const wxString& mimetype, int index = -1)
		bool IsOk() const
		RGBValue(unsigned char r = 0, unsigned char g = 0, unsigned char b = 0)
		wxImage::HSVValue RGBtoHSV(const RGBValue&amp; rgb)
		static bool RemoveHandler(const wxString& name)
		wxImage Mirror(bool horizontally = true) const
		void Replace(unsigned char r1, unsigned char g1, unsigned char b1,unsigned char r2, unsigned char g2, unsigned char b2)
		wxImage & Rescale(int width, int height, int quality = wxIMAGE_QUALITY_NORMAL)
		wxImage & Resize(const wxSize& size, const wxPoint pos, int red = -1, int green = -1, int blue = -1)
		wxImage Rotate(double angle, const wxPoint& rotationCentre,bool interpolating = true, wxPoint* offsetAfterRotation = NULL)
		void RotateHue(double angle)
		wxImage Rotate90(bool clockwise = true) const
		bool SaveFile(const wxString& name, int type) const
		bool SaveFile(const wxString& name, const wxString& mimetype) const
		bool SaveFile(const wxString& name) const
		bool SaveFile(wxOutputStream& stream, int type) const
		bool SaveFile(wxOutputStream& stream, const wxString& mimetype) const
		wxImage Scale(int width, int height, int quality = wxIMAGE_QUALITY_NORMAL) const
		wxImage Size(const wxSize& size, const wxPoint pos, int red = -1, int green = -1, int blue = -1) const
		void SetAlpha(unsigned char *alpha = NULL,bool static_data = false)
		void SetAlpha(int x, int y, unsigned char alpha)
		void SetData(unsigned char*data)
		void SetMask(bool hasMask = true)
		void SetMaskColour(unsigned char red, unsigned char green, unsigned char blue)
		bool SetMaskFromImage(const wxImage& mask, unsigned char mr, unsigned char mg, unsigned char mb)
		void SetOption(const wxString& name, const wxString& value)
		void SetOption(const wxString& name, int value)
		void SetPalette(const wxPalette& palette)
		void SetRGB(int x, int y, unsigned char red, unsigned char green, unsigned char blue)
		void SetRGB(wxRect & rect, unsigned char red, unsigned char green, unsigned char blue)
		wxImage& operator =(const wxImage& image)
<wx/image.h>
	class wxImageHandler public wxObject
		wxImageHandler()
		~wxImageHandler()
		const wxString& GetName() const
		const wxString& GetExtension() const
		int GetImageCount(wxInputStream& stream)
		long GetType() const
		const wxString& GetMimeType() const
		bool LoadFile(wxImage* image, wxInputStream& stream, bool verbose=true, int index=0)
		bool SaveFile(wxImage* image, wxOutputStream& stream)
		void SetName(const wxString& name)
		void SetExtension(const wxString& extension)
		void SetMimeType(const wxString& mimetype)
		void SetType(long type)
<wx/imaglist.h>
	class wxImageList public wxObject
		wxImageList()
		wxImageList(int width, int height, const bool mask = true,int initialCount = 1)
		int Add(const wxBitmap& bitmap, const wxBitmap& mask = wxNullBitmap)
		int Add(const wxBitmap& bitmap, const wxColour& maskColour)
		int Add(const wxIcon& icon)
		bool Create(int width, int height, const bool mask = true,int initialCount = 1)
		bool Draw(int index, wxDC& dc, int x,int y, int flags = wxIMAGELIST_DRAW_NORMAL,const bool solidBackground = false)
		wxBitmap GetBitmap(int index) const
		wxIcon GetIcon(int index) const
		int GetImageCount() const
		bool GetSize(int index, int&amp; width, int &amp;height) const
		bool Remove(int index)
		bool RemoveAll()
		bool Replace(int index, const wxBitmap& bitmap, const wxBitmap& mask = wxNullBitmap)
		bool Replace(int index, const wxIcon& icon)
<wx/layout.h>
	class wxIndividualLayoutConstraint public wxObject
		void wxIndividualLayoutConstraint()
		void Above(wxWindow *otherWin, int margin = 0)
		void Absolute(int value)
		void AsIs()
		void Below(wxWindow *otherWin, int margin = 0)
		void Unconstrained()
		void LeftOf(wxWindow *otherWin, int margin = 0)
		void PercentOf(wxWindow *otherWin, wxEdge edge, int per)
		void RightOf(wxWindow *otherWin, int margin = 0)
		void SameAs(wxWindow *otherWin, wxEdge edge, int margin = 0)
		void Set(wxRelationship rel, wxWindow *otherWin, wxEdge otherEdge,int value = 0, int margin = 0)
<wx/event.h>
	EVT_INIT_DIALOG(func)
	class wxInitDialogEvent public wxEvent public wxObject
		wxInitDialogEvent(int id = 0)
<wx/stream.h>
	class wxInputStream public wxStreamBase
		wxInputStream()
		~wxInputStream()
		bool CanRead() const
		char GetC()
		bool Eof() const
		size_t LastRead() const
		char Peek()
		wxInputStream& Read(void *buffer, size_t size)
		wxInputStream& Read(wxOutputStream& stream_out)
		off_t SeekI(off_t pos, wxSeekMode mode = wxFromStart)
		off_t TellI() const
		size_t Ungetch(const char* buffer, size_t size)
		bool Ungetch(char c)
<wx/socket.h>
	class wxIPaddress public wxSockAddress
		virtual bool Hostname(const wxString& hostname)
		virtual wxString Hostname()
		virtual wxString IPAddress()
		virtual bool Service(const wxString& service)
		virtual bool Service(unsigned short service)
		virtual unsigned short Service()
		virtual bool AnyAddress()
		virtual bool LocalHost()
		virtual bool IsLocalHost()
<wx/socket.h>
	class wxIPV4address public wxIPaddress
		bool Hostname(const wxString& hostname)
		wxString Hostname()
		wxString IPAddress()
		bool Service(const wxString& service)
		bool Service(unsigned short service)
		unsigned short Service()
		bool AnyAddress()
		bool LocalHost()
<wx/joystick.h>
	class wxJoystick public wxObject
		wxJoystick(int joystick = wxJOYSTICK1)
		~wxJoystick()
		int GetButtonState() const
		int GetManufacturerId() const
		int GetMovementThreshold() const
		int GetNumberAxes() const
		int GetNumberButtons() const
		static int GetNumberJoysticks()
		int GetPollingMax() const
		int GetPollingMin() const
		int GetProductId() const
		wxString GetProductName() const
		wxPoint GetPosition() const
		int GetPOVPosition() const
		int GetPOVCTSPosition() const
		int GetRudderMax() const
		int GetRudderMin() const
		int GetRudderPosition() const
		int GetUMax() const
		int GetUMin() const
		int GetUPosition() const
		int GetVMax() const
		int GetVMin() const
		int GetVPosition() const
		int GetXMax() const
		int GetXMin() const
		int GetYMax() const
		int GetYMin() const
		int GetZMax() const
		int GetZMin() const
		int GetZPosition() const
		bool HasPOV() const
		bool HasPOV4Dir() const
		bool HasPOVCTS() const
		bool HasRudder() const
		bool HasU() const
		bool HasV() const
		bool HasZ() const
		bool IsOk() const
		bool ReleaseCapture()
		bool SetCapture(wxWindow* win, int pollingFreq = 0)
		void SetMovementThreshold(int threshold)
<wx/event.h>
	EVT_JOY_BUTTON_DOWN(func)
	EVT_JOY_BUTTON_UP(func)
	EVT_JOY_MOVE(func)
	EVT_JOY_ZMOVE(func)
	EVT_JOYSTICK_EVENTS(func)
	class wxJoystickEvent public wxEvent
		wxJoystickEvent(WXTYPE eventType = 0, int state = 0,int joystick = wxJOYSTICK1, int change = 0)
		bool ButtonDown(int button = wxJOY_BUTTON_ANY) const
		bool ButtonIsDown(int button = wxJOY_BUTTON_ANY) const
		bool ButtonUp(int button = wxJOY_BUTTON_ANY) const
		int GetButtonChange() const
		int GetButtonState() const
		int GetJoystick() const
		wxPoint GetPosition() const
		int GetZPosition() const
		bool IsButton() const
		bool IsMove() const
		bool IsZMove() const
<wx/event.h>
	EVT_KEY_DOWN(func)
	EVT_KEY_UP(func)
	EVT_CHAR(func)
	class wxKeyEvent public wxEvent
		wxKeyEvent(WXTYPE keyEventType)
		bool AltDown() const
		bool CmdDown() const
		bool ControlDown() const
		int GetKeyCode() const
		int GetModifiers() const
		wxPoint GetPosition() const
		void GetPosition(long *x, long *y) const
		wxUint32 GetRawKeyCode() const
		wxUint32 GetRawKeyFlags() const
		wxChar GetUnicodeKey() const
		long GetX() const
		long GetY() const
		bool HasModifiers() const
		bool MetaDown() const
		bool ShiftDown() const
<wx/laywin.h>
	EVT_QUERY_LAYOUT_INFO(func)
	EVT_CALCULATE_LAYOUT(func)
	class wxLayoutAlgorithm public wxObject
		wxLayoutAlgorithm()
		~wxLayoutAlgorithm()
		bool LayoutFrame(wxFrame* frame, wxWindow* mainWindow = NULL) const
		bool LayoutMDIFrame(wxMDIParentFrame* frame, wxRect* rect = NULL) const
		bool LayoutWindow(wxWindow* parent, wxWindow* mainWindow = NULL) const
<wx/layout.h>
	class wxLayoutConstraints public wxObject
		wxLayoutConstraints()
<wx/list.h>
	class wxList<T>
		wxList<T>()
		wxList<T>(size_t count, T *elements[])
		~wxList<T>()
		wxList<T>::compatibility_iterator Append(T *object)
		void Clear()
		void DeleteContents(bool destroy)
		bool DeleteNode(const compatibility_iterator&amp;iter)
		bool DeleteObject(T *object)
		void Erase(const compatibility_iterator&amp;iter)
		wxList<T>::compatibility_iterator Find(T * object) const
		size_t GetCount() const
		wxList<T>::compatibility_iterator GetFirst() const
		wxList<T>::compatibility_iterator GetLast() const
		int IndexOf(T* obj ) const
		wxList<T>::compatibility_iterator Insert(T *object)
		wxList<T>::compatibility_iterator Insert(size_t position, T *object)
		wxList<T>::compatibility_iterator Insert(compatibility_iteratoriter, T *object)
		bool IsEmpty() const
		wxList<T>::compatibility_iterator Item(size_t index) const
		wxList<T>::compatibility_iterator Member(T * object) const
		wxList<T>::compatibility_iterator Nth(int n) const
		int Number() const
		void Sort(wxSortCompareFunction compfunc)
		void assign(const_iterator first, const const_iterator&amp; last)
		void assign(size_type n, const_reference v = value_type())
		reference back()
		const_reference back() const
		iterator begin()
		const_iterator begin() const
		void clear()
		bool empty() const
		iterator end()
		const_iterator end() const
		iterator erase(const iterator&amp; it)
		iterator erase(const iterator&amp; first, const iterator&amp; last)
		reference front()
		const_reference front() const
		iterator insert(const iterator&amp; it, const_reference v = value_type())
		void insert(const iterator&amp; it, size_type n, const_reference v = value_type())
		void insert(const iterator&amp; it, const_iterator first, const const_iterator&amp; last)
		size_type max_size() const
		void pop_back()
		void pop_front()
		void push_back(const_reference v = value_type())
		void push_front(const_reference v = value_type())
		reverse_iterator rbegin()
		const_reverse_iterator rbegin() const
		void remove(const_reference v)
		reverse_iterator rend()
		const_reverse_iterator rend() const
		void resize(size_type n, value_type v = value_type())
		void reverse()
		size_type size() const
		void splice(const iterator&amp; it, wxList<T>& l)
		void splice(const iterator&amp; it, wxList<T>& l, const iterator&amp; first)
		void splice(const iterator&amp; it, wxList<T>& l, const iterator&amp; first, const iterator&amp; last)
<wx/listbook.h>
	wxLB_DEFAULT
	wxLB_TOP
	wxLB_LEFT
	wxLB_RIGHT
	wxLB_BOTTOM
	class wxListbook public wxControl public wxWindow public wxEvtHandler public wxObject
<wx/listbox.h>
	wxLB_SINGLE
	wxLB_MULTIPLE
	wxLB_EXTENDED
	wxLB_HSCROLL
	wxLB_ALWAYS_SB
	wxLB_NEEDED_SB
	wxLB_SORT
	EVT_LISTBOX(id, func)
	EVT_LISTBOX_DCLICK(id, func)
	class wxListBox public wxControlWithItems public wxControl public wxWindow public wxEvtHandler public wxObject
		wxListBox()
		wxListBox(wxWindow* parent, wxWindowID id,const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize,int n = 0, const wxString choices[] = NULL,long style = 0, const wxValidator& validator = wxDefaultValidator, const wxString& name = "listBox")
		wxListBox(wxWindow* parent, wxWindowID id,const wxPoint& pos, const wxSize& size,const wxArrayString& choices,long style = 0, const wxValidator& validator = wxDefaultValidator, const wxString& name = "listBox")
		void ~wxListBox()
		bool Create(wxWindow* parent, wxWindowID id,const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize,int n, const wxString choices[] = NULL,long style = 0, const wxValidator& validator = wxDefaultValidator, const wxString& name = "listBox")
		bool Create(wxWindow* parent, wxWindowID id,const wxPoint& pos, const wxSize& size,const wxArrayString& choices,long style = 0, const wxValidator& validator = wxDefaultValidator, const wxString& name = "listBox")
		void Deselect(int n)
		int GetSelections(wxArrayInt&amp; selections) const
		void InsertItems(int nItems, const wxString *items, unsigned int pos)
		void InsertItems(const wxArrayString& nItems, unsigned int pos)
		int HitTest(const wxPoint point) const
		bool IsSelected(int n) const
		void Set(int n, const wxString* choices, void **clientData = NULL)
		void Set(const wxArrayString& choices, void **clientData = NULL)
		void SetFirstItem(int n)
		void SetFirstItem(const wxString& string)
<wx/listctrl.h>
	wxLC_LIST
	wxLC_REPORT
	wxLC_VIRTUAL
	wxLC_ICON
	wxLC_SMALL_ICON
	wxLC_ALIGN_TOP
	wxLC_ALIGN_LEFT
	wxLC_AUTOARRANGE
	wxLC_EDIT_LABELS
	wxLC_NO_HEADER
	wxLC_SINGLE_SEL
	wxLC_SORT_ASCENDING
	wxLC_SORT_DESCENDING
	wxLC_HRULES
	wxLC_VRULES
	EVT_LIST_BEGIN_DRAG(id, func)
	EVT_LIST_BEGIN_RDRAG(id, func)
	EVT_LIST_BEGIN_LABEL_EDIT(id, func)
	EVT_LIST_END_LABEL_EDIT(id, func)
	EVT_LIST_DELETE_ITEM(id, func)
	EVT_LIST_DELETE_ALL_ITEMS(id, func)
	EVT_LIST_ITEM_SELECTED(id, func)
	EVT_LIST_ITEM_DESELECTED(id, func)
	EVT_LIST_ITEM_ACTIVATED(id, func)
	EVT_LIST_ITEM_FOCUSED(id, func)
	EVT_LIST_ITEM_MIDDLE_CLICK(id, func)
	EVT_LIST_ITEM_RIGHT_CLICK(id, func)
	EVT_LIST_KEY_DOWN(id, func)
	EVT_LIST_INSERT_ITEM(id, func)
	EVT_LIST_COL_CLICK(id, func)
	EVT_LIST_COL_RIGHT_CLICK(id, func)
	EVT_LIST_COL_BEGIN_DRAG(id, func)
	EVT_LIST_COL_DRAGGING(id, func)
	EVT_LIST_COL_END_DRAG(id, func)
	EVT_LIST_CACHE_HINT(id, func)
	class wxListCtrl public wxControl public wxWindow public wxEvtHandler public wxObject
		wxListCtrl()
		wxListCtrl(wxWindow* parent, wxWindowID id,const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize,long style = wxLC_ICON, const wxValidator& validator = wxDefaultValidator, const wxString& name = wxListCtrlNameStr)
		void ~wxListCtrl()
		bool Arrange(int flag = wxLIST_ALIGN_DEFAULT)
		void AssignImageList(wxImageList* imageList, int which)
		void ClearAll()
		bool Create(wxWindow* parent, wxWindowID id,const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize,long style = wxLC_ICON, const wxValidator& validator = wxDefaultValidator, const wxString& name = wxListCtrlNameStr)
		bool DeleteAllItems()
		bool DeleteColumn(int col)
		bool DeleteItem(long item)
		void EditLabel(long item)
		bool EnsureVisible(long item)
		long FindItem(long start, const wxString& str, const bool partial = false)
		long FindItem(long start, long data)
		long FindItem(long start, const wxPoint& pt, int direction)
		bool GetColumn(int col, wxListItem& item) const
		int GetColumnCount() const
		int GetColumnWidth(int col) const
		int GetCountPerPage() const
		wxTextCtrl * GetEditControl() const
		wxImageList* GetImageList(int which) const
		bool GetItem(wxListItem& info) const
		wxColour GetItemBackgroundColour(long item) const
		int GetItemCount() const
		long GetItemData(long item) const
		wxFont GetItemFont(long item) const
		bool GetItemPosition(long item, wxPoint& pos) const
		bool GetItemRect(long item, wxRect& rect, int code = wxLIST_RECT_BOUNDS) const
		bool GetSubItemRect(long item, long subItem, wxRect& rect, int code = wxLIST_RECT_BOUNDS) const
		wxSize GetItemSpacing() const
		int GetItemState(long item, long stateMask) const
		wxString GetItemText(long item) const
		wxColour GetItemTextColour(long item) const
		long GetNextItem(long item, int geometry = wxLIST_NEXT_ALL, int state = wxLIST_STATE_DONTCARE) const
		int GetSelectedItemCount() const
		wxColour GetTextColour() const
		long GetTopItem() const
		wxRect GetViewRect() const
		long HitTest(const wxPoint& point, int&amp; flags, long *ptrSubItem) const
		long InsertColumn(long col, wxListItem& info)
		long InsertColumn(long col, const wxString& heading, int format = wxLIST_FORMAT_LEFT,int width = -1)
		long InsertItem(wxListItem& info)
		long InsertItem(long index, const wxString& label)
		long InsertItem(long index, int imageIndex)
		long InsertItem(long index, const wxString& label, int imageIndex)
		virtual wxListItemAttr * OnGetItemAttr(long item) const
		virtual int OnGetItemImage(long item) const
		virtual int OnGetItemColumnImage(long item, long column) const
		virtual wxString OnGetItemText(long item, long column) const
		void RefreshItem(long item)
		void RefreshItems(long itemFrom, long itemTo)
		bool ScrollList(int dx, int dy)
		void SetBackgroundColour(const wxColour& col)
		bool SetColumn(int col, wxListItem& item)
		bool SetColumnWidth(int col, int width)
		void SetImageList(wxImageList* imageList, int which)
		bool SetItem(wxListItem& info)
		long SetItem(long index, int col, const wxString&amp; label, int imageId = -1)
		long SetItem(long index, int col, const wxString& label, int imageId = -1)
		void SetItemBackgroundColour(long item, const wxColour& col)
		void SetItemCount(long count)
		bool SetItemData(long item, long data)
		void SetItemFont(long item, const wxFont& font)
		bool SetItemImage(long item, int image)
		bool SetItemImage(long item, int image, int selImage)
		bool SetItemImage(long item, long columnint image)
		bool SetItemPosition(long item, const wxPoint& pos)
		bool SetItemPtrData(long item, wxUIntPtr data)
		bool SetItemState(long item, long state, long stateMask)
		void SetItemText(long item, const wxString& text)
		void SetItemTextColour(long item, const wxColour& col)
		void SetSingleStyle(long style, const bool add = true)
		void SetTextColour(const wxColour& col)
		void SetWindowStyleFlag(long style)
		bool SortItems(wxListCtrlCompare fnSortCallBack, long data)
<wx/listctrl.h>
	EVT_LIST_BEGIN_DRAG(id, func)
	EVT_LIST_BEGIN_RDRAG(id, func)
	EVT_LIST_BEGIN_LABEL_EDIT(id, func)
	EVT_LIST_END_LABEL_EDIT(id, func)
	EVT_LIST_DELETE_ITEM(id, func)
	EVT_LIST_DELETE_ALL_ITEMS(id, func)
	EVT_LIST_ITEM_SELECTED(id, func)
	EVT_LIST_ITEM_DESELECTED(id, func)
	EVT_LIST_ITEM_ACTIVATED(id, func)
	EVT_LIST_ITEM_FOCUSED(id, func)
	EVT_LIST_ITEM_MIDDLE_CLICK(id, func)
	EVT_LIST_ITEM_RIGHT_CLICK(id, func)
	EVT_LIST_KEY_DOWN(id, func)
	EVT_LIST_INSERT_ITEM(id, func)
	EVT_LIST_COL_CLICK(id, func)
	EVT_LIST_COL_RIGHT_CLICK(id, func)
	EVT_LIST_COL_BEGIN_DRAG(id, func)
	EVT_LIST_COL_DRAGGING(id, func)
	EVT_LIST_COL_END_DRAG(id, func)
	EVT_LIST_CACHE_HINT(id, func)
	class wxListEvent public wxNotifyEvent public wxCommandEvent public wxEvent public wxObject
		wxListEvent(WXTYPE commandType = 0, int id = 0)
		long GetCacheFrom() const
		long GetCacheTo() const
		int GetKeyCode() const
		long GetIndex() const
		int GetColumn() const
		wxPoint GetPoint() const
		const wxString& GetLabel() const
		const wxString& GetText() const
		int GetImage() const
		long GetData() const
		long GetMask() const
		const wxListItem& GetItem() const
		bool IsEditCancelled() const
<wx/listctrl.h>
	class wxListItem public wxObject
		wxListItem()
		void Clear()
		wxListColumnFormat GetAlign() const
		wxColour GetBackgroundColour() const
		int GetColumn() const
		long GetData() const
		wxFont GetFont() const
		long GetId() const
		int GetImage() const
		long GetMask() const
		long GetState() const
		const wxString& GetText() const
		wxColour GetTextColour() const
		int GetWidth() const
		void SetAlign(wxListColumnFormat align)
		void SetBackgroundColour(const wxColour& colBack)
		void SetColumn(int col)
		void SetData(long data)
		void SetData(void* data)
		void SetFont(const wxFont& font)
		void SetId(long id)
		void SetImage(int image)
		void SetMask(long mask)
		void SetState(long state)
		void SetStateMask(long stateMask)
		void SetText(const wxString& text)
		void SetTextColour(const wxColour& colText)
		void SetWidth(int width)
<wx/listctrl.h>
	class wxListItemAttr
		wxListItemAttr()
		wxListItemAttr(const wxColour colText, const wxColour colBack, const wxFont font)
		const wxColour& GetBackgroundColour() const
		const wxFont& GetFont() const
		const wxColour& GetTextColour() const
		bool HasBackgroundColour() const
		bool HasFont() const
		bool HasTextColour() const
		void SetBackgroundColour(const wxColour& colour)
		void SetFont(const wxFont& font)
		void SetTextColour(const wxColour& colour)
<wx/listctrl.h>
	class wxListView public wxListCtrl public wxControl public wxWindow public wxEvtHandler public wxObject
		void ClearColumnImage(int col)
		void Focus(long index)
		long GetFirstSelected() const
		long GetFocusedItem() const
		long GetNextSelected(long item) const
		bool IsSelected(long index) const
		void SetColumnImage(int col, int image)
<wx/intl.h>
	class wxLocale
		wxLocale()
		wxLocale(int language, int flags =wxLOCALE_LOAD_DEFAULT | wxLOCALE_CONV_ENCODING)
		wxLocale(const char *szName, const char *szShort = NULL, const char *szLocale = NULL, bool bLoadDefault = true, bool bConvertEncoding = false)
		~wxLocale()
		bool AddCatalog(const char *szDomain)
		bool AddCatalog(const char *szDomain, wxLanguagemsgIdLanguage, const char *msgIdCharset)
		void AddCatalogLookupPathPrefix(const wxString& prefix)
		static void AddLanguage(const wxLanguageInfo&amp; info)
		static wxLanguageInfo * FindLanguageInfo(const wxString& locale)
		wxString GetCanonicalName() const
		int GetLanguage() const
		static wxLanguageInfo * GetLanguageInfo(int lang) const
		static wxString GetLanguageName(int lang) const
		const char* GetLocale() const
		const wxString& GetName() const
		const char* GetString(const char *szOrigString, const char *szDomain = NULL) const
		const char* GetString(const char *szOrigString, const char *szOrigString2, size_t n, const char *szDomain = NULL) const
		wxString GetHeaderValue(const char *szHeader, const char *szDomain = NULL) const
		wxString GetSysName() const
		static wxFontEncoding GetSystemEncoding() const
		static wxString GetSystemEncodingName() const
		static int GetSystemLanguage() const
		bool Init(int language = wxLANGUAGE_DEFAULT, int flags =wxLOCALE_LOAD_DEFAULT | wxLOCALE_CONV_ENCODING)
		bool Init(const char *szName, const char *szShort = NULL, const char *szLocale = NULL, bool bLoadDefault = true, bool bConvertEncoding = false)
		static bool IsAvailable(int lang)
		bool IsLoaded(const char* domain) const
		bool IsOk() const
<wx/log.h>
	class wxLog
		static void AddTraceMask(const wxString& mask)
		static void ClearTraceMasks()
		static const wxArrayString & GetTraceMasks()
		static void OnLog(wxLogLevel level, const char * message)
		static wxLog * GetActiveTarget()
		static wxLog * SetActiveTarget(wxLog * logtarget)
		static void Suspend()
		static void Resume()
		virtual void DoLog(wxLogLevel level, const wxChar *msg, time_t timestamp)
		virtual void DoLogString(const wxChar *msg, time_t timestamp)
		static void DontCreateOnDemand()
		virtual void Flush()
		static void FlushActive()
		static void SetVerbose(bool verbose = true)
		static bool GetVerbose()
		static void SetLogLevel(wxLogLevel logLevel)
		static wxLogLevel GetLogLevel()
		static void SetRepetitionCounting(bool repetCounting = true)
		static bool GetRepetitionCounting()
		void SetTimestamp(const char * format)
		const char * GetTimestamp() const
		static void SetTraceMask(wxTraceMask mask)
		static bool IsAllowedTraceMask(const wxChar *mask)
		static void RemoveTraceMask(const wxString& mask)
<wx/log.h>
	class wxLogChain public wxLog
		wxLogChain(wxLog *logger)
		~wxLogChain()
		void DetachOldLog()
		wxLog * GetOldLog() const
		bool IsPassingMessages() const
		void PassMessages(bool passMessages)
		void SetLog(wxLog *logger)
<wx/log.h>
	class wxLogGui public wxLog
		wxLogGui()
<wx/log.h>
	class wxLogNull
		wxLogNull()
<wx/log.h>
	class wxLogPassThrough public wxLogChain
<wx/log.h>
	class wxLogStderr public wxLog
		wxLogStderr(FILE *fp = NULL)
<wx/log.h>
	class wxLogStream public wxLog
		wxLogStream(std::ostream *ostr = NULL)
<wx/log.h>
	class wxLogTextCtrl public wxLog
		wxLogTextCtrl(wxTextCtrl *textctrl)
<wx/log.h>
	class wxLogWindow public wxLogPassThrough
		wxLogWindow(wxFrame *parent, const wxChar *title, bool show = true, bool passToOld = true)
		void Show(bool show = true)
		wxFrame * GetFrame() const
		virtual void OnFrameCreate(wxFrame *frame)
		virtual bool OnFrameClose(wxFrame *frame)
		virtual void OnFrameDelete(wxFrame *frame)
<wx/longlong.h>
	class wxLongLong
		wxLongLong()
		wxLongLong(wxLongLong_t ll)
		wxLongLong(long hi, unsigned long lo)
		wxLongLong& operator operator=(wxLongLong_t ll)
		wxLongLong& operator operator=(wxULongLong_t ll)
		wxLongLong& operator operator=(long l)
		wxLongLong& operator operator=(unsigned long l)
		wxLongLong& operator operator=(const wxULongLong &amp; ll)
		wxLongLong Abs() const
		wxLongLong& Abs()
		wxLongLong& Assign(double d)
		long GetHi() const
		unsigned long GetLo() const
		wxLongLong_t GetValue() const
		double ToDouble() const
		long ToLong() const
		wxString ToString() const
		wxLongLong operator+(const wxLongLong& ll) const
		wxLongLong& operator+(const wxLongLong& ll)
		wxLongLong& operator++()
		wxLongLong& operator++(int)
		wxLongLong operator-() const
		wxLongLong operator-(const wxLongLong& ll) const
		wxLongLong& operator-(const wxLongLong& ll)
		wxLongLong& operator--()
		wxLongLong& operator--(int)
<wx/bitmap.h>
	class wxMask public wxObject
		wxMask()
		wxMask(const wxBitmap&amp; bitmap)
		wxMask(const wxBitmap&amp; bitmap, const wxColour&amp; colour)
		wxMask(const wxBitmap& bitmap, int index)
		~wxMask()
		bool Create(const wxBitmap& bitmap)
		bool Create(const wxBitmap& bitmap, const wxColour& colour)
		bool Create(const wxBitmap& bitmap, int index)
<wx/event.h>
	EVT_MAXIMIZE(func)
	class wxMaximizeEvent public wxEvent public wxObject
		wxMaximizeEvent(int id = 0)
<wx/strconv.h>
	class wxMBConv
		wxMBConv()
		virtual size_t MB2WC(wchar_t *out, const char *in, size_t outLen) const
		virtual size_t WC2MB(char* buf, const wchar_t* psz, size_t n) const
		const wxWCharBuffer cMB2WC(const char *in) const
		const wxWCharBuffer cMB2WC(const char *in, size_t inLen, size_t *outLen) const
		const wxCharBuffer cWC2MB(const wchar_t* in) const
		const wxCharBuffer cWC2MB(const wchar_t* in, size_t inLen, size_t *outLen) const
		const char* cMB2WX(const char* psz) const
		const wxWCharBuffer cMB2WX(const char* psz) const
		const char* cWX2MB(const wxChar* psz) const
		const wxCharBuffer cWX2MB(const wxChar* psz) const
		const wchar_t* cWC2WX(const wchar_t* psz) const
		const wxCharBuffer cWC2WX(const wchar_t* psz) const
		const wchar_t* cWX2WC(const wxChar* psz) const
		const wxWCharBuffer cWX2WC(const wxChar* psz) const
		virtual size_t FromWChar(char_t *dst, size_t dstLen, const wchar_t *src, size_t srcLen = wxNO_LEN) const
		const size_t GetMaxMBNulLen()
		size_t GetMBNulLen() const
		virtual size_t ToWChar(wchar_t *dst, size_t dstLen, const char_t *src, size_t srcLen = wxNO_LEN) const
<wx/strconv.h>
	class wxMBConvFile public wxMBConv
		size_t MB2WC(wchar_t* buf, const char* psz, size_t n) const
		size_t WC2MB(char* buf, const wchar_t* psz, size_t n) const
<wx/strconv.h>
	class wxMBConvUTF7 public wxMBConv
		size_t MB2WC(wchar_t* buf, const char* psz, size_t n) const
		size_t WC2MB(char* buf, const wchar_t* psz, size_t n) const
<wx/strconv.h>
	class wxMBConvUTF8 public wxMBConv
		size_t MB2WC(wchar_t* buf, const char* psz, size_t n) const
		size_t WC2MB(char* buf, const wchar_t* psz, size_t n) const
<wx/strconv.h>
	class wxMBConvUTF16 public wxMBConv
		size_t MB2WC(wchar_t* buf, const char* psz, size_t n) const
		size_t WC2MB(char* buf, const wchar_t* psz, size_t n) const
<wx/strconv.h>
	class wxMBConvUTF32 public wxMBConv
		size_t MB2WC(wchar_t* buf, const char* psz, size_t n) const
		size_t WC2MB(char* buf, const wchar_t* psz, size_t n) const
<wx/mdi.h>
	wxCAPTION
	wxDEFAULT_FRAME_STYLE
	wxICONIZE
	wxMAXIMIZE
	wxMAXIMIZE_BOX
	wxMINIMIZE
	wxMINIMIZE_BOX
	wxRESIZE_BORDER
	wxSTAY_ON_TOP
	wxSYSTEM_MENU
	wxTHICK_FRAME
	class wxMDIChildFrame public wxFrame public wxWindow public wxEvtHandler public wxObject
		wxMDIChildFrame()
		wxMDIChildFrame(wxMDIParentFrame* parent, wxWindowID id,const wxString& title, const wxPoint& pos = wxDefaultPosition,const wxSize& size = wxDefaultSize, long style = wxDEFAULT_FRAME_STYLE,const wxString& name = "frame")
		~wxMDIChildFrame()
		void Activate()
		bool Create(wxWindow* parent, wxWindowID id,const wxString& title, const wxPoint& pos = wxDefaultPosition,const wxSize& size = wxDefaultSize, long style = wxDEFAULT_FRAME_STYLE,const wxString& name = "frame")
		void Maximize(boolmaximize)
		void Restore()
<wx/mdi.h>
	class wxMDIClientWindow public wxWindow public wxEvtHandler public wxObject
		wxMDIClientWindow()
		wxMDIClientWindow(wxMDIParentFrame* parent, long style = 0)
		~wxMDIClientWindow()
		bool CreateClient(wxMDIParentFrame* parent, long style = 0)
<wx/mdi.h>
	wxCAPTION
	wxDEFAULT_FRAME_STYLE
	wxHSCROLL
	wxICONIZE
	wxMAXIMIZE
	wxMAXIMIZE_BOX
	wxMINIMIZE
	wxMINIMIZE_BOX
	wxRESIZE_BORDER
	wxSTAY_ON_TOP
	wxSYSTEM_MENU
	wxTHICK_FRAME
	wxVSCROLL
	wxFRAME_NO_WINDOW_MENU
	class wxMDIParentFrame public wxFrame public wxWindow public wxEvtHandler public wxObject
		wxMDIParentFrame()
		wxMDIParentFrame(wxWindow* parent, wxWindowID id,const wxString& title, const wxPoint& pos = wxDefaultPosition,const wxSize& size = wxDefaultSize, long style = wxDEFAULT_FRAME_STYLE | wxVSCROLL | wxHSCROLL,const wxString& name = "frame")
		~wxMDIParentFrame()
		void ActivateNext()
		void ActivatePrevious()
		void ArrangeIcons()
		void Cascade()
		bool Create(wxWindow* parent, wxWindowID id,const wxString& title, const wxPoint& pos = wxDefaultPosition,const wxSize& size = wxDefaultSize, long style = wxDEFAULT_FRAME_STYLE | wxVSCROLL | wxHSCROLL,const wxString& name = "frame")
		virtual void GetClientSize(int* width, int* height) const
		wxMDIChildFrame* GetActiveChild() const
		wxMDIClientWindow* GetClientWindow() const
		virtual wxWindow* GetToolBar() const
		wxMenu* GetWindowMenu() const
		virtual wxMDIClientWindow* OnCreateClient()
		virtual void SetToolBar(wxWindow* toolbar)
		void SetWindowMenu(wxMenu* menu)
		void Tile(wxOrientation orient = wxHORIZONTAL)
<wx/mediactrl.h>
	class wxMediaCtrl public wxControl
		wxMediaCtrl()
		wxSize GetBestSize()
		double GetPlaybackrate()
		double GetVolume()
		wxMediaCtrlState GetState()
		wxFileOffset Length()
		bool Load(const wxString& fileName)
		bool Load(const wxURI& uri)
		bool Load(const wxURI& uri, const wxURI& proxy)
		bool LoadURI(const wxURI& uri)
		bool LoadURIWithProxy(const wxURI& uri, const wxURI& proxy)
		bool Pause()
		bool Play()
		wxFileOffset Seek(wxFileOffset where, wxSeekMode mode)
		bool SetPlaybackRate(double dRate)
		bool SetVolume(double dVolume)
		bool ShowPlayerControls(wxMediaCtrlPlayerControls flags = wxMEDIACTRLPLAYERCONTROLS_DEFAULT)
		bool Stop()
		wxFileOffset Tell()
<wx/mediactrl.h>
	EVT_MEDIA_LOADED(id, func)
	EVT_MEDIA_STOP(id, func)
	EVT_MEDIA_FINISHED(id, func)
	EVT_MEDIA_STATECHANGED(id, func)
	EVT_MEDIA_PLAY(id, func)
	EVT_MEDIA_PAUSE(id, func)
	class wxMediaEvent public wxNotifyEvent
<wx/buffer.h>
	class wxMemoryBuffer
		wxMemoryBuffer(const wxMemoryBuffer& src)
		wxMemoryBuffer(size_t size)
		void* GetData()
		size_t GetBufSize()
		size_t GetDataLen()
		void SetBufSize(size_t size)
		void SetDataLen(size_t size)
		void * GetWriteBuf(size_t sizeNeeded)
		void UngetWriteBuf(size_t sizeUsed)
		void * GetAppendBuf(size_t sizeNeeded)
		void UngetAppendBuf(size_t sizeUsed)
		void AppendByte(char data)
		void AppendData(void* data, size_t len)
<wx/dcmemory.h>
	class wxMemoryDC public wxDC public wxObject
		wxMemoryDC()
		wxMemoryDC(wxBitmap& bitmap)
		void SelectObject(wxBitmap& bitmap)
		void SelectObjectAsSource(const wxBitmap& bitmap)
<wx/fs_mem.h>
	class wxMemoryFSHandler public wxFileSystemHandler
		wxMemoryFSHandler()
		static void AddFile(const wxString& filename, wxImage& image, long type)
		static void AddFile(const wxString& filename, const wxBitmap& bitmap, long type)
		static void AddFileWithMimeType(const wxString& filename, const wxString& textdata, const wxString& mimetype)
		static void AddFileWithMimeType(const wxString& filename, const void* binarydata, size_t size, const wxString& mimetype)
		static void RemoveFile(const wxString& filename)
<wx/mstream.h>
	class wxMemoryInputStream public wxInputStream
		wxMemoryInputStream(const char * data, size_t len)
		wxMemoryInputStream(const wxMemoryOutputStream&amp; stream)
		~wxMemoryInputStream()
		wxStreamBuffer * GetInputStreamBuffer() const
<wx/mstream.h>
	class wxMemoryOutputStream public wxOutputStream
		wxMemoryOutputStream(char * data = NULL, size_t length = 0)
		~wxMemoryOutputStream()
		size_t CopyTo(char *buffer, size_t len) const
		wxStreamBuffer * GetOutputStreamBuffer() const
<wx/menu.h>
	class wxMenu public wxEvtHandler public wxObject
		wxMenu(const wxString& title = "", long style = 0)
		wxMenu(long style)
		~wxMenu()
		wxMenuItem* Append(int id, const wxString& item = "", const wxString& helpString = "",wxItemKind kind = wxITEM_NORMAL)
		wxMenuItem* Append(int id, const wxString& item, wxMenu *subMenu,const wxString& helpString = "")
		wxMenuItem* Append(wxMenuItem* menuItem)
		wxMenuItem* AppendCheckItem(int id,const wxString& item, const wxString& helpString = "")
		wxMenuItem* AppendRadioItem(int id,const wxString& item, const wxString& helpString = "")
		wxMenuItem* AppendSeparator()
		wxMenuItem * AppendSubMenu(wxMenu *submenu, const wxString& text, const wxString& help = wxEmptyString)
		void Break()
		void Check(int id, const bool check)
		void Delete(int id)
		void Delete(wxMenuItem *item)
		void Destroy(int id)
		void Destroy(wxMenuItem *item)
		void Enable(int id, const bool enable)
		int FindItem(const wxString& itemString) const
		wxMenuItem * FindItem(int id, wxMenu **menu = NULL) const
		wxMenuItem* FindItemByPosition(size_t position) const
		wxString GetHelpString(int id) const
		wxString GetLabel(int id) const
		wxString GetLabelText(int id) const
		size_t GetMenuItemCount() const
		wxMenuItemList&amp; GetMenuItems() const
		wxString GetTitle() const
		wxMenuItem* Insert(size_t pos, wxMenuItem *item)
		wxMenuItem* Insert(size_t pos, int id,const wxString& item = "", const wxString& helpString = "",wxItemKind kind = wxITEM_NORMAL)
		wxMenuItem* InsertCheckItem(size_t pos, int id,const wxString& item, const wxString& helpString = "")
		wxMenuItem* InsertRadioItem(size_t pos, int id,const wxString& item, const wxString& helpString = "")
		wxMenuItem* InsertSeparator(size_t pos)
		bool IsChecked(int id) const
		bool IsEnabled(int id) const
		wxMenuItem* Prepend(wxMenuItem *item)
		wxMenuItem* Prepend(int id,const wxString& item = "", const wxString& helpString = "",wxItemKind kind = wxITEM_NORMAL)
		wxMenuItem* PrependCheckItem(int id,const wxString& item, const wxString& helpString = "")
		wxMenuItem* PrependRadioItem(int id,const wxString& item, const wxString& helpString = "")
		wxMenuItem* PrependSeparator()
		wxMenuItem * Remove(int id)
		wxMenuItem * Remove(wxMenuItem *item)
		void SetHelpString(int id, const wxString& helpString)
		void SetLabel(int id, const wxString& label)
		void SetTitle(const wxString& title)
		void UpdateUI(wxEvtHandler* source = NULL) const
<wx/menu.h>
	class wxMenuBar public wxWindow public wxEvtHandler public wxObject
		wxMenuBar(long style = 0)
		wxMenuBar(size_t n, wxMenu* menus[], const wxString titles[], long style = 0)
		void ~wxMenuBar()
		bool Append(wxMenu *menu, const wxString& title)
		void Check(int id, const bool check)
		void Enable(int id, const bool enable)
		void EnableTop(int pos, const bool enable)
		int FindMenu(const wxString& title) const
		int FindMenuItem(const wxString& menuString, const wxString& itemString) const
		wxMenuItem * FindItem(int id, wxMenu **menu = NULL) const
		wxString GetHelpString(int id) const
		wxString GetLabel(int id) const
		wxString GetLabelTop(int pos) const
		wxMenu* GetMenu(int menuIndex) const
		int GetMenuCount() const
		wxString GetMenuLabel(int pos) const
		wxString GetMenuLabelText(int pos) const
		bool Insert(size_t pos, wxMenu *menu, const wxString& title)
		bool IsChecked(int id) const
		bool IsEnabled(int id) const
		void Refresh()
		wxMenu * Remove(size_t pos)
		wxMenu * Replace(size_t pos, wxMenu *menu, const wxString& title)
		void SetHelpString(int id, const wxString& helpString)
		void SetLabel(int id, const wxString& label)
		void SetLabelTop(int pos, const wxString& label)
		void SetMenuLabel(int pos, const wxString& label)
<wx/event.h>
	EVT_MENU_OPEN(func)
	EVT_MENU_CLOSE(func)
	EVT_MENU_HIGHLIGHT(id, func)
	EVT_MENU_HIGHLIGHT_ALL(func)
	class wxMenuEvent public wxEvent public wxObject
		wxMenuEvent(WXTYPE id = 0, int id = 0, wxMenu* menu = NULL)
		wxMenu * GetMenu() const
		int GetMenuId() const
		bool IsPopup() const
<wx/menuitem.h>
	class wxMenuItem public wxObject
		wxMenuItem(wxMenu* parentMenu = NULL, int id = wxID_SEPARATOR,const wxString& text = "", const wxString& helpString = "",wxItemKind kind = wxITEM_NORMAL, wxMenu* subMenu = NULL)
		~wxMenuItem()
		void Check(bool check = true)
		void Enable(bool enable = true)
		wxColour& GetBackgroundColour() const
		wxBitmap& GetBitmap(bool checked = true) const
		wxFont& GetFont() const
		wxString GetHelp() const
		int GetId() const
		wxString GetItemLabel() const
		wxString GetItemLabelText() const
		wxItemKind GetKind() const
		wxString GetLabel() const
		static wxString GetLabelText(const wxString& text)
		static wxString GetLabelFromText(const wxString& text)
		int GetMarginWidth() const
		wxMenu* GetMenu() const
		wxString GetName() const
		wxString GetText() const
		wxMenu* GetSubMenu() const
		wxColour& GetTextColour() const
		bool IsCheckable() const
		bool IsChecked() const
		bool IsEnabled() const
		bool IsSeparator() const
		bool IsSubMenu() const
		void SetBackgroundColour(const wxColour& colour) const
		void SetBitmap(const wxBitmap& bmp)
		void SetBitmaps(const wxBitmap& checked,const wxBitmap& unchecked = wxNullBitmap)
		void SetFont(const wxFont& font)
		void SetHelp(const wxString& helpString)
		void SetItemLabel(const wxString& label)
		void SetMarginWidth(int width) const
		void SetMenu(const wxMenu*menu)
		void SetSubMenu(const wxMenu*menu)
		void SetText(const wxString& text)
		void SetTextColour(const wxColour& colour)
<wx/msgdlg.h>
	class wxMessageDialog public wxDialog public wxWindow public wxEvtHandler public wxObject
		wxMessageDialog(wxWindow* parent, const wxString& message,const wxString& caption = "Message box", long style = wxOK | wxCANCEL,const wxPoint& pos = wxDefaultPosition)
		~wxMessageDialog()
		int ShowModal()
<wx/metafile.h>
	class wxMetafile public wxObject
		wxMetafile(const wxString& filename = "")
		~wxMetafile()
		bool Ok()
		bool Play(wxDC *dc)
		bool SetClipboard(int width = 0, int height = 0)
<wx/metafile.h>
	class wxMetafileDC public wxDC public wxObject
		wxMetafileDC(const wxString& filename = "")
		~wxMetafileDC()
		wxMetafile * Close()
<wx/mimetype.h>
	class wxMimeTypesManager
		wxMimeTypesManager()
		~wxMimeTypesManager()
		void AddFallbacks(const wxFileTypeInfo *fallbacks)
		wxFileType* GetFileTypeFromExtension(const wxString& extension)
		wxFileType* GetFileTypeFromMimeType(const wxString& mimeType)
		bool IsOfType(const wxString& mimeType, const wxString& wildcard)
		bool ReadMailcap(const wxString& filename, bool fallback = false)
		bool ReadMimeTypes(const wxString& filename)
<wx/minifram.h>
	wxICONIZE
	wxCAPTION
	wxMINIMIZE
	wxMINIMIZE_BOX
	wxMAXIMIZE
	wxMAXIMIZE_BOX
	wxCLOSE_BOX
	wxSTAY_ON_TOP
	wxSYSTEM_MENU
	wxTINY_CAPTION_HORIZ
	wxTINY_CAPTION_VERT
	wxRESIZE_BORDER
	class wxMiniFrame public wxFrame public wxWindow public wxEvtHandler public wxObject
		wxMiniFrame()
		wxMiniFrame(wxWindow* parent, wxWindowID id,const wxString& title, const wxPoint& pos = wxDefaultPosition,const wxSize& size = wxDefaultSize, long style = wxCAPTION | wxRESIZE_BORDER,const wxString& name = "frame")
		void ~wxMiniFrame()
		bool Create(wxWindow* parent, wxWindowID id,const wxString& title, const wxPoint& pos = wxDefaultPosition,const wxSize& size = wxDefaultSize, long style = wxCAPTION | wxRESIZE_BORDER,const wxString& name = "frame")
<wx/dcmirror.h>
	class wxMirrorDC public wxDC
		wxMirrorDC(wxDC& dc, bool mirror)
<wx/module.h>
	class wxModule public wxObject
		wxModule()
		~wxModule()
		void AddDependency(wxClassInfo * dep)
		virtual void OnExit()
		virtual bool OnInit()
<wx/event.h>
	EVT_MOUSE_CAPTURE_CHANGED(func)
	class wxMouseCaptureChangedEvent public wxEvent public wxObject
		wxMouseCaptureChangedEvent(wxWindowID windowId = 0, wxWindow* gainedCapture = NULL)
		wxWindow* GetCapturedWindow() const
<wx/event.h>
	EVT_MOUSE_CAPTURE_LOST(func)
	class wxMouseCaptureLostEvent public wxEvent public wxObject
		wxMouseCaptureLostEvent(wxWindowID windowId = 0)
<wx/event.h>
	EVT_LEFT_DOWN(func)
	EVT_LEFT_UP(func)
	EVT_LEFT_DCLICK(func)
	EVT_MIDDLE_DOWN(func)
	EVT_MIDDLE_UP(func)
	EVT_MIDDLE_DCLICK(func)
	EVT_RIGHT_DOWN(func)
	EVT_RIGHT_UP(func)
	EVT_RIGHT_DCLICK(func)
	EVT_MOTION(func)
	EVT_ENTER_WINDOW(func)
	EVT_LEAVE_WINDOW(func)
	EVT_MOUSEWHEEL(func)
	EVT_MOUSE_EVENTS(func)
	class wxMouseEvent public wxEvent
		wxMouseEvent(WXTYPE mouseEventType = 0)
		bool AltDown()
		bool Button(int button)
		bool ButtonDClick(int but = wxMOUSE_BTN_ANY)
		bool ButtonDown(int but = -1)
		bool ButtonUp(int but = -1)
		bool CmdDown() const
		bool ControlDown()
		bool Dragging()
		bool Entering()
		int GetButton() const
		wxPoint GetPosition() const
		void GetPosition(wxCoord* x, wxCoord* y) const
		void GetPosition(long* x, long* y) const
		wxPoint GetLogicalPosition(const wxDC& dc) const
		int GetLinesPerAction() const
		int GetWheelRotation() const
		int GetWheelDelta() const
		long GetX() const
		long GetY()
		bool IsButton() const
		bool IsPageScroll() const
		bool Leaving() const
		bool LeftDClick() const
		bool LeftDown() const
		bool LeftIsDown() const
		bool LeftUp() const
		bool MetaDown() const
		bool MiddleDClick() const
		bool MiddleDown() const
		bool MiddleIsDown() const
		bool MiddleUp() const
		bool Moving() const
		bool RightDClick() const
		bool RightDown() const
		bool RightIsDown() const
		bool RightUp() const
		bool ShiftDown() const
<wx/event.h>
	EVT_MOVE(func)
	class wxMoveEvent public wxEvent public wxObject
		wxMoveEvent(const wxPoint& pt, int id = 0)
		wxPoint GetPosition() const
<wx/choicdlg.h>
	class wxMultiChoiceDialog public wxDialog public wxWindow public wxEvtHandler public wxObject
		wxMultiChoiceDialog(wxWindow* parent, const wxString& message,const wxString& caption, int n, const wxString* choices, long style = wxCHOICEDLG_STYLE,const wxPoint& pos = wxDefaultPosition)
		wxMultiChoiceDialog(wxWindow* parent, const wxString& message,const wxString& caption, const wxArrayString& choices, long style = wxCHOICEDLG_STYLE,const wxPoint& pos = wxDefaultPosition)
		wxArrayInt GetSelections() const
		void SetSelections(const wxArrayInt&amp; selections) const
		int ShowModal()
<wx/thread.h>
	class wxMutex
		wxMutex(wxMutexType type = wxMUTEX_DEFAULT)
		~wxMutex()
		wxMutexError Lock()
		wxMutexError TryLock()
		wxMutexError Unlock()
<wx/thread.h>
	class wxMutexLocker
		wxMutexLocker(wxMutex& mutex)
		~wxMutexLocker()
		bool IsOk() const
<wx/list.h>
	class wxNode
		T * GetData() const
		wxNode<T> * GetNext() const
		wxNode<T> * GetPrevious()
		void SetData(T *data)
		int IndexOf()
<wx/notebook.h>
	wxNB_TOP
	wxNB_LEFT
	wxNB_RIGHT
	wxNB_BOTTOM
	wxNB_FIXEDWIDTH
	wxNB_MULTILINE
	wxNB_NOPAGETHEME
	wxNB_FLAT
	EVT_NOTEBOOK_PAGE_CHANGED(id, func)
	EVT_NOTEBOOK_PAGE_CHANGING(id, func)
	class wxNotebook public wxControl public wxWindow public wxEvtHandler public wxObject
		wxNotebook()
		wxNotebook(wxWindow* parent, wxWindowID id, const wxPoint& pos = wxDefaultPosition,const wxSize& size = wxDefaultSize, long style = 0, const wxString& name = wxNotebookNameStr)
		~wxNotebook()
		bool AddPage(wxNotebookPage* page,const wxString& text,bool select = false,int imageId = -1)
		void AdvanceSelection(bool forward = true)
		void AssignImageList(wxImageList* imageList)
		int ChangeSelection(size_t page)
		bool Create(wxWindow* parent, wxWindowID id, const wxPoint& pos = wxDefaultPosition,const wxSize& size, long style = 0, const wxString& name = wxNotebookNameStr)
		bool DeleteAllPages()
		bool DeletePage(size_t page)
		wxWindow * GetCurrentPage() const
		wxImageList* GetImageList() const
		wxNotebookPage* GetPage(size_t page)
		size_t GetPageCount() const
		int GetPageImage(size_t nPage) const
		wxString GetPageText(size_t nPage) const
		int GetRowCount() const
		int GetSelection() const
		wxColour GetThemeBackgroundColour() const
		int HitTest(const wxPoint& pt, long *flags = NULL)
		bool InsertPage(size_t index, wxNotebookPage* page,const wxString& text,bool select = false,int imageId = -1)
		void OnSelChange(wxNotebookEvent& event)
		bool RemovePage(size_t page)
		void SetImageList(wxImageList* imageList)
		void SetPadding(const wxSize& padding)
		void SetPageSize(const wxSize& size)
		bool SetPageImage(size_t page, int image)
		bool SetPageText(size_t page, const wxString& text)
		int SetSelection(size_t page)
<wx/notebook.h>
	EVT_NOTEBOOK_PAGE_CHANGED(id, func)
	EVT_NOTEBOOK_PAGE_CHANGING(id, func)
	class wxNotebookEvent public wxNotifyEvent public wxCommandEvent public wxEvent public wxObject
		wxNotebookEvent(wxEventType eventType = wxEVT_NULL,int id = 0, int sel = -1, int oldSel = -1)
		int GetOldSelection() const
		int GetSelection() const
		void SetOldSelection(int page)
		void SetSelection(int page)
<wx/sizer.h>
	class wxNotebookSizer public wxSizer public wxObject
		wxNotebookSizer(wxNotebook* notebook)
		wxNotebook* GetNotebook()
<wx/event.h>
	class wxNotifyEvent public wxCommandEvent public wxEvent public wxEvtHandler public wxObject
		wxNotifyEvent(wxEventType eventType = wxEVT_NULL, int id = 0)
		void Allow()
		bool IsAllowed() const
		void Veto()
	class wxObject
		wxObject()
		wxObject(const wxObject& other)
		wxObject()
		void Dump(ostream&amp; stream)
		wxClassInfo * GetClassInfo()
		wxObjectRefData* GetRefData() const
		bool IsKindOf(wxClassInfo *info)
		bool IsSameAs(const wxObject& obj)
		void Ref(const wxObject& clone)
		void SetRefData(wxObjectRefData* data)
		void UnRef()
		void UnShare()
		void * new(size_t size, const wxString& filename = NULL, int lineNum = 0)
		void delete(void buf)
	class wxObjectRefData
		wxObjectRefData()
		wxObjectRefData()
		int GetRefCount() const
<odcombo.h>
	wxODCB_DCLICK_CYCLES
	wxODCB_STD_CONTROL_PAINT
	EVT_COMBOBOX(id, func)
	class wxOwnerDrawnComboBox public wxComboCtrl public wxControlWithItems public wxControl public wxWindow public wxEvtHandler public wxObject
		wxOwnerDrawnComboBox()
		wxOwnerDrawnComboBox(wxWindow* parent, wxWindowID id,const wxString& value = "", const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize,int n = 0, const wxString choices[] = NULL,long style = 0, const wxValidator& validator = wxDefaultValidator, const wxString& name = "comboBox")
		wxOwnerDrawnComboBox(wxWindow* parent, wxWindowID id,const wxString& value, const wxPoint& pos, const wxSize& size,const wxArrayString& choices,long style = 0, const wxValidator& validator = wxDefaultValidator, const wxString& name = "comboBox")
		~wxOwnerDrawnComboBox()
		bool Create(wxWindow* parent, wxWindowID id,const wxString& value = "", const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize,int n, const wxString choices[],long style = 0, const wxValidator& validator = wxDefaultValidator, const wxString& name = "comboBox")
		bool Create(wxWindow* parent, wxWindowID id,const wxString& value, const wxPoint& pos, const wxSize& size,const wxArrayString& choices,long style = 0, const wxValidator& validator = wxDefaultValidator, const wxString& name = "comboBox")
		int GetWidestItem() const
		int GetWidestItemWidth() const
		void OnDrawBackground(wxDC& dc, const wxRect& rect, int item, int flags) const
		void OnDrawItem(wxDC& dc, const wxRect& rect, int item, int flags) const
		wxCoord OnMeasureItem(size_t item) const
		wxCoord OnMeasureItemWidth(size_t item) const
<wx/stream.h>
	class wxOutputStream public wxStreamBase
		wxOutputStream()
		~wxOutputStream()
		bool Close()
		size_t LastWrite() const
		void PutC(char c)
		off_t SeekO(off_t pos, wxSeekMode mode = wxFromStart)
		off_t TellO() const
		wxOutputStream& Write(const void *buffer, size_t size)
		wxOutputStream& Write(wxInputStream& stream_in)
<wx/printdlg.h>
	class wxPageSetupDialog public wxDialog public wxWindow public wxEvtHandler public wxObject
		wxPageSetupDialog(wxWindow* parent, wxPageSetupDialogData* data = NULL)
		~wxPageSetupDialog()
		wxPageSetupDialogData& GetPageSetupData()
		int ShowModal()
<wx/cmndata.h>
	class wxPageSetupDialogData public wxObject
		wxPageSetupDialogData()
		wxPageSetupDialogData(wxPageSetupDialogData& data)
		wxPageSetupDialogData(wxPrintData& printData)
		~wxPageSetupDialogData()
		void EnableHelp(bool flag)
		void EnableMargins(bool flag)
		void EnableOrientation(bool flag)
		void EnablePaper(bool flag)
		void EnablePrinter(bool flag)
		bool GetDefaultMinMargins() const
		bool GetEnableMargins() const
		bool GetEnableOrientation() const
		bool GetEnablePaper() const
		bool GetEnablePrinter() const
		bool GetEnableHelp() const
		bool GetDefaultInfo() const
		wxPoint GetMarginTopLeft() const
		wxPoint GetMarginBottomRight() const
		wxPoint GetMinMarginTopLeft() const
		wxPoint GetMinMarginBottomRight() const
		wxPaperSize GetPaperId() const
		wxSize GetPaperSize() const
		wxPrintData& GetPrintData()
		bool IsOk() const
		void SetDefaultInfo(bool flag)
		void SetDefaultMinMargins(bool flag)
		void SetMarginTopLeft(const wxPoint& pt)
		void SetMarginBottomRight(const wxPoint& pt)
		void SetMinMarginTopLeft(const wxPoint& pt)
		void SetMinMarginBottomRight(const wxPoint& pt)
		void SetPaperId(wxPaperSize&amp; id)
		void SetPaperSize(const wxSize& size)
		void SetPrintData(const wxPrintData& printData)
		void operator =(const wxPrintData& data)
		void operator =(const wxPageSetupDialogData& data)
<wx/dcclient.h>
	class wxPaintDC public wxWindowDC public wxDC
		wxPaintDC(wxWindow* window)
<wx/event.h>
	EVT_PAINT(func)
	class wxPaintEvent public wxEvent public wxObject
		wxPaintEvent(int id = 0)
<wx/palette.h>
	class wxPalette public wxGDIObject public wxObject
		wxPalette()
		wxPalette(const wxPalette& palette)
		wxPalette(int n, const unsigned char* red,const unsigned char* green, const unsigned char* blue)
		~wxPalette()
		bool Create(int n, const unsigned char* red,const unsigned char* green, const unsigned char* blue)
		int GetColoursCount() const
		int GetPixel(unsigned char red, unsigned char green,unsigned char blue) const
		bool GetRGB(int pixel, const unsigned char* red, const unsigned char* green,const unsigned char* blue) const
		bool IsOk() const
		wxPalette& operator =(const wxPalette& palette)
<wx/panel.h>
	class wxPanel public wxWindow public wxEvtHandler public wxObject
		wxPanel()
		wxPanel(wxWindow* parent, wxWindowID id = wxID_ANY,const wxPoint& pos = wxDefaultPosition,const wxSize& size = wxDefaultSize,long style = wxTAB_TRAVERSAL,const wxString& name = "panel")
		~wxPanel()
		bool Create(wxWindow* parent, wxWindowID id = wxID_ANY,const wxPoint& pos = wxDefaultPosition,const wxSize& size = wxDefaultSize,long style = wxTAB_TRAVERSAL,const wxString& name = "panel")
		void InitDialog()
		void OnSysColourChanged(wxSysColourChangedEvent& event)
		virtual void SetFocus()
		virtual void SetFocusIgnoringChildren()
<wx/textdlg.h>
	class wxPasswordEntryDialog public wxTextEntryDialog public wxDialog public wxWindow public wxEvtHandler public wxObject
		wxPasswordEntryDialog(wxWindow* parent, const wxString& message,const wxString& caption = "Enter password", const wxString& defaultValue = "", long style = wxOK | wxCANCEL | wxCENTRE, const wxPoint& pos = wxDefaultPosition)
<wx/filefn.h>
	class wxPathList public wxArrayString
		wxPathList()
		wxPathList(const wxArrayString& arr)
		void AddEnvList(const wxString& env_variable)
		bool Add(const wxString& path)
		void Add(const wxArrayString& arr)
		bool EnsureFileAccessible(const wxString& filename)
		wxString FindAbsoluteValidPath(const wxString& file) const
		wxString FindValidPath(const wxString& file) const
<wx/pen.h>
	class wxPen public wxGDIObject public wxObject
		wxPen()
		wxPen(const wxColour& colour, int width = 1, int style = wxSOLID)
		wxPen(const wxString& colourName, int width, int style)
		wxPen(const wxBitmap& stipple, int width)
		wxPen(const wxPen& pen)
		~wxPen()
		int GetCap() const
		wxColour& GetColour() const
		int GetDashes(wxDash** dashes) const
		int GetJoin() const
		wxBitmap* GetStipple() const
		int GetStyle() const
		int GetWidth() const
		bool IsOk() const
		void SetCap(int capStyle)
		void SetColour(wxColour& colour)
		void SetColour(const wxString& colourName)
		void SetColour(unsigned char red, unsigned char green, unsigned char blue)
		void SetDashes(int n, wxDash* dashes)
		void SetJoin(int join_style)
		void SetStipple(wxBitmap* stipple)
		void SetStyle(int style)
		void SetWidth(int width)
		wxPen& operator =(const wxPen& pen)
		bool operator ==(const wxPen& pen)
		bool operator !=(const wxPen& pen)
	class wxPenList
		void wxPenList()
		wxPen* FindOrCreatePen(const wxColour& colour, int width, int style)
		wxPen* FindOrCreatePen(const wxString& colourName, int width, int style)
<wx/pickerbase.h>
	wxPB_USE_TEXTCTRL
	class wxPickerBase public wxControl public wxWindow public wxEvtHandler public wxObject
		void SetInternalMargin(intmargin)
		int GetInternalMargin() const
		void SetTextCtrlProportion(intprop)
		void SetPickerCtrlProportion(intprop)
		int GetTextCtrlProportion() const
		int GetPickerCtrlProportion() const
		bool HasTextCtrl() const
		wxTextCtrl * GetTextCtrl()
		bool IsTextCtrlGrowable() const
		void SetPickerCtrlGrowable(bool grow = true)
		void SetTextCtrlGrowable(bool grow = true)
		bool IsPickerCtrlGrowable() const
<wx/platinfo.h>
	class wxPlatformInfo public wxObject
		wxPlatformInfo()
		wxPlatformInfo(wxPortId pid = wxPORT_UNKNOWN, int tkMajor = -1, int tkMinor = -1, wxOperatingSystemId id = wxOS_UNKNOWN, int osMajor = -1, int osMinor = -1, wxArchitecture arch = wxARCH_INVALID, wxEndianness endian = wxENDIAN_INVALID)
		bool CheckOSVersion(int major, int minor) const
		bool CheckToolkitVersion(int major, int minor) const
		static const wxPlatformInfo& Get()
		static wxArchitecture GetArch(const wxString& arch)
		static wxString GetArchName(wxArchitecture arch)
		wxString GetArchName() const
		wxArchitecture GetArchitecture() const
		static wxEndianness GetEndianness(const wxString& end)
		wxEndianness GetEndianness() const
		static wxString GetEndiannessName(wxEndianness end)
		wxString GetEndiannessName() const
		int GetOSMajorVersion() const
		int GetOSMinorVersion() const
		static wxString GetOperatingSystemFamilyName(wxOperatingSystemId os)
		wxString GetOperatingSystemFamilyName() const
		static wxOperatingSystemId GetOperatingSystemId(const wxString& name)
		wxOperatingSystemId GetOperatingSystemId() const
		static wxString GetOperatingSystemIdName(wxOperatingSystemId os)
		wxString GetOperatingSystemIdName() const
		static wxPortId GetPortId(const wxString& portname)
		wxPortId GetPortId() const
		static wxString GetPortIdName(wxPortId port, bool usingUniversal)
		wxString GetPortIdName() const
		static wxString GetPortIdShortName(wxPortId port, bool usingUniversal)
		wxString GetPortIdShortName() const
		int GetToolkitMajorVersion() const
		int GetToolkitMinorVersion() const
		bool IsOk() const
		bool IsUsingUniversalWidgets() const
		void SetArchitecture(wxArchitecture n)
		void SetEndianness(wxEndianness n)
		void SetOSVersion(int major, int minor)
		void SetOperatingSystemId(wxOperatingSystemId n)
		void SetPortId(wxPortId n)
		void SetToolkitVersion(int major, int minor)
		bool operator!=(const wxPlatformInfo& t) const
		bool operator==(const wxPlatformInfo& t) const
<wx/gdicmn.h>
	class wxPoint
		wxPoint()
		wxPoint(int x, int y)
		void operator =(const wxPoint& pt)
		bool operator ==(const wxPoint& pt)
		bool operator !=(const wxPoint& pt)
		wxPoint operator +(const wxPoint& pt)
		wxPoint operator -(const wxPoint& pt)
		wxPoint& operator +=(const wxPoint& pt)
		wxPoint& operator -=(const wxPoint& pt)
		wxPoint operator +(const wxSize& sz)
		wxPoint operator -(const wxSize& sz)
		wxPoint& operator +=(const wxSize& sz)
		wxPoint& operator -=(const wxSize& sz)Operators for sum and subtraction between a wxPoint object and awxSize object.
<wx/dcps.h>
	class wxPostScriptDC public wxDC public wxObject
		wxPostScriptDC(const wxPrintData& printData)
		wxPostScriptDC(const wxString& output, bool interactive = true,wxWindow *parent)
		static void SetResolution(int ppi)
		static int GetResolution()
	EVT_POWER_SUSPENDING(func)
	EVT_POWER_SUSPENDED(func)
	EVT_POWER_SUSPEND_CANCEL(func)
	EVT_POWER_RESUME(func)
<wx/power.h>
	class wxPowerEvent public wxEvent public wxObject
		void Veto()
<wx/print.h>
	class wxPreviewCanvas public wxScrolledWindow public wxWindow public wxevthandler public wxObject
		wxPreviewCanvas(wxPrintPreview* preview, wxWindow* parent,const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize,long style = 0, const wxString& name = "canvas")
		~wxPreviewCanvas()
		void OnPaint(wxPaintEvent& event)
<wx/print.h>
	class wxPreviewControlBar public wxPanel public wxWindow public wxEvtHandler public wxObject
		wxPreviewControlBar(wxPrintPreview* preview, long buttons, wxWindow* parent,const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize,long style = 0, const wxString& name = "panel")
		~wxPreviewControlBar()
		void CreateButtons()
		wxPrintPreview * GetPrintPreview()
		int GetZoomControl()
		void SetZoomControl(int percent)
<wx/print.h>
	class wxPreviewFrame public wxFrame public wxWindow public wxEvtHandler public wxObject
		wxPreviewFrame(wxPrintPreview* preview, wxWindow* parent, const wxString& title,const wxPoint& pos = wxDefaultPosition, const wxSize& size size = wxDefaultSize,long style = wxDEFAULT_FRAME_STYLE, const wxString& name = "frame")
		~wxPreviewFrame()
		void CreateControlBar()
		void CreateCanvas()
		void Initialize()
		void OnCloseWindow(wxCloseEvent& event)
<wx/cmndata.h>
	class wxPrintData public wxObject
		wxPrintData()
		wxPrintData(const wxPrintData& data)
		~wxPrintData()
		bool GetCollate() const
		wxPrintBin GetBin() const
		bool GetColour() const
		wxDuplexMode GetDuplex() const
		int GetNoCopies() const
		int GetOrientation() const
		wxPaperSize GetPaperId() const
		const wxString& GetPrinterName() const
		wxPrintQuality GetQuality() const
		bool IsOk() const
		void SetBin(wxPrintBin flag)
		void SetCollate(bool flag)
		void SetColour(bool flag)
		void SetDuplex(wxDuplexMode mode)
		void SetNoCopies(int n)
		void SetOrientation(int orientation)
		void SetPaperId(wxPaperSize paperId)
		void SetPrinterName(const wxString& printerName)
		void SetQuality(wxPrintQuality quality)
		void operator =(const wxPrintData& data)
		void operator =(const wxPrintSetupData&amp; data)
<wx/printdlg.h>
	class wxPrintDialog public wxDialog public wxWindow public wxEvtHandler public wxObject
		wxPrintDialog(wxWindow* parent, wxPrintDialogData* data = NULL)
		~wxPrintDialog()
		wxPrintDialogData& GetPrintDialogData()
		wxDC* GetPrintDC()
		int ShowModal()
<wx/cmndata.h>
	class wxPrintDialogData public wxObject
		wxPrintDialogData()
		wxPrintDialogData(wxPrintDialogData& dialogData)
		wxPrintDialogData(wxPrintData& printData)
		~wxPrintDialogData()
		void EnableHelp(bool flag)
		void EnablePageNumbers(bool flag)
		void EnablePrintToFile(bool flag)
		void EnableSelection(bool flag)
		bool GetAllPages() const
		bool GetCollate() const
		int GetFromPage() const
		int GetMaxPage() const
		int GetMinPage() const
		int GetNoCopies() const
		wxPrintData& GetPrintData()
		bool GetPrintToFile() const
		bool GetSelection() const
		int GetToPage() const
		bool IsOk() const
		void SetCollate(bool flag)
		void SetFromPage(int page)
		void SetMaxPage(int page)
		void SetMinPage(int page)
		void SetNoCopies(int n)
		void SetPrintData(const wxPrintData& printData)
		void SetPrintToFile(bool flag)
		void SetSelection(bool flag)
		void SetSetupDialog(bool flag)
		void SetToPage(int page)
		void operator =(const wxPrintData& data)
		void operator =(const wxPrintDialogData& data)
<wx/print.h>
	class wxPrinter public wxObject
		wxPrinter(wxPrintDialogData* data = NULL)
		void CreateAbortWindow(wxWindow* parent, wxPrintout* printout)
		bool GetAbort()
		static wxPrinterError GetLastError()
		wxPrintDialogData& GetPrintDialogData()
		bool Print(wxWindow *parent, wxPrintout *printout, bool prompt=true)
		wxDC* PrintDialog(wxWindow *parent)
		void ReportError(wxWindow *parent, wxPrintout *printout, const wxString& message)
		bool Setup(wxWindow *parent)
<wx/dcprint.h>
	class wxPrinterDC public wxDC public wxObject
		wxPrinterDC(const wxPrintData& printData)
		wxPrinterDC(const wxString& driver, const wxString& device, const wxString& output,const bool interactive = true, int orientation = wxPORTRAIT)
		wxRect wxPrinterDC::GetPaperRect()
<wx/print.h>
	class wxPrintout public wxObject
		wxPrintout(const wxString& title = "Printout")
		~wxPrintout()
		wxDC * GetDC()
		void GetPageInfo(int *minPage, int *maxPage, int *pageFrom, int *pageTo)
		void GetPageSizeMM(int *w, int *h)
		void GetPageSizePixels(int *w, int *h)
		wxRect GetPaperRectPixels()
		void GetPPIPrinter(int *w, int *h)
		void GetPPIScreen(int *w, int *h)
		wxString GetTitle()
		bool HasPage(int pageNum)
		bool IsPreview()
		void FitThisSizeToPaper(const wxSize& imageSize)
		void FitThisSizeToPage(const wxSize& imageSize)
		void FitThisSizeToPageMargins(const wxSize& imageSize, const wxPageSetupDialogData& pageSetupData)
		void MapScreenSizeToPaper()
		void MapScreenSizeToPage()
		void MapScreenSizeToPageMargins(const wxPageSetupDialogData& pageSetupData)
		void MapScreenSizeToDevice()
		wxRect GetLogicalPaperRect()
		wxRect GetLogicalPageRect()
		wxRect GetLogicalPageMarginsRect(const wxPageSetupDialogData& pageSetupData)
		void SetLogicalOrigin(wxCoord x, wxCoord y)
		void OffsetLogicalOrigin(wxCoord xoff, wxCoord yoff)
		bool OnBeginDocument(int startPage, int endPage)
		void OnEndDocument()
		void OnBeginPrinting()
		void OnEndPrinting()
		void OnPreparePrinting()
		bool OnPrintPage(int pageNum)
<wx/print.h>
	class wxPrintPreview public wxObject
		wxPrintPreview(wxPrintout* printout, wxPrintout* printoutForPrinting,wxPrintData* data=NULL)
		~wxPrinter()
		wxPreviewCanvas* GetCanvas()
		int GetCurrentPage()
		wxFrame * GetFrame()
		int GetMaxPage()
		int GetMinPage()
		wxPrintout * GetPrintout()
		wxPrintout * GetPrintoutForPrinting()
		bool Ok()
		bool PaintPage(wxPreviewCanvas *canvas, wxDCdc)
		bool Print(bool prompt)
		bool RenderPage(int pageNum)
		void SetCanvas(wxPreviewCanvas* window)
		void SetCurrentPage(int pageNum)
		void SetFrame(wxFrame *frame)
		void SetPrintout(wxPrintout *printout)
		void SetZoom(int percent)
<wx/process.h>
	class wxProcess public wxEvtHandler
		wxProcess(wxEvtHandler * parent = NULL, int id = -1)
		wxProcess(int flags)
		~wxProcess()
		void CloseOutput()
		void Detach()
		wxInputStream* GetErrorStream() const
		wxInputStream* GetInputStream() const
		wxOutputStream* GetOutputStream() const
		bool IsErrorAvailable() const
		bool IsInputAvailable() const
		bool IsInputOpened() const
		static wxKillError Kill(int pid, wxSignal signal = wxSIGNONE, int flags = wxKILL_NOCHILDREN)
		static bool Exists(int pid)
		void OnTerminate(int pid, int status)
		static wxProcess * Open(const wxString& cmd, int flags = wxEXEC_ASYNC)
		long GetPid() const
		void Redirect()
<wx/process.h>
	EVT_END_PROCESS(id, func)
	class wxProcessEvent public wxEvent public wxObject
		wxProcessEvent(int id = 0, int pid = 0, int exitcode = 0)
		int GetPid() const
		int GetExitCode()
<wx/progdlg.h>
	wxPD_APP_MODAL
	wxPD_AUTO_HIDE
	wxPD_SMOOTH
	wxPD_CAN_ABORT
	wxPD_CAN_SKIP
	wxPD_ELAPSED_TIME
	wxPD_ESTIMATED_TIME
	wxPD_REMAINING_TIME
	class wxProgressDialog public wxDialog public wxWindow public wxEvtHandler public wxObject
		wxProgressDialog(const wxString& title, const wxString& message,int maximum = 100, wxWindow * parent = NULL,int style = wxPD_AUTO_HIDE | wxPD_APP_MODAL)
		~wxProgressDialog()
		void Resume()
		virtual bool Update(int value, const wxString& newmsg = "",bool *skip = NULL)
		virtual bool Pulse(const wxString& newmsg = "",bool *skip = NULL)
<wx/propdlg.h>
	class wxPropertySheetDialog public wxDialog public wxWindow public wxEvtHandler public wxObject
		wxPropertySheetDialog(wxWindow* parent, wxWindowID id,const wxString& title,const wxPoint& pos = wxDefaultPosition,const wxSize& size = wxDefaultSize,long style = wxDEFAULT_DIALOG_STYLE,const wxString& name = "dialogBox")
		virtual void AddBookCtrl(wxSizer* sizer)
		bool Create(wxWindow* parent, wxWindowID id,const wxString& title,const wxPoint& pos = wxDefaultPosition,const wxSize& size = wxDefaultSize,long style = wxDEFAULT_DIALOG_STYLE,const wxString& name = "dialogBox")
		virtual wxBookCtrlBase* CreateBookCtrl()
		void CreateButtons(int flags=wxOK|wxCANCEL)
		wxBookCtrlBase* GetBookCtrl() const
		wxSizer* GetInnerSizer() const
		long GetSheetStyle() const
		void LayoutDialog(int centreFlags=wxBOTH)
		void SetBookCtrl(wxBookCtrlBase* bookCtrl)
		void SetInnerSizer(wxSizer* sizer)
		void SetSheetStyle(long style)
<wx/protocol/protocol.h>
	class wxProtocol public wxSocketClient public wxSocketBase public wxObject
		bool Reconnect()
		wxInputStream * GetInputStream(const wxString& path)
		bool Abort()
		wxProtocolError GetError()
		wxString GetContentType()
		void SetUser(const wxString& user)
		void SetPassword(const wxString& user)
<wx/quantize.h>
	class wxQuantize public wxObject
		wxQuantize()
		bool Quantize(const wxImage& src, wxImage& dest, wxPalette** pPalette, int desiredNoColours = 236, unsigned char** eightBitData = 0, int flags = wxQUANTIZE_INCLUDE_WINDOWS_COLOURS|wxQUANTIZE_FILL_DESTINATION_IMAGE|wxQUANTIZE_RETURN_8BIT_DATA)
		bool Quantize(const wxImage& src, wxImage& dest, int desiredNoColours = 236, unsigned char** eightBitData = 0, int flags = wxQUANTIZE_INCLUDE_WINDOWS_COLOURS|wxQUANTIZE_FILL_DESTINATION_IMAGE|wxQUANTIZE_RETURN_8BIT_DATA)
		void DoQuantize(unsigned w, unsigned h, unsigned char** in_rows, unsigned char** out_rows, unsigned char* palette, int desiredNoColours)
<wx/laywin.h>
	EVT_QUERY_LAYOUT_INFO(func)
	class wxQueryLayoutInfoEvent public wxEvent public wxObject
		wxQueryLayoutInfoEvent(wxWindowID id = 0)
		void GetAlignment() const
		int GetFlags() const
		wxLayoutOrientation GetOrientation() const
		int GetRequestedLength() const
		wxSize GetSize() const
		void SetAlignment(wxLayoutAlignment alignment)
		void SetFlags(int flags)
		void SetOrientation(wxLayoutOrientation orientation)
		void SetRequestedLength(int length)
		void SetSize(const wxSize& size)
<wx/radiobox.h>
	wxRA_SPECIFY_ROWS
	wxRA_SPECIFY_COLS
	wxRA_USE_CHECKBOX
	EVT_RADIOBOX(id, func)
	class wxRadioBox public wxControlWithItems public wxControl public wxWindow public wxEvtHandler public wxObject
		wxRadioBox()
		wxRadioBox(wxWindow* parent, wxWindowID id, const wxString& label,const wxPoint& point = wxDefaultPosition, const wxSize& size = wxDefaultSize,int n = 0, const wxString choices[] = NULL,int majorDimension = 0, long style = wxRA_SPECIFY_COLS,const wxValidator& validator = wxDefaultValidator,const wxString& name = "radioBox")
		wxRadioBox(wxWindow* parent, wxWindowID id, const wxString& label,const wxPoint& point, const wxSize& size,const wxArrayString& choices,int majorDimension = 0, long style = wxRA_SPECIFY_COLS,const wxValidator& validator = wxDefaultValidator,const wxString& name = "radioBox")
		~wxRadioBox()
		bool Create(wxWindow* parent, wxWindowID id, const wxString& label,const wxPoint& point = wxDefaultPosition, const wxSize& size = wxDefaultSize,int n = 0, const wxString choices[] = NULL,int majorDimension = 0, long style = wxRA_SPECIFY_COLS,const wxValidator& validator = wxDefaultValidator,const wxString& name = "radioBox")
		bool Create(wxWindow* parent, wxWindowID id, const wxString& label,const wxPoint& point, const wxSize& size,const wxArrayString& choices,int majorDimension = 0, long style = wxRA_SPECIFY_COLS,const wxValidator& validator = wxDefaultValidator,const wxString& name = "radioBox")
		virtual bool Enable(bool enable = true)
		virtual bool Enable(unsigned int n, bool enable = true)
		int FindString(const wxString& string) const
		unsigned int GetColumnCount() const
		wxString GetItemHelpText(unsigned int item) const
		wxToolTip * GetItemToolTip(unsigned int item) const
		int GetItemFromPoint(const wxPoint pt) const
		wxString GetLabel() const
		unsigned int GetRowCount() const
		int GetSelection() const
		wxString GetStringSelection() const
		wxString GetString(unsigned int n) const
		bool IsItemEnabled(unsigned int n) const
		bool IsItemShown(unsigned int n) const
		void SetItemHelpText(unsigned int item, const wxString& helptext)
		void SetLabel(const wxString& label)
		void SetSelection(int n)
		void SetStringSelection(const wxString& string)
		void SetItemToolTip(unsigned int item, const wxString& text)
		virtual bool Show(const bool show = true)
		virtual bool Show(unsigned int item, const bool show = true)
<wx/radiobut.h>
	wxRB_GROUP
	wxRB_SINGLE
	wxRB_USE_CHECKBOX
	EVT_RADIOBUTTON(id, func)
	class wxRadioButton public wxControl public wxWindow public wxEvtHandler public wxObject
		wxRadioButton()
		wxRadioButton(wxWindow* parent, wxWindowID id, const wxString& label,const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize,long style = 0,const wxValidator& validator = wxDefaultValidator,const wxString& name = "radioButton")
		void ~wxRadioButton()
		bool Create(wxWindow* parent, wxWindowID id, const wxString& label,const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize,long style = 0,const wxValidator& validator = wxDefaultValidator,const wxString& name = "radioButton")
		bool GetValue() const
		void SetValue(const bool value)
<wx/gdicmn.h>
	class wxRealPoint
		wxRealPoint()
		wxRealPoint(double x, double y)
<wx/gdicmn.h>
	class wxRect
		wxRect()
		wxRect(int x, int y, int width, int height)
		wxRect(const wxPoint& topLeft, const wxPoint& bottomRight)
		wxRect(const wxPoint& pos, const wxSize& size)
		wxRect(const wxSize& size)
		wxRect CentreIn(const wxRect& r, int dir = wxBOTH) const
		wxRect CenterIn(const wxRect& r, int dir = wxBOTH) const
		bool Contains(int x, int y) const
		bool Contains(const wxPoint& pt) const
		bool Contains(const wxRect& rect) const
		void Deflate(wxCoord dx, wxCoord dy)
		void Deflate(const wxSize& diff)
		void Deflate(wxCoord diff)
		wxRect Deflate(wxCoord dx, wxCoord dy) const
		int GetBottom() const
		int GetHeight() const
		int GetLeft() const
		wxPoint GetPosition() const
		wxPoint GetTopLeft() const
		wxPoint GetTopRight() const
		wxPoint GetBottomLeft() const
		wxPoint GetBottomRight() const
		int GetRight() const
		wxSize GetSize() const
		int GetTop() const
		int GetWidth() const
		int GetX() const
		int GetY() const
		void Inflate(wxCoord dx, wxCoord dy)
		void Inflate(const wxSize& diff)
		void Inflate(wxCoord diff)
		wxRect Inflate(wxCoord dx, wxCoord dy) const
		wxRect Intersect(const wxRect& rect) const
		wxRect& Intersect(const wxRect& rect)
		bool Intersects(const wxRect& rect) const
		bool IsEmpty() const
		void Offset(wxCoord dx, wxCoord dy)
		void Offset(const wxPoint& pt)
		void SetHeight(int height)
		void SetSize(const wxSize& s)
		void SetWidth(int width)
		void SetX(int x)
		void SetY(int y)
		wxRect Union(const wxRect& rect) const
		wxRect& Union(const wxRect& rect)
		void operator =(const wxRect& rect)
		bool operator ==(const wxRect& rect)
		bool operator !=(const wxRect& rect)
<wx/recguard.h>
	class wxRecursionGuard
		wxRecursionGuard(wxRecursionGuardFlag& flag)
		~wxRecursionGuard()
		bool IsInside() const
<wx/recguard.h>
	class wxRecursionGuardFlag
<wx/regex.h>
	class wxRegEx
		wxRegEx()
		wxRegEx(const wxString& expr, int flags = wxRE_DEFAULT)
		~wxRegEx()
		bool Compile(const wxString& pattern, int flags = wxRE_DEFAULT)
		bool IsValid() const
		bool GetMatch(size_t* start, size_t* len, size_t index = 0) const
		wxString GetMatch(const wxString& text, size_t index = 0) const
		size_t GetMatchCount() const
		bool Matches(const wxChar* text, int flags = 0) const
		bool Matches(const wxChar* text, int flags, size_t len) const
		bool Matches(const wxString& text, int flags = 0) const
		int Replace(wxString* text, const wxString& replacement, size_t maxMatches = 0) const
		int ReplaceAll(wxString* text, const wxString& replacement) const
		int ReplaceFirst(wxString* text, const wxString& replacement) const
<wx/region.h>
	class wxRegion public wxGDIObject public wxObject
		wxRegion()
		wxRegion(wxCoord x, wxCoord y, wxCoord width, wxCoord height)
		wxRegion(const wxPoint& topLeft, const wxPoint& bottomRight)
		wxRegion(const wxRect& rect)
		wxRegion(const wxRegion& region)
		wxRegion(size_t n, const wxPoint *points, int fillStyle = wxWINDING_RULE)
		wxRegion(const wxBitmap& bmp)
		wxRegion(const wxBitmap& bmp,const wxColour& transColour,int tolerance = 0)
		~wxRegion()
		void Clear()
		wxRegionContain Contains(long&amp; x, long&amp; y) const
		wxRegionContain Contains(const wxPoint& pt) const
		wxRegionContain Contains(long&amp; x, long&amp; y, long&amp; width, long&amp; height) const
		wxRegionContain Contains(const wxRect& rect) const
		wxBitmap ConvertToBitmap() const
		void GetBox(wxCoord&amp; x, wxCoord&amp; y, wxCoord&amp; width, wxCoord&amp; height) const
		wxRect GetBox() const
		bool Intersect(wxCoord x, wxCoord y, wxCoord width, wxCoord height)
		bool Intersect(const wxRect& rect)
		bool Intersect(const wxRegion& region)
		bool IsEmpty() const
		bool IsEqual(const wxRegion& region) const
		bool Subtract(const wxRect& rect)
		bool Subtract(const wxRegion& region)
		bool Offset(wxCoord x, wxCoord y)
		bool Offset(const wxPoint& pt)
		bool Union(wxCoord x, wxCoord y, wxCoord width, wxCoord height)
		bool Union(const wxRect& rect)
		bool Union(const wxRegion& region)
		bool Union(const wxBitmap& bmp)
		bool Union(const wxBitmap& bmp,const wxColour& transColour,int tolerance = 0)
		bool Xor(wxCoord x, wxCoord y, wxCoord width, wxCoord height)
		bool Xor(const wxRect& rect)
		bool Xor(const wxRegion& region)
		void operator =(const wxRegion& region)
<wx/region.h>
	class wxRegionIterator public wxObject
		wxRegionIterator()
		wxRegionIterator(const wxRegion& region)
		wxCoord GetX() const
		wxCoord GetY() const
		wxCoord GetW() const
		wxCoord GetHeight() const
		wxCoord GetH() const
		wxRect GetRect() const
		wxCoord GetWidth() const
		bool HaveRects() const
		void Reset()
		void Reset(const wxRegion& region)
		void operator ++()
		operator bool() const
<wx/msw/registry.h>
	class wxRegKey
		wxRegKey()
		wxRegKey(const wxString& strKey)
		wxRegKey(const wxRegKey& keyParent, const wxString& strKey)
		void Close()
		bool Create(bool bOkIfExists = true)
		void DeleteSelf()
		void DeleteKey(const wxChar *szKey)
		void DeleteValue(const wxChar *szKey)
		static bool Exists() const
		wxString GetName(bool bShortPrefix = true) const
		bool GetFirstKey(wxString& strKeyName, long&amp; lIndex)
		bool GetFirstValue(wxString& strValueName, long&amp; lIndex)
		bool Exists(size_t *pnSubKeys, size_t *pnValues, size_t *pnMaxValueLen) const
		bool GetNextKey(wxString& strKeyName, long&amp; lIndex) const
		bool GetNextValue(wxString& strValueName, long&amp; lIndex) const
		bool HasValue(const wxChar *szValue) const
		bool HasValues() const
		bool HasSubKey(const wxChar *szKey) const
		bool HasSubKeys() const
		bool IsEmpty() const
		bool IsOpened() const
		bool Open(AccessMode mode = Write)
		bool QueryValue(const wxChar *szValue, wxString& strValue) const
		bool QueryValue(const wxChar *szValue, long *plValue) const
		bool Rename(const wxChar * szNewName)
		bool RenameValue(const wxChar *szValueOld, const wxChar *szValueNew)
		bool SetValue(const wxChar *szValue, long lValue)
		bool SetValue(const wxChar *szValue, const wxString& strValue)
		bool SetValue(const wxChar *szValue, const wxMemoryBuffer& buf)
<wx/renderer.h>
	class wxRendererNative
		~wxRendererNative()
		void DrawCheckBox(wxWindow *win, wxDC& dc, const wxRect& rect, int flags)
		void DrawComboBoxDropButton(wxWindow *win, wxDC& dc, const wxRect& rect, int flags)
		void DrawDropArrow(wxWindow *win, wxDC& dc, const wxRect& rect, int flags)
		int DrawHeaderButton(wxWindow* win, wxDC& dc, const wxRect& rect, int flags = 0, wxHeaderSortIconType sortArrow = wxHDR_SORT_ICON_NONE, wxHeaderButtonParams* params = NULL)
		void DrawItemSelectionRect(wxWindow* win, wxDC& dc, const wxRect& rect, int flags = 0)
		void DrawPushButton(wxWindow *win, wxDC& dc, const wxRect& rect, int flags)
		void DrawSplitterBorder(wxWindow* win, wxDC& dc, const wxRect& rect, int flags = 0)
		void DrawSplitterSash(wxWindow* win, wxDC& dc, const wxSize& size, wxCoord position, wxOrientation orient, int flags = 0)
		void DrawTreeItemButton(wxWindow* win, wxDC& dc, const wxRect& rect, int flags = 0)
		wxRendererNative& Get()
		wxRendererNative& GetDefault()
		wxRendererNative& GetGeneric()
		int GetHeaderButtonHeight(const wxWindow* win)
		wxSplitterRenderParams GetSplitterParams(const wxWindow* win)
		wxRendererVersion GetVersion() const
		wxRendererNative* Load(const wxString& name)
		wxRendererNative* Set(wxRendererNative* renderer)
<wx/renderer.h>
	class wxRendererVersion
		static bool IsCompatible(const wxRendererVersion& ver)
<wx/richtext/richtextbuffer.h>
	class wxRichTextAttr
		wxRichTextAttr()
		wxRichTextAttr(const wxColour& colText, const wxColour& colBack = wxNullColour, wxTextAttrAlignment alignment = wxTEXT_ALIGNMENT_DEFAULT)
		wxRichTextAttr(const wxTextAttrEx& attr)
		bool Apply(const wxRichTextAttr& style, const wxRichTextAttr* compareWith = NULL)
		wxRichTextAttr Combine(const wxRichTextAttr& style, const wxRichTextAttr* compareWith = NULL) const
		wxFont CreateFont() const
		wxTextAttrAlignment GetAlignment() const
		const wxColour& GetBackgroundColour() const
		const wxString& GetBulletFont() const
		const wxString& GetBulletName() const
		int GetBulletNumber() const
		int GetBulletStyle() const
		const wxString& GetBulletText() const
		const wxString& GetCharacterStyleName() const
		long GetFlags() const
		bool GetFontAttributes(const wxFont& font)
		const wxString& GetFontFaceName() const
		int GetFontSize() const
		int GetFontStyle() const
		bool GetFontUnderlined() const
		int GetFontWeight() const
		long GetLeftIndent() const
		long GetLeftSubIndent() const
		int GetLineSpacing() const
		const wxString& GetListStyleName() const
		int GetOutlineLevel() const
		int GetParagraphSpacingAfter() const
		int GetParagraphSpacingBefore() const
		const wxString& GetParagraphStyleName() const
		long GetRightIndent() const
		const wxArrayInt&amp; GetTabs() const
		const wxColour& GetTextColour() const
		int GetTextEffectFlags() const
		int GetTextEffects() const
		const wxString& GetURL() const
		bool HasAlignment() const
		bool HasBackgroundColour() const
		bool HasBulletName() const
		bool HasBulletNumber() const
		bool HasBulletStyle() const
		bool HasBulletText() const
		bool HasCharacterStyleName() const
		bool HasFontFaceName() const
		bool HasFlag(long flag) const
		bool HasFont() const
		bool HasFontItalic() const
		bool HasLeftIndent() const
		bool HasLineSpacing() const
		bool HasListStyleName() const
		bool HasOutlineLevel() const
		bool HasPageBreak() const
		bool HasParagraphSpacingAfter() const
		bool HasParagraphSpacingBefore() const
		bool HasParagraphStyleName() const
		bool HasRightIndent() const
		bool HasFontSize() const
		bool HasTabs() const
		bool HasTextColour() const
		bool HasTextEffects() const
		bool HasFontUnderlined() const
		bool HasURL() const
		bool HasFontWeight() const
		bool IsCharacterStyle() const
		bool IsDefault() const
		bool IsParagraphStyle() const
		void SetAlignment(wxTextAttrAlignment alignment)
		void SetBackgroundColour(const wxColour& colBack)
		void SetBulletFont(const wxString& font)
		void SetBulletName(const wxString& name)
		void SetBulletNumber(int n)
		void SetBulletStyle(int style)
		void SetBulletText(const wxStringtext)
		void SetCharacterStyleName(const wxString& name)
		void SetFlags(long flags)
		void SetFontFaceName(const wxString& faceName)
		void SetFontSize(int pointSize)
		void SetFontStyle(int fontStyle)
		void SetFontUnderlined(bool underlined)
		void SetFontWeight(int fontWeight)
		void SetLeftIndent(int indent, int subIndent = 0)
		void SetLineSpacing(int spacing)
		void SetListStyleName(const wxString& name)
		void SetOutlineLevel(int level)
		void SetPageBreak(bool pageBreak = true)
		void SetParagraphSpacingAfter(int spacing)
		void SetParagraphSpacingBefore(int spacing)
		void SetParagraphStyleName(const wxString& name)
		void SetRightIndent(int indent)
		void SetTabs(const wxArrayInt&amp; tabs)
		void SetTextColour(const wxColour& colText)
		void SetTextEffectFlags(int flags)
		void SetTextEffects(int effects)
		void SetURL(const wxString& url)
		void operator operator=(const wxTextAttrEx& attr)
		void operator operator=(const wxRichTextAttr& attr)
		operator wxTextAttrEx() const
<wx/richtext/richtextbuffer.h>
	class wxRichTextBuffer
		wxRichTextBuffer(const wxRichTextBuffer& obj)
		wxRichTextBuffer()
		~wxRichTextBuffer()
		bool AddEventHandler(wxEvtHandler* handler)
		void AddHandler(wxRichTextFileHandler* handler)
		wxRichTextRange AddParagraph(const wxString& text)
		bool BatchingUndo() const
		bool BeginAlignment(wxTextAttrAlignment alignment)
		bool BeginBatchUndo(const wxString& cmdName)
		bool BeginBold()
		bool BeginCharacterStyle(const wxString& characterStyle)
		bool BeginFont(const wxFont& font)
		bool BeginFontSize(int pointSize)
		bool BeginItalic()
		bool BeginLeftIndent(int leftIndent, int leftSubIndent = 0)
		bool BeginLineSpacing(int lineSpacing)
		bool BeginListStyle(const wxString& listStyle, int level=1, int number=1)
		bool BeginNumberedBullet(int bulletNumber, int leftIndent, int leftSubIndent, int bulletStyle = wxTEXT_ATTR_BULLET_STYLE_ARABIC|wxTEXT_ATTR_BULLET_STYLE_PERIOD)
		bool BeginParagraphSpacing(int before, int after)
		bool BeginParagraphStyle(const wxString& paragraphStyle)
		bool BeginRightIndent(int rightIndent)
		bool BeginStyle(const wxTextAttrEx& style)
		bool BeginSuppressUndo()
		bool BeginStandardBullet(const wxString& bulletName, int leftIndent, int leftSubIndent, int bulletStyle = wxTEXT_ATTR_BULLET_STYLE_STANDARD)
		bool BeginSymbolBullet(wxChar symbol, int leftIndent, int leftSubIndent, int bulletStyle = wxTEXT_ATTR_BULLET_STYLE_SYMBOL)
		bool BeginTextColour(const wxColour& colour)
		bool BeginUnderline()
		bool BeginURL(const wxString& url, const wxString& characterStyle = wxEmptyString)
		bool CanPasteFromClipboard() const
		void CleanUpHandlers()
		void Clear()
		bool ClearListStyle(const wxRichTextRange& range, int flags = wxRICHTEXT_SETSTYLE_WITH_UNDO)
		bool ClearListStyle(const wxRichTextRange& range, int flags = wxRICHTEXT_SETSTYLE_WITH_UNDO)
		void ClearStyleStack()
		wxRichTextObject* Clone() const
		void Copy(const wxRichTextBuffer& obj)
		bool CopyToClipboard(const wxRichTextRange& range)
		bool DeleteRangeWithUndo(const wxRichTextRange& range, wxRichTextCtrl* ctrl)
		void Dump()
		void Dump(wxTextOutputStream& stream)
		bool EndAlignment()
		bool EndAllStyles()
		bool EndBatchUndo()
		bool EndBold()
		bool EndCharacterStyle()
		bool EndFont()
		bool EndFontSize()
		bool EndItalic()
		bool EndLeftIndent()
		bool EndLineSpacing()
		bool EndListStyle()
		bool EndNumberedBullet()
		bool EndParagraphSpacing()
		bool EndParagraphStyle()
		bool EndRightIndent()
		bool EndStyle()
		bool EndSuppressUndo()
		bool EndSymbolBullet()
		bool EndStandardBullet()
		bool EndTextColour()
		bool EndUnderline()
		bool EndURL()
		wxRichTextFileHandler* FindHandler(int imageType)
		wxRichTextFileHandler* FindHandler(const wxString& extension, int imageType)
		wxRichTextFileHandler* FindHandler(const wxString& name)
		wxRichTextFileHandler* FindHandlerFilenameOrType(const wxString& filename, int imageType)
		const wxTextAttrEx& GetBasicStyle() const
		wxRichTextCommand* GetBatchedCommand() const
		wxCommandProcessor* GetCommandProcessor() const
		const wxTextAttrEx& GetDefaultStyle() const
		wxString GetExtWildcard(bool combine = false, bool save = false, wxArrayInt* types = NULL)
		wxList& GetHandlers()
		static wxRichTextRenderer* GetRenderer()
		bool GetStyle(long position, wxRichTextAttr& style)
		bool GetStyle(long position, wxTextAttrEx& style)
		bool GetStyleForRange(const wxRichTextRange& range, wxTextAttrEx& style)
		wxRichTextStyleSheet* GetStyleSheet() const
		size_t GetStyleStackSize() const
		bool GetUncombinedStyle(long position, wxRichTextAttr& style)
		bool GetUncombinedStyle(long position, wxTextAttrEx& style)
		int HitTest(wxDC& dc, const wxPoint& pt, long&amp; textPosition)
		void Init()
		void InitStandardHandlers()
		void InsertHandler(wxRichTextFileHandler* handler)
		bool InsertImageWithUndo(long pos, const wxRichTextImageBlock&amp; imageBlock, wxRichTextCtrl* ctrl)
		bool InsertNewlineWithUndo(long pos, wxRichTextCtrl* ctrl)
		bool InsertTextWithUndo(long pos, const wxString& text, wxRichTextCtrl* ctrl)
		bool IsModified() const
		bool LoadFile(wxInputStream& stream, int type = wxRICHTEXT_TYPE_ANY)
		bool LoadFile(const wxString& filename, int type = wxRICHTEXT_TYPE_ANY)
		void Modify(bool modify = true)
		bool NumberList(const wxRichTextRange& range, const wxRichTextListStyleDefinition* style, int flags = wxRICHTEXT_SETSTYLE_WITH_UNDO, int startFrom = -1, int listLevel = -1)
		bool Number(const wxRichTextRange& range, const wxString& styleName, int flags = wxRICHTEXT_SETSTYLE_WITH_UNDO, int startFrom = -1, int listLevel = -1)
		bool PasteFromClipboard(long position)
		bool PromoteList(int promoteBy, const wxRichTextRange& range, const wxRichTextListStyleDefinition* style, int flags = wxRICHTEXT_SETSTYLE_WITH_UNDO, int listLevel = -1)
		bool PromoteList(int promoteBy, const wxRichTextRange& range, const wxString& styleName, int flags = wxRICHTEXT_SETSTYLE_WITH_UNDO, int listLevel = -1)
		bool RemoveEventHandler(wxEvtHandler* handler, bool deleteHandler = false)
		bool RemoveHandler(const wxString& name)
		void ResetAndClearCommands()
		bool SaveFile(wxOutputStream& stream, int type = wxRICHTEXT_TYPE_ANY)
		bool SaveFile(const wxString& filename, int type = wxRICHTEXT_TYPE_ANY)
		void SetBasicStyle(const wxRichTextAttr& style)
		void SetBasicStyle(const wxTextAttrEx& style)
		void SetDefaultStyle(const wxTextAttrEx& style)
		bool SetListStyle(const wxRichTextRange& range, const wxRichTextListStyleDefinition* style, int flags = wxRICHTEXT_SETSTYLE_WITH_UNDO, int startFrom = -1, int listLevel = -1)
		bool SetListStyle(const wxRichTextRange& range, const wxString& styleName, int flags = wxRICHTEXT_SETSTYLE_WITH_UNDO, int startFrom = -1, int listLevel = -1)
		static void SetRenderer(wxRichTextRenderer* renderer)
		bool SetStyle(const wxRichTextRange& range, const wxRichTextAttr& style, int flags = wxRICHTEXT_SETSTYLE_WITH_UNDO)
		bool SetStyle(const wxRichTextRange& range, const wxTextAttrEx& style, int flags = wxRICHTEXT_SETSTYLE_WITH_UNDO)
		void SetStyleSheet(wxRichTextStyleSheet* styleSheet)
		bool SubmitAction(wxRichTextAction* action)
		bool SuppressingUndo() const
<wx/richtext/richtextstyles.h>
	class wxRichTextCharacterStyleDefinition public wxRichTextStyleDefinition
		wxRichTextCharacterStyleDefinition(const wxString& name = wxEmptyString)
		~wxRichTextCharacterStyleDefinition()
<wx/richtext/richtextctrl.h>
	wxRE_READONLY
	wxRE_CENTRE_CARET
	wxRE_CENTER_CARET
	class wxRichTextCtrl
		wxRichTextCtrl()
		wxRichTextCtrl(wxWindow* parent, wxWindowID id = wxID_ANY, const wxString& value = wxEmptyString,const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxRE_MULTILINE,const wxValidator& validator = wxDefaultValidator, const wxString& name = wxTextCtrlNameStr)
		~wxRichTextCtrl()
		wxRichTextRange AddImage(const wxImage& image)
		wxRichTextRange AddParagraph(const wxString& text)
		void AppendText(const wxString& text)
		bool ApplyAlignmentToSelection(wxTextAttrAlignment alignment)
		bool ApplyBoldToSelection()
		bool ApplyItalicToSelection()
		bool ApplyStyle(wxRichTextStyleDefinition* def)
		bool ApplyStyleSheet(wxRichTextStyleSheet* sheet = NULL)
		bool ApplyUnderlineToSelection()
		bool BatchingUndo() const
		bool BeginAlignment(wxTextAttrAlignment alignment)
		bool BeginBatchUndo(const wxString& cmdName)
		bool BeginBold()
		bool BeginCharacterStyle(const wxString& characterStyle)
		bool BeginFont(const wxFont& font)
		bool BeginFontSize(int pointSize)
		bool BeginItalic()
		bool BeginLeftIndent(int leftIndent, int leftSubIndent = 0)
		bool BeginLineSpacing(int lineSpacing)
		bool BeginListStyle(const wxString& listStyle, int level=1, int number=1)
		bool BeginNumberedBullet(int bulletNumber, int leftIndent, int leftSubIndent, int bulletStyle = wxTEXT_ATTR_BULLET_STYLE_ARABIC|wxTEXT_ATTR_BULLET_STYLE_PERIOD)
		bool BeginParagraphSpacing(int before, int after)
		bool BeginParagraphStyle(const wxString& paragraphStyle)
		bool BeginRightIndent(int rightIndent)
		bool BeginStyle(const wxTextAttrEx& style)
		bool BeginSuppressUndo()
		bool BeginSymbolBullet(wxChar symbol, int leftIndent, int leftSubIndent, int bulletStyle = wxTEXT_ATTR_BULLET_STYLE_SYMBOL)
		bool BeginTextColour(const wxColour& colour)
		bool BeginUnderline()
		bool BeginURL(const wxString& url, const wxString& characterStyle = wxEmptyString)
		bool CanCopy() const
		bool CanCut() const
		bool CanDeleteSelection() const
		bool CanPaste() const
		bool CanRedo() const
		bool CanUndo() const
		void Clear()
		bool ClearListStyle(const wxRichTextRange& range, int flags = wxRICHTEXT_SETSTYLE_WITH_UNDO)
		bool ClearListStyle(const wxRichTextRange& range, int flags = wxRICHTEXT_SETSTYLE_WITH_UNDO)
		void Command(wxCommandEvent& event)
		void Copy()
		bool Create(wxWindow* parent, wxWindowID id = wxID_ANY, const wxString& value = wxEmptyString,const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxRE_MULTILINE,const wxValidator& validator = wxDefaultValidator, const wxString& name = wxTextCtrlNameStr)
		void Cut()
		bool Delete(const wxRichTextRange& range)
		bool DeleteSelectedContent(long* newPos = NULL)
		void DeleteSelection()
		void DiscardEdits()
		wxSize DoGetBestSize() const
		bool EndAlignment()
		bool EndAllStyles()
		bool EndBatchUndo()
		bool EndBold()
		bool EndCharacterStyle()
		bool EndFont()
		bool EndFontSize()
		bool EndItalic()
		bool EndLeftIndent()
		bool EndLineSpacing()
		bool EndListStyle()
		bool EndNumberedBullet()
		bool EndParagraphSpacing()
		bool EndParagraphStyle()
		bool EndRightIndent()
		bool EndStyle()
		bool EndSuppressUndo()
		bool EndSymbolBullet()
		bool EndTextColour()
		bool EndUnderline()
		bool EndURL()
		bool ExtendSelection(long oldPosition, long newPosition, int flags)
		long FindNextWordPosition(int direction = 1) const
		void Freeze()
		const wxTextAttrEx& GetBasicStyle() const
		const wxRichTextBuffer& GetBuffer() const
		wxRichTextBuffer& GetBuffer()
		long GetCaretPosition() const
		bool GetCaretPositionForIndex(long position, wxRect& rect)
		wxCommandProcessor* GetCommandProcessor() const
		const wxTextAttrEx& GetDefaultStyleEx() const
		long GetDelayedLayoutThreshold() const
		wxString GetFilename() const
		long GetFirstVisiblePosition() const
		int GetHandlerFlags() const
		long GetInsertionPoint() const
		wxTextPos GetLastPosition() const
		int GetLineLength(long lineNo) const
		wxString GetLineText(long lineNo) const
		wxPoint GetLogicalPoint(const wxPoint& ptPhysical) const
		int GetNumberOfLines() const
		wxPoint GetPhysicalPoint(const wxPoint& ptLogical) const
		wxString GetRange(long from, long to) const
		void GetSelection(long* from, long* to) const
		const wxRichTextRange& GetSelectionRange() const
		wxString GetStringSelection() const
		bool GetStyle(long position, wxRichTextAttr& style)
		bool GetStyle(long position, wxTextAttrEx& style)
		bool GetStyle(long position, wxTextAttr& style)
		bool GetStyleForRange(const wxRichTextRange& range, wxRichTextAttr& style)
		bool GetStyleForRange(const wxRichTextRange& range, wxTextAttrEx& style)
		wxRichTextStyleSheet* GetStyleSheet() const
		bool GetUncombinedStyle(long position, wxRichTextAttr& style)
		bool GetUncombinedStyle(long position, wxTextAttrEx& style)
		bool GetUncombinedStyle(long position, wxTextAttr& style)
		wxString GetValue() const
		wxRichTextLine* GetVisibleLineForCaretPosition(long caretPosition) const
		bool HasCharacterAttributes(const wxRichTextRange& range, const wxTextAttrEx& style) const
		bool HasCharacterAttributes(const wxRichTextRange& range, const wxRichTextAttr& style) const
		bool HasParagraphAttributes(const wxRichTextRange& range, const wxTextAttrEx& style) const
		bool HasParagraphAttributes(const wxRichTextRange& range, const wxRichTextAttr& style) const
		bool HasSelection() const
		wxTextCtrlHitTestResult HitTest(const wxPoint& pt, long* pos) const
		wxTextCtrlHitTestResult HitTest(const wxPoint& pt, wxTextCoord* col, wxTextCoord* row) const
		void Init()
		void InitCommandEvent(wxCommandEvent& event) const
		bool IsDefaultStyleShowing() const
		bool IsEditable() const
		bool IsFrozen() const
		bool IsModified() const
		bool IsMultiLine() const
		bool IsPositionVisible(long pos) const
		bool IsSelectionAligned(wxTextAttrAlignment alignment) const
		bool IsSelectionBold() const
		bool IsSelectionItalics() const
		bool IsSelectionUnderlined() const
		bool IsSingleLine() const
		bool KeyboardNavigate(int keyCode, int flags)
		bool LayoutContent(bool onlyVisibleRect = false)
		bool LineBreak()
		bool LoadFile(const wxString& file, int type = wxRICHTEXT_TYPE_ANY)
		void MarkDirty()
		bool MoveCaret(long pos, bool showAtLineStart = false)
		void MoveCaretBack(long oldPosition)
		void MoveCaretForward(long oldPosition)
		bool MoveDown(int noLines = 1, int flags = 0)
		bool MoveEnd(int flags = 0)
		bool MoveHome(int flags = 0)
		bool MoveLeft(int noPositions = 1, int flags = 0)
		bool MoveRight(int noPositions = 1, int flags = 0)
		bool MoveToLineEnd(int flags = 0)
		bool MoveToLineStart(int flags = 0)
		bool MoveToParagraphEnd(int flags = 0)
		bool MoveToParagraphStart(int flags = 0)
		bool MoveUp(int noLines = 1, int flags = 0)
		bool Newline()
		bool NumberList(const wxRichTextRange& range, const wxRichTextListStyleDefinition* style, int flags = wxRICHTEXT_SETSTYLE_WITH_UNDO, int startFrom = -1, int listLevel = -1)
		bool Number(const wxRichTextRange& range, const wxString& styleName, int flags = wxRICHTEXT_SETSTYLE_WITH_UNDO, int startFrom = -1, int listLevel = -1)
		void OnClear(wxCommandEvent& event)
		void OnContextMenu(wxContextMenuEvent& event)
		void OnCopy(wxCommandEvent& event)
		void OnCut(wxCommandEvent& event)
		void OnDropFiles(wxDropFilesEvent& event)
		void OnPaste(wxCommandEvent& event)
		void OnRedo(wxCommandEvent& event)
		void OnSelectAll(wxCommandEvent& event)
		void OnUndo(wxCommandEvent& event)
		void OnUpdateClear(wxUpdateUIEvent& event)
		void OnUpdateCopy(wxUpdateUIEvent& event)
		void OnUpdateCut(wxUpdateUIEvent& event)
		void OnUpdatePaste(wxUpdateUIEvent& event)
		void OnUpdateRedo(wxUpdateUIEvent& event)
		void OnUpdateSelectAll(wxUpdateUIEvent& event)
		void OnUpdateUndo(wxUpdateUIEvent& event)
		bool PageDown(int noPages = 1, int flags = 0)
		bool PageUp(int noPages = 1, int flags = 0)
		void PaintBackground(wxDC& dc)
		void Paste()
		void PositionCaret()
		bool PositionToXY(long pos, long* x, long* y) const
		bool PromoteList(int promoteBy, const wxRichTextRange& range, const wxRichTextListStyleDefinition* style, int flags = wxRICHTEXT_SETSTYLE_WITH_UNDO, int listLevel = -1)
		bool PromoteList(int promoteBy, const wxRichTextRange& range, const wxString& styleName, int flags = wxRICHTEXT_SETSTYLE_WITH_UNDO, int listLevel = -1)
		void Redo()
		void Remove(long from, long to)
		void Replace(long from, long to, const wxString& value)
		bool SaveFile(const wxString& file = wxEmptyString, int type = wxRICHTEXT_TYPE_ANY)
		bool ScrollIntoView(long position, int keyCode)
		void SelectAll()
		void SelectNone()
		void SetAndShowDefaultStyle(const wxRichTextAttr& attr)
		void SetBasicStyle(const wxRichTextAttr& style)
		void SetBasicStyle(const wxTextAttrEx& style)
		void SetCaretPosition(long position, bool showAtLineStart = false)
		bool SetDefaultStyle(const wxTextAttrEx& style)
		bool SetDefaultStyleToCursorStyle()
		void SetDelayedLayoutThreshold(long threshold)
		void SetEditable(bool editable)
		void SetFilename(const wxString& filename)
		bool SetFont(const wxFont& font)
		void SetHandlerFlags(int flags)
		void SetInsertionPoint(long pos)
		void SetInsertionPointEnd()
		bool SetListStyle(const wxRichTextRange& range, const wxRichTextListStyleDefinition* style, int flags = wxRICHTEXT_SETSTYLE_WITH_UNDO, int startFrom = -1, int listLevel = -1)
		bool SetListStyle(const wxRichTextRange& range, const wxString& styleName, int flags = wxRICHTEXT_SETSTYLE_WITH_UNDO, int startFrom = -1, int listLevel = -1)
		void SetSelection(long from, long to)
		void SetSelectionRange(const wxRichTextRange& range)
		bool SetStyle(const wxRichTextRange& range, const wxRichTextAttr& style)
		bool SetStyle(long start, long end, const wxTextAttrEx& style)
		bool SetStyle(long start, long end, const wxTextAttr& style)
		bool SetStyleEx(const wxRichTextRange& range, const wxRichTextAttr& style, int flags = wxRICHTEXT_SETSTYLE_WITH_UNDO)
		bool SetStyleEx(const wxRichTextRange& range, const wxTextAttrEx& style, int flags = wxRICHTEXT_SETSTYLE_WITH_UNDO)
		bool SetStyleEx(long start, long end, const wxTextAttrEx& style, int flags = wxRICHTEXT_SETSTYLE_WITH_UNDO)
		void SetStyleSheet(wxRichTextStyleSheet* styleSheet)
		void SetValue(const wxString& value)
		void SetupScrollbars(bool atTop = false)
		void ShowPosition(long pos)
		bool SuppressingUndo() const
		void Thaw()
		void Undo()
		bool WordLeft(int noWords = 1, int flags = 0)
		bool WordRight(int noWords = 1, int flags = 0)
		bool WriteImage(const wxString& filename, int bitmapType)
		bool WriteImage(const wxRichTextImageBlock&amp; imageBlock)
		bool WriteImage(const wxBitmap& bitmap, int bitmapType = wxBITMAP_TYPE_PNG)
		bool WriteImage(const wxImage& image, int bitmapType = wxBITMAP_TYPE_PNG)
		void WriteText(const wxString& text)
		long XYToPosition(long x, long y) const
	EVT_RICHTEXT_CHARACTER(id, func)
	EVT_RICHTEXT_DELETE(id, func)
	EVT_RICHTEXT_RETURN(id, func)
	EVT_RICHTEXT_STYLE_CHANGED(id, func)
	EVT_RICHTEXT_STYLESHEET_CHANGED(id, func)
	EVT_RICHTEXT_STYLESHEET_REPLACING(id, func)
	EVT_RICHTEXT_STYLESHEET_REPLACED(id, func)
	EVT_RICHTEXT_CONTENT_INSERTED(id, func)
	EVT_RICHTEXT_CONTENT_DELETED(id, func)
	EVT_RICHTEXT_BUFFER_RESET(id, func)
<wx/richtext/richtextctrl.h>
	class wxRichTextEvent public wxNotifyEvent
		wxRichTextEvent(const wxRichTextEvent& event)
		wxRichTextEvent(wxEventType commandType = wxEVT_NULL, int winid = 0)
		wxEvent* Clone() const
		wxChar GetCharacter() const
		int GetFlags() const
		wxRichTextStyleSheet* GetNewStyleSheet() const
		wxRichTextStyleSheet* GetOldStyleSheet() const
		long GetPosition() const
		wxRichTextRange GetRange() const
		void SetCharacter(wxChar ch)
		void SetFlags(int flags)
		void SetNewStyleSheet(wxRichTextStyleSheet* sheet)
		void SetOldStyleSheet(wxRichTextStyleSheet* sheet)
		void SetPosition(long pos)
		void SetRange(const wxRichTextRange& range)
<wx/richtext/richtextbuffer.h>
	class wxRichTextFileHandler public wxObject
		wxRichTextFileHandler(const wxString& name = wxEmptyString, const wxString& ext = wxEmptyString, int type = 0)
		bool CanHandle(const wxString& filename) const
		bool CanLoad() const
		bool CanSave() const
		bool DoLoadFile(wxRichTextBuffer* buffer, wxInputStream& stream)
		bool DoSaveFile(wxRichTextBuffer* buffer, wxOutputStream& stream)
		const wxString& GetEncoding() const
		wxString GetExtension() const
		int GetFlags() const
		wxString GetName() const
		int GetType() const
		bool IsVisible() const
		bool LoadFile(wxRichTextBuffer* buffer, wxInputStream& stream)
		bool LoadFile(wxRichTextBuffer* buffer, const wxString& filename)
		bool SaveFile(wxRichTextBuffer* buffer, wxOutputStream& stream)
		bool SaveFile(wxRichTextBuffer* buffer, const wxString& filename)
		void SetEncoding(const wxString& encoding)
		void SetExtension(const wxString& ext)
		void SetFlags(int flags)
		void SetName(const wxString& name)
		void SetType(int type)
		void SetVisible(bool visible)
<wx/richtext/richtextformatdlg.h>
	class wxRichTextFormattingDialog public wxPropertySheetDialog
		wxRichTextFormattingDialog(long flags, wxWindow* parent, const wxString& title = _("Formatting"), wxWindowID id = wxID_ANY, const wxPoint& pos = wxDefaultPosition, const wxSize& sz = wxDefaultSize, long style = wxDEFAULT_DIALOG_STYLE)
		wxRichTextFormattingDialog()
		~wxRichTextFormattingDialog()
		bool ApplyStyle(wxRichTextCtrl* ctrl, const wxRichTextRange& range, int flags = wxRICHTEXT_SETSTYLE_WITH_UNDO|wxRICHTEXT_SETSTYLE_OPTIMIZE)
		bool Create(long flags, wxWindow* parent, const wxString& title, wxWindowID id, const wxPoint& pos = wxDefaultPosition, const wxSize& sz = wxDefaultSize, long style = wxDEFAULT_DIALOG_STYLE)
		const wxTextAttrEx& GetAttributes() const
		wxTextAttrEx& GetAttributes()
		wxRichTextFormattingDialog* GetDialog(wxWindow* win)
		wxTextAttrEx* GetDialogAttributes(wxWindow* win)
		wxRichTextStyleDefinition* GetDialogStyleDefinition(wxWindow* win)
		wxRichTextFormattingDialogFactory* GetFormattingDialogFactory()
		wxImageList* GetImageList() const
		bool GetStyle(wxRichTextCtrl* ctrl, const wxRichTextRange& range)
		wxRichTextStyleDefinition* GetStyleDefinition() const
		wxRichTextStyleSheet* GetStyleSheet() const
		void SetAttributes(const wxTextAttrEx& attr)
		void SetFormattingDialogFactory(wxRichTextFormattingDialogFactory* factory)
		void SetImageList(wxImageList* imageList)
		bool SetStyle(const wxTextAttrEx& style, bool update = true)
		bool SetStyleDefinition(const wxRichTextStyleDefinition& styleDef, wxRichTextStyleSheet* sheet, bool update = true)
		bool UpdateDisplay()
<wx/richtext/richtextformatdlg.h>
	class wxRichTextFormattingDialogFactory public wxObject
		wxRichTextFormattingDialogFactory()
		~wxRichTextFormattingDialogFactory()
		virtual bool CreateButtons(wxRichTextFormattingDialog* dialog)
		virtual wxPanel* CreatePage(int page, wxString& title, wxRichTextFormattingDialog* dialog)
		virtual bool CreatePages(long pages, wxRichTextFormattingDialog* dialog)
		virtual int GetPageId(int i) const
		virtual int GetPageIdCount() const
		virtual int GetPageImage(int id) const
		virtual bool SetSheetStyle(wxRichTextFormattingDialog* dialog)
		virtual bool ShowHelp(int page, wxRichTextFormattingDialog* dialog)
<wx/richtex/richtextprint.h>
	class wxRichTextHeaderFooterData public wxObject
		wxRichTextHeaderFooterData()
		wxRichTextHeaderFooterData(const wxRichTextHeaderFooterData& data)
		void Clear()
		void Copy(const wxRichTextHeaderFooterData& data)
		const wxFont& GetFont() const
		int GetFooterMargin() const
		wxString GetFooterText(wxRichTextOddEvenPage page = wxRICHTEXT_PAGE_EVEN, wxRichTextPageLocation location = wxRICHTEXT_PAGE_CENTRE) const
		int GetHeaderMargin() const
		wxString GetHeaderText(wxRichTextOddEvenPage page = wxRICHTEXT_PAGE_EVEN, wxRichTextPageLocation location = wxRICHTEXT_PAGE_CENTRE) const
		bool GetShowOnFirstPage() const
		wxString GetText(int headerFooter, wxRichTextOddEvenPage page, wxRichTextPageLocation location) const
		const wxColour& GetTextColour() const
		void Init()
		void SetFont(const wxFont& font)
		void SetFooterText(const wxString& text, wxRichTextOddEvenPage page = wxRICHTEXT_PAGE_ALL, wxRichTextPageLocation location = wxRICHTEXT_PAGE_CENTRE)
		void SetHeaderText(const wxString& text, wxRichTextOddEvenPage page = wxRICHTEXT_PAGE_ALL, wxRichTextPageLocation location = wxRICHTEXT_PAGE_CENTRE)
		void SetMargins(int headerMargin, int footerMargin)
		void SetShowOnFirstPage(bool showOnFirstPage)
		void SetText(const wxString& text, int headerFooter, wxRichTextOddEvenPage page, wxRichTextPageLocation location)
		void SetTextColour(const wxColour& col)
		void operator operator=(const wxRichTextHeaderFooterData& data)
<wx/richtext/richtexthtml.h>
	class wxRichTextHTMLHandler public wxRichTextFileHandler
		wxRichTextHTMLHandler(const wxString& name = wxT("HTML"), const wxString& ext = wxT("html"), int type = wxRICHTEXT_TYPE_HTML)
		void ClearTemporaryImageLocations()
		bool DeleteTemporaryImages()
		bool DeleteTemporaryImages(int flags, const wxArrayString& imageLocations)
		bool DoSaveFile(wxRichTextBuffer* buffer, wxOutputStream& stream)
		wxArrayInt GetFontSizeMapping()
		const wxString& GetTempDir() const
		const wxArrayString& GetTemporaryImageLocations() const
		void SetFileCounter(int counter)
		void SetFontSizeMapping(const wxArrayInt&amp; fontSizeMapping)
		void SetTempDir(const wxString& tempDir)
		void SetTemporaryImageLocations(const wxArrayString& locations)
<wx/richtext/richtextstyles.h>
	class wxRichTextListStyleDefinition public wxRichTextParagraphStyleDefinition
		wxRichTextListStyleDefinition(const wxString& name = wxEmptyString)
		~wxRichTextListStyleDefinition()
		wxRichTextAttr CombineWithParagraphStyle(int indent, const wxRichTextAttr& paraStyle, wxRichTextStyleSheet* styleSheet = NULL)
		int FindLevelForIndent(int indent) const
		wxRichTextAttr GetCombinedStyle(int indent, wxRichTextStyleSheet* styleSheet = NULL) const
		wxRichTextAttr GetCombinedStyleLevel(int level, wxRichTextStyleSheet* styleSheet = NULL) const
		const wxRichTextAttr* GetLevelAttributes(int level) const
		int GetLevelCount() const
		int IsNumbered(int level) const
		void SetLevelAttributes(int level, const wxRichTextAttr& attr)
		void SetLevelAttributes(int level, int leftIndent, int leftSubIndent, int bulletStyle, const wxString& bulletSymbol = wxEmptyString)
<wx/richtext/richtextstyles.h>
	class wxRichTextParagraphStyleDefinition public wxRichTextStyleDefinition
		wxRichTextParagraphStyleDefinition(const wxString& name = wxEmptyString)
		~wxRichTextParagraphStyleDefinition()
		const wxString& GetNextStyle() const
		void SetNextStyle(const wxString& name)
<wx/richtext/richtextprint.h>
	class wxRichTextPrinting public wxObject
		wxRichTextPrinting(const wxString& name = wxT("Printing"), wxWindow* parentWindow = NULL)
		wxString GetFooterText(wxRichTextOddEvenPage page = wxRICHTEXT_PAGE_EVEN, wxRichTextPageLocation location = wxRICHTEXT_PAGE_CENTRE) const
		const wxRichTextHeaderFooterData& GetHeaderFooterData() const
		wxString GetHeaderText(wxRichTextOddEvenPage page = wxRICHTEXT_PAGE_EVEN, wxRichTextPageLocation location = wxRICHTEXT_PAGE_CENTRE) const
		wxPageSetupDialogData* GetPageSetupData()
		wxWindow* GetParentWindow() const
		const wxRect& GetPreviewRect() const
		wxPrintData* GetPrintData()
		const wxString& GetTitle() const
		void PageSetup()
		bool PreviewBuffer(const wxRichTextBuffer& buffer)
		bool PreviewFile(const wxString& richTextFile)
		bool PrintBuffer(const wxRichTextBuffer& buffer)
		bool PrintFile(const wxString& richTextFile)
		void SetFooterText(const wxString& text, wxRichTextOddEvenPage page = wxRICHTEXT_PAGE_ALL, wxRichTextPageLocation location = wxRICHTEXT_PAGE_CENTRE)
		void SetHeaderFooterData(const wxRichTextHeaderFooterData& data)
		void SetHeaderFooterFont(const wxFont& font)
		void SetHeaderFooterTextColour(const wxColour& colour)
		void SetHeaderText(const wxString& text, wxRichTextOddEvenPage page = wxRICHTEXT_PAGE_ALL, wxRichTextPageLocation location = wxRICHTEXT_PAGE_CENTRE)
		void SetPageSetupData(const wxPageSetupData&amp; pageSetupData)
		void SetParentWindow(wxWindow* parent)
		void SetPreviewRect(const wxRect& rect)
		void SetPrintData(const wxPrintData& printData)
		void SetShowOnFirstPage(bool show)
		void SetTitle(const wxString& title)
<wx/richtext/richtextprint.h>
	class wxRichTextPrintout public wxPrintout
		wxRichTextPrintout(const wxString& title = wxT("Printout"))
		void CalculateScaling(wxDC* dc, wxRect& textRect, wxRect& headerRect, wxRect& footerRect)
		const wxRichTextHeaderFooterData& GetHeaderFooterData() const
		void GetPageInfo(int* minPage, int* maxPage, int* selPageFrom, int* selPageTo)
		wxRichTextBuffer* GetRichTextBuffer() const
		bool HasPage(int page)
		void OnPreparePrinting()
		bool OnPrintPage(int page)
		void SetHeaderFooterData(const wxRichTextHeaderFooterData& data)
		void SetMargins(int top = 252, int bottom = 252, int left = 252, int right = 252)
		void SetRichTextBuffer(wxRichTextBuffer* buffer)
<wx/richtext/richtextbuffer.h>
	class wxRichTextRange
		wxRichTextRange(long start, long end)
		wxRichTextRange(const wxRichTextRange& range)
		wxRichTextRange()
		~wxRichTextRange()
		bool Contains(long pos) const
		long GetEnd() const
		long GetLength() const
		long GetStart() const
		wxRichTextRange FromInternal() const
		bool IsOutside(const wxRichTextRange& range) const
		bool IsWithin(const wxRichTextRange& range) const
		bool LimitTo(const wxRichTextRange& range)
		void SetEnd(long end)
		void SetRange(long start, long end)
		void SetStart(long start)
		void Swap()
		wxRichTextRange ToInternal() const
		wxRichTextRange operator+(const wxRichTextRange& range) const
		wxRichTextRange operator-(const wxRichTextRange& range) const
		void operator=(const wxRichTextRange& range)
		bool operator==(const wxRichTextRange& range) const
<wx/richtext/richtextstyles.h>
	class wxRichTextStyleDefinition public wxObject
		wxRichTextStyleDefinition(const wxString& name = wxEmptyString)
		~wxRichTextStyleDefinition()
		const wxString& GetBaseStyle() const
		const wxString& GetDescription() const
		const wxString& GetName() const
		wxRichTextAttr& GetStyle()
		const wxRichTextAttr& GetStyle() const
		wxRichTextAttr GetStyleMergedWithBase(wxRichTextStyleSheet* sheet) const
		void SetBaseStyle(const wxString& name)
		void SetDescription(const wxString& descr)
		void SetName(const wxString& name)
		void SetStyle(const wxRichTextAttr& style)
<wx/richtext/richtextstyles.h>
	class wxRichTextStyleComboCtrl public wxComboCtrl
		wxRichTextStyleComboCtrl(wxWindow* parent, wxWindowID id = wxID_ANY, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = 0)
		~wxRichTextStyleComboCtrl()
		wxRichTextCtrl* GetRichTextCtrl() const
		wxRichTextStyleSheet* GetStyleSheet() const
		void SetRichTextCtrl(wxRichTextCtrl* ctrl)
		void SetStyleSheet(wxRichTextStyleSheet* styleSheet)
		void UpdateStyles()
<wx/richtext/richtextstyles.h>
	class wxRichTextStyleListBox public wxHtmlListBox
		wxRichTextStyleListBox(wxWindow* parent, wxWindowID id = wxID_ANY, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = 0)
		~wxRichTextStyleListBox()
		void ApplyStyle(int i)
		int ConvertTenthsMMToPixels(wxDC& dc, int units) const
		wxString CreateHTML(wxRichTextStyleDefinition* def) const
		bool GetApplyOnSelection() const
		wxRichTextCtrl* GetRichTextCtrl() const
		wxRichTextStyleDefinition* GetStyle(size_t i) const
		wxRichTextStyleSheet* GetStyleSheet() const
		wxRichTextStyleListBox::wxRichTextStyleType GetStyleType() const
		wxString OnGetItem(size_t n) const
		void OnLeftDown(wxMouseEvent& event)
		void OnSelect(wxCommandEvent& event)
		void SetApplyOnSelection(bool applyOnSelection)
		void SetRichTextCtrl(wxRichTextCtrl* ctrl)
		void SetStyleSheet(wxRichTextStyleSheet* styleSheet)
		void SetStyleType(wxRichTextStyleListBox::wxRichTextStyleType styleType)
		void UpdateStyles()
	wxRICHTEXTSTYLELIST_HIDE_TYPE_SELECTOR
<wx/richtext/richtextstyles.h>
	class wxRichTextStyleListCtrl public wxControl
		wxRichTextStyleListCtrl(wxWindow* parent, wxWindowID id = wxID_ANY, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = 0)
		wxRichTextStyleListCtrl()
		bool Create(wxWindow* parent, wxWindowID id = wxID_ANY, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = 0)
		wxRichTextCtrl* GetRichTextCtrl() const
		wxChoice* GetStyleChoice() const
		wxRichTextStyleListBox* GetStyleListBox() const
		wxRichTextStyleSheet* GetStyleSheet() const
		wxRichTextStyleListBox::wxRichTextStyleType GetStyleType() const
		void SetRichTextCtrl(wxRichTextCtrl* ctrl)
		void SetStyleSheet(wxRichTextStyleSheet* styleSheet)
		void SetStyleType(wxRichTextStyleListBox::wxRichTextStyleType styleType)
		void UpdateStyles()
<wx/richtext/richtextstyledlg.h>
	class wxRichTextStyleOrganiserDialog public wxDialog
		wxRichTextStyleOrganiserDialog(int flags, wxRichTextStyleSheet* sheet, wxRichTextCtrl* ctrl, wxWindow* parent, wxWindowID id = wxID_ANY, const wxString& caption = _("Style Organiser"), const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxDEFAULT_DIALOG_STYLE|wxRESIZE_BORDER|wxSYSTEM_MENU|wxCLOSE_BOX)
		wxRichTextStyleOrganiserDialog()
		bool ApplyStyle(wxRichTextCtrl* ctrl = NULL)
		bool Create(int flags, wxRichTextStyleSheet* sheet, wxRichTextCtrl* ctrl, wxWindow* parent, wxWindowID id = wxID_ANY, const wxString& caption = _("Style Organiser"), const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxDEFAULT_DIALOG_STYLE|wxRESIZE_BORDER|wxSYSTEM_MENU|wxCLOSE_BOX)
		int GetFlags() const
		bool GetRestartNumbering() const
		wxRichTextCtrl* GetRichTextCtrl() const
		wxString GetSelectedStyle() const
		wxRichTextStyleDefinition* GetSelectedStyleDefinition() const
		wxRichTextStyleSheet* GetStyleSheet() const
		void SetFlags(int flags)
		void SetRestartNumbering(bool restartNumbering)
		void SetRichTextCtrl(wxRichTextCtrl* ctrl)
		void SetShowToolTips(bool show)
		void SetStyleSheet(wxRichTextStyleSheet* sheet)
<wx/richtext/richtextstyles.h>
	class wxRichTextStyleSheet public wxObject
		wxRichTextStyleSheet()
		~wxRichTextStyleSheet()
		bool AddCharacterStyle(wxRichTextCharacterStyleDefinition* def)
		bool AddListStyle(wxRichTextListStyleDefinition* def)
		bool AddParagraphStyle(wxRichTextParagraphStyleDefinition* def)
		bool AddStyle(wxRichTextStyleDefinition* def)
		void DeleteStyles()
		wxRichTextCharacterStyleDefinition* FindCharacterStyle(const wxString& name) const
		wxRichTextListStyleDefinition* FindListStyle(const wxString& name) const
		wxRichTextParagraphStyleDefinition* FindParagraphStyle(const wxString& name) const
		wxRichTextStyleDefinition* FindStyle(const wxString& name) const
		wxRichTextCharacterStyleDefinition* GetCharacterStyle(size_t n) const
		size_t GetCharacterStyleCount() const
		const wxString& GetDescription() const
		wxRichTextListStyleDefinition* GetListStyle(size_t n) const
		size_t GetListStyleCount() const
		const wxString& GetName() const
		wxRichTextParagraphStyleDefinition* GetParagraphStyle(size_t n) const
		size_t GetParagraphStyleCount() const
		bool RemoveCharacterStyle(wxRichTextStyleDefinition* def, bool deleteStyle = false)
		bool RemoveListStyle(wxRichTextStyleDefinition* def, bool deleteStyle = false)
		bool RemoveParagraphStyle(wxRichTextStyleDefinition* def, bool deleteStyle = false)
		bool RemoveStyle(wxRichTextStyleDefinition* def, bool deleteStyle = false)
		void SetDescription(const wxString& descr)
		void SetName(const wxString& name)
<wx/richtext/richtextxml.h>
	class wxRichTextXMLHandler public wxRichTextFileHandler
		wxRichTextXMLHandler(const wxString& name = wxT("XML"), const wxString& ext = wxT("xml"), int type = wxRICHTEXT_TYPE_XML)
		bool CanLoad() const
		bool CanSave() const
		wxString CreateStyle(const wxTextAttrEx& attr, bool isPara = false)
		bool DoLoadFile(wxRichTextBuffer* buffer, wxInputStream& stream)
		bool DoSaveFile(wxRichTextBuffer* buffer, wxOutputStream& stream)
		bool ExportXML(wxOutputStream& stream, wxMBConv* convMem, wxMBConv* convFile, wxRichTextObject&amp; obj, int level)
		wxString GetNodeContent(wxXmlNode* node)
		wxXmlNode* GetParamNode(wxXmlNode* node, const wxString& param)
		wxString GetParamValue(wxXmlNode* node, const wxString& param)
		bool GetStyle(wxTextAttrEx& attr, wxXmlNode* node, bool isPara = false)
		wxString GetText(wxXmlNode* node, const wxString& param = wxEmptyString, bool translate = false)
		bool HasParam(wxXmlNode* node, const wxString& param)
		bool ImportXML(wxRichTextBuffer* buffer, wxXmlNode* node)
<wx/sashwin.h>
	EVT_SASH_DRAGGED(id, func)
	EVT_SASH_DRAGGED_RANGE(id1, id2, func)
	class wxSashEvent public wxCommandEvent public wxEvent public wxObject
		wxSashEvent(int id = 0, wxSashEdgePosition edge = wxSASH_NONE)
		wxSashEdgePosition GetEdge() const
		wxRect GetDragRect() const
		wxSashDragStatus GetDragStatus() const
<wx/laywin.h>
	class wxSashLayoutWindow public wxSashWindow public wxWindow public wxEvtHandler public wxObject
		wxSashLayoutWindow()
		wxSashLayoutWindow(wxSashLayoutWindow* parent, wxWindowID id,const wxPoint& pos = wxDefaultPosition,const wxSize& size = wxDefaultSize,long style = wxCLIP_CHILDREN | wxSW_3D,const wxString& name = "layoutWindow")
		bool Create(wxSashLayoutWindow* parent, wxWindowID id,const wxPoint& pos = wxDefaultPosition,const wxSize& size = wxDefaultSize,long style = wxCLIP_CHILDREN | wxSW_3D,const wxString& name = "layoutWindow")
		wxLayoutAlignment GetAlignment() const
		wxLayoutOrientation GetOrientation() const
		void OnCalculateLayout(wxCalculateLayoutEvent& event)
		void OnQueryLayoutInfo(wxQueryLayoutInfoEvent& event)
		void SetAlignment(wxLayoutAlignment alignment)
		void SetDefaultSize(const wxSize& size)
		void SetOrientation(wxLayoutOrientation orientation)
<wx/sashwin.h>
	wxSW_3D
	wxSW_3DSASH
	wxSW_3DBORDER
	wxSW_BORDER
	EVT_SASH_DRAGGED(id, func)
	EVT_SASH_DRAGGED_RANGE(id1, id2, func)
	class wxSashWindow public wxWindow public wxEvtHandler public wxObject
		wxSashWindow()
		wxSashWindow(wxWindow* parent, wxWindowID id,const wxPoint& pos = wxDefaultPosition,const wxSize& size = wxDefaultSize,long style = wxCLIP_CHILDREN | wxSW_3D,const wxString& name = "sashWindow")
		~wxSashWindow()
		bool GetSashVisible(wxSashEdgePosition edge) const
		int GetMaximumSizeX() const
		int GetMaximumSizeY() const
		int GetMinimumSizeX()
		int GetMinimumSizeY() const
		bool HasBorder(wxSashEdgePosition edge) const
		void SetMaximumSizeX(int min)
		void SetMaximumSizeY(int min)
		void SetMinimumSizeX(int min)
		void SetMinimumSizeY(int min)
		void SetSashVisible(wxSashEdgePosition edge, bool visible)
		void SetSashBorder(wxSashEdgePosition edge, bool hasBorder)
<wx/ptr_scpd.h>
	class wxScopedArray
		wxScopedArray(type * T = NULL)
		reset(T p * = NULL)
		const T &amp; operator [](long inti)
		const T* get()
		swap(wxScopedPtr &amp; ot)
<wx/ptr_scpd.h>
	class wxScopedPtr
		explicit wxScopedPtr(type * T = NULL)
		~wxScopedPtr()
		T * release()
		reset(T p * = NULL)
		const T&amp; operator *()
		const T* operator ->() This operator works like the standard C++ pointer operator to return the pointerin the smart pointer or NULL if it is empty.
		const T* get()
		swap(wxScopedPtr &amp; other)
<wx/ptr_scpd.h>
	class wxScopedTiedPtr
		wxScopedTiedPtr(T **ppTie, T *ptr)
		~wxScopedTiedPtr()
<wx/dcscreen.h>
	class wxScreenDC public wxDC
		wxScreenDC()
		bool StartDrawingOnTop(wxWindow* window)
		bool StartDrawingOnTop(wxRect* rect = NULL)
		bool EndDrawingOnTop()
<wx/scrolbar.h>
	wxSB_HORIZONTAL
	wxSB_VERTICAL
	EVT_SCROLL(func)
	EVT_SCROLL_TOP(func)
	EVT_SCROLL_BOTTOM(func)
	EVT_SCROLL_LINEUP(func)
	EVT_SCROLL_LINEDOWN(func)
	EVT_SCROLL_PAGEUP(func)
	EVT_SCROLL_PAGEDOWN(func)
	EVT_SCROLL_THUMBTRACK(func)
	EVT_SCROLL_THUMBRELEASE(func)
	EVT_SCROLL_CHANGED(func)
	EVT_COMMAND_SCROLL(id, func)
	EVT_COMMAND_SCROLL_TOP(id, func)
	EVT_COMMAND_SCROLL_BOTTOM(id, func)
	EVT_COMMAND_SCROLL_LINEUP(id, func)
	EVT_COMMAND_SCROLL_LINEDOWN(id, func)
	EVT_COMMAND_SCROLL_PAGEUP(id, func)
	EVT_COMMAND_SCROLL_PAGEDOWN(id, func)
	EVT_COMMAND_SCROLL_THUMBTRACK(id, func)
	EVT_COMMAND_SCROLL_THUMBRELEASE(func)
	EVT_COMMAND_SCROLL_CHANGED(func)
	class wxScrollBar public wxControl public wxWindow public wxEvtHandler public wxObject
		wxScrollBar()
		wxScrollBar(wxWindow* parent, wxWindowID id,const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize,long style = wxSB_HORIZONTAL, const wxValidator& validator = wxDefaultValidator,const wxString& name = "scrollBar")
		void ~wxScrollBar()
		bool Create(wxWindow* parent, wxWindowID id,const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize,long style = wxSB_HORIZONTAL, const wxValidator& validator = wxDefaultValidator,const wxString& name = "scrollBar")
		int GetRange() const
		int GetPageSize() const
		int GetThumbPosition() const
		int GetThumbSize() const
		void SetThumbPosition(int viewStart)
		virtual void SetScrollbar(int position,int thumbSize, int range,int pageSize,const bool refresh = true)
<wx/scrolwin.h>
	wxRETAINED
	class wxScrolledWindow public wxPanel public wxWindow public wxEvtHandler public wxObject
		wxScrolledWindow()
		wxScrolledWindow(wxWindow* parent, wxWindowID id = -1,const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize,long style = wxHSCROLL | wxVSCROLL, const wxString& name = "scrolledWindow")
		~wxScrolledWindow()
		bool Create(wxWindow* parent, wxWindowID id = -1,const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize,long style = wxHSCROLL | wxVSCROLL, const wxString& name = "scrolledWindow")
		void EnableScrolling(const bool xScrolling, const bool yScrolling)
		void GetScrollPixelsPerUnit(int* xUnit, int* yUnit) const
		void GetViewStart(int* x, int* y) const
		void GetVirtualSize(int* x, int* y) const
		bool IsRetained() const
		void DoPrepareDC(wxDC& dc)
		virtual void OnDraw(wxDC& dc)
		void PrepareDC(wxDC& dc)
		void Scroll(int x, int y)
		void SetScrollbars(int pixelsPerUnitX, int pixelsPerUnitY,int noUnitsX, int noUnitsY,int xPos = 0, int yPos = 0,bool noRefresh = false)
		void SetScrollRate(int xstep, int ystep)
		void SetTargetWindow(wxWindow* window)
<wx/event.h>
	EVT_SCROLL(func)
	EVT_SCROLL_TOP(func)
	EVT_SCROLL_BOTTOM(func)
	EVT_SCROLL_LINEUP(func)
	EVT_SCROLL_LINEDOWN(func)
	EVT_SCROLL_PAGEUP(func)
	EVT_SCROLL_PAGEDOWN(func)
	EVT_SCROLL_THUMBTRACK(func)
	EVT_SCROLL_THUMBRELEASE(func)
	EVT_SCROLL_CHANGED(func)
	EVT_COMMAND_SCROLL(id, func)
	EVT_COMMAND_SCROLL_TOP(id, func)
	EVT_COMMAND_SCROLL_BOTTOM(id, func)
	EVT_COMMAND_SCROLL_LINEUP(id, func)
	EVT_COMMAND_SCROLL_LINEDOWN(id, func)
	EVT_COMMAND_SCROLL_PAGEUP(id, func)
	EVT_COMMAND_SCROLL_PAGEDOWN(id, func)
	EVT_COMMAND_SCROLL_THUMBTRACK(id, func)
	EVT_COMMAND_SCROLL_THUMBRELEASE(func)
	EVT_COMMAND_SCROLL_CHANGED(func)
	class wxScrollEvent public wxCommandEvent public wxEvent public wxObject
		wxScrollEvent(WXTYPE commandType = 0, int id = 0, int pos = 0,int orientation = 0)
		int GetOrientation() const
		int GetPosition() const
<wx/event.h>
	EVT_SCROLLWIN(func)
	EVT_SCROLLWIN_TOP(func)
	EVT_SCROLLWIN_BOTTOM(func)
	EVT_SCROLLWIN_LINEUP(func)
	EVT_SCROLLWIN_LINEDOWN(func)
	EVT_SCROLLWIN_PAGEUP(func)
	EVT_SCROLLWIN_PAGEDOWN(func)
	EVT_SCROLLWIN_THUMBTRACK(func)
	EVT_SCROLLWIN_THUMBRELEASE(func)
	class wxScrollWinEvent public wxEvent public wxObject
		wxScrollWinEvent(WXTYPE commandType = 0, int pos = 0,int orientation = 0)
		int GetOrientation() const
		int GetPosition() const
<wx/thread.h>
	class wxSemaphore
		wxSemaphore(int initialcount = 0, int maxcount = 0)
		~wxSemaphore()
		wxSemaError Post()
		wxSemaError TryWait()
		wxSemaError Wait()
		wxSemaError WaitTimeout(unsignedlongtimeout_millis)
<wx/event.h>
	EVT_SET_CURSOR(func)
	class wxSetCursorEvent public wxEvent public wxObject
		wxSetCursorEvent(wxCoordx = 0, wxCoordy = 0)
		wxCursor GetCursor() const
		wxCoord GetX() const
		wxCoord GetY() const
		bool HasCursor() const
		void SetCursor(const wxCursor&cursor)
<wx/ipc.h>
	class wxServer
		wxServer()
		bool Create(const wxString& service)
		virtual wxConnectionBase * OnAcceptConnection(const wxString& topic)
<wx/cshelp.h>
	class wxSimpleHelpProvider public wxHelpProvider
<wx/srchctrl.h>
	wxTE_PROCESS_ENTER
	wxTE_PROCESS_TAB
	wxTE_NOHIDESEL
	wxTE_LEFT
	wxTE_CENTRE
	wxTE_RIGHT
	wxTE_CAPITALIZE
	EVT_SEARCHCTRL_SEARCH_BTN(id, func)
	EVT_SEARCHCTRL_CANCEL_BTN(id, func)
	class wxSearchCtrl public wxTextCtrl public wxControl public wxWindow public wxEvtHandler public wxObject
		wxSearchCtrl()
		wxSearchCtrl(wxWindow* parent, wxWindowID id,const wxString& value = "", const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize,long style = 0, const wxValidator& validator = wxDefaultValidator, const wxString& name = wxSearchCtrlNameStr)
		~wxSearchCtrl()
		virtual void SetMenu(wxMenu* menu)
		virtual wxMenu* GetMenu()
		virtual void ShowSearchButton(bool show)
		virtual bool IsSearchButtonVisible()
		virtual void ShowCancelButton(bool show)
		virtual bool IsCancelButtonVisible()
<wx/choicdlg.h>
	class wxSingleChoiceDialog public wxDialog public wxWindow public wxEvtHandler public wxObject
		wxSingleChoiceDialog(wxWindow* parent, const wxString& message,const wxString& caption, int n, const wxString* choices,void** clientData = NULL, long style = wxCHOICEDLG_STYLE,const wxPoint& pos = wxDefaultPosition)
		wxSingleChoiceDialog(wxWindow* parent, const wxString& message,const wxString& caption, const wxArrayString& choices,void** clientData = NULL, long style = wxCHOICEDLG_STYLE,const wxPoint& pos = wxDefaultPosition)
		int GetSelection() const
		char* GetSelectionClientData() const
		wxString GetStringSelection() const
		void SetSelection(int selection) const
		int ShowModal()
<wx/snglinst.h>
	class wxSingleInstanceChecker
		wxSingleInstanceChecker()
		wxSingleInstanceChecker(const wxString& name, const wxString& path = wxEmptyString)
		bool Create(const wxString& name, const wxString& path = wxEmptyString)
		bool IsAnotherRunning() const
		~wxSingleInstanceChecker()
<wx/gdicmn.h>
	class wxSize
		wxSize()
		wxSize(int width, int height)
		void DecBy(const wxSize& size)
		void DecBy(int dx, int dy)
		void DecBy(int d)
		void DecTo(const wxSize& size)
		bool IsFullySpecified() const
		int GetWidth() const
		int GetHeight() const
		void IncBy(const wxSize& size)
		void IncBy(int dx, int dy)
		void IncBy(int d)
		void IncTo(const wxSize& size)
		wxSize& Scale(float xscale, float yscale)
		void Set(int width, int height)
		void SetDefaults(const wxSize& sizeDefault)
		void SetHeight(int height)
		void SetWidth(int width)
		void operator =(const wxSize& sz)
		bool operator ==(const wxSize& sz) const
		bool operator !=(const wxSize& sz) const
		wxSize operator +(const wxSize& sz)
		wxSize operator -(const wxSize& sz)
		wxSize& operator +=(const wxSize& sz)
		wxSize& operator -=(const wxSize& sz)
		wxSize operator /(int factor)
		wxSize operator *(int factor)
		wxSize& operator /=(int factor)
		wxSize& operator *=(int factor)
<wx/event.h>
	EVT_SIZE(func)
	class wxSizeEvent public wxEvent public wxObject
		wxSizeEvent(const wxSize& sz, int id = 0)
		wxSize GetSize() const
<wx/sizer.h>
	class wxSizer public wxObject public wxClientDataContainer
		wxSizer()
		~wxSizer()
		wxSizerItem* Add(wxWindow* window, const wxSizerFlags& flags)
		wxSizerItem* Add(wxWindow* window, int proportion = 0,int flag = 0, int border = 0, wxObject* userData = NULL)
		wxSizerItem* Add(wxSizer* sizer, const wxSizerFlags& flags)
		wxSizerItem* Add(wxSizer* sizer, int proportion = 0, int flag = 0, int border = 0, wxObject* userData = NULL)
		wxSizerItem* Add(int width, int height, int proportion = 0, int flag = 0, int border = 0, wxObject* userData = NULL)
		wxSizerItem* AddSpacer(int size)
		wxSizerItem* AddStretchSpacer(int prop = 1)
		wxSize CalcMin()
		void Clear(bool delete_windows = false)
		wxSize ComputeFittingClientSize(wxWindow* window)
		wxSize ComputeFittingWindowSize(wxWindow* window)
		bool Detach(wxWindow* window)
		bool Detach(wxSizer* sizer)
		bool Detach(size_t index)
		wxSize Fit(wxWindow* window)
		void FitInside(wxWindow* window)
		wxSizerItemList&amp; GetChildren()
		wxWindow * GetContainingWindow() const
		wxSizerItem * GetItem(wxWindow* window, bool recursive = false)
		wxSizerItem * GetItem(wxSizer* sizer, bool recursive = false)
		wxSizerItem * GetItem(size_t index)
		wxSize GetSize()
		wxPoint GetPosition()
		wxSize GetMinSize()
		bool Hide(wxWindow* window, bool recursive = false)
		bool Hide(wxSizer* sizer, bool recursive = false)
		bool Hide(size_t index)
		wxSizerItem* Insert(size_t index, wxWindow* window, const wxSizerFlags& flags)
		wxSizerItem* Insert(size_t index, wxWindow* window, int proportion = 0,int flag = 0, int border = 0, wxObject* userData = NULL)
		wxSizerItem* Insert(size_t index, wxSizer* sizer, const wxSizerFlags& flags)
		wxSizerItem* Insert(size_t index, wxSizer* sizer, int proportion = 0, int flag = 0, int border = 0, wxObject* userData = NULL)
		wxSizerItem* Insert(size_t index, int width, int height, int proportion = 0, int flag = 0, int border = 0, wxObject* userData = NULL)
		wxSizerItem* InsertSpacer(size_t index, int size)
		wxSizerItem* InsertStretchSpacer(size_t index, int prop = 1)
		bool IsShown(wxWindow* window) const
		bool IsShown(wxSizer* sizer) const
		bool IsShown(size_t index) const
		void Layout()
		wxSizerItem* Prepend(wxWindow* window, const wxSizerFlags& flags)
		wxSizerItem* Prepend(wxWindow* window, int proportion = 0, int flag = 0, int border = 0, wxObject* userData = NULL)
		wxSizerItem* Prepend(wxSizer* sizer, const wxSizerFlags& flags)
		wxSizerItem* Prepend(wxSizer* sizer, int proportion = 0, int flag = 0, int border = 0, wxObject* userData = NULL)
		wxSizerItem* Prepend(int width, int height, int proportion = 0, int flag = 0, int border= 0, wxObject* userData = NULL)
		wxSizerItem* PrependSpacer(int size)
		wxSizerItem* PrependStretchSpacer(int prop = 1)
		void RecalcSizes()
		bool Remove(wxWindow* window)
		bool Remove(wxSizer* sizer)
		bool Remove(size_t index)
		bool Replace(wxWindow* oldwin, wxWindow* newwin, bool recursive = false)
		bool Replace(wxSizer* oldsz, wxSizer* newsz, bool recursive = false)
		bool Remove(size_t oldindex, wxSizerItem* newitem)
		void SetDimension(int x, int y, int width, int height)
		void SetMinSize(int width, int height)
		void SetMinSize(const wxSize& size)
		void SetItemMinSize(wxWindow* window, int width, int height)
		void SetItemMinSize(wxSizer* sizer, int width, int height)
		void SetItemMinSize(size_t index, int width, int height)
		void SetSizeHints(wxWindow* window)
		void SetVirtualSizeHints(wxWindow* window)
		bool Show(wxWindow* window, bool show = true, bool recursive = false)
		bool Show(wxSizer* sizer, bool show = true, bool recursive = false)
		bool Show(size_t index, bool show = true)
	class wxSizerFlags
		wxSizerFlags(int proportion = 0)
		wxSizerFlags& Align(int align = 0)
		wxSizerFlags& Border(int direction, int borderinpixels)
		wxSizerFlags& Border(int direction = wxALL)
		wxSizerFlags& Center()
		wxSizerFlags& Centre()
		wxSizerFlags& DoubleBorder(int direction = wxALL)
		wxSizerFlags& DoubleHorzBorder()
		wxSizerFlags& Expand()
		static int GetDefaultBorder()
		wxSizerFlags& Left()
		wxSizerFlags& FixedMinSize()
		wxSizerFlags& Proportion(int proportion = 0)
		wxSizerFlags& ReserveSpaceEvenIfHidden()
		wxSizerFlags& Right()
		wxSizerFlags& Shaped()
		wxSizerFlags& TripleBorder(int direction = wxALL)
<wx/sizer.h>
	class wxSizerItem public wxObject
		wxSizerItem(int width, int height, int proportion, int flag, int border, wxObject* userData)
		wxSizerItem(wxWindow* window, const wxSizerFlags& flags)
		wxSizerItem(wxWindow* window, int proportion, int flag, int border, wxObject* userData)
		wxSizerItem(wxSizer* window, const wxSizerFlags& flags)
		wxSizerItem(wxSizer* sizer, int proportion, int flag, int border, wxObject* userData)
		~wxSizerItem()
		wxSize CalcMin()
		void DeleteWindows()
		void DetachSizer()
		int GetBorder() const
		int GetFlag() const
		wxSize GetMinSize() const
		wxPoint GetPosition() const
		int GetProportion() const
		float GetRatio() const
		wxRect GetRect()
		wxSize GetSize() const
		wxSizer* GetSizer() const
		const wxSize& GetSpacer() const
		wxObject* GetUserData() const
		wxWindow* GetWindow() const
		bool IsSizer() const
		bool IsShown() const
		bool IsSpacer() const
		bool IsWindow() const
		void SetBorder(int border)
		void SetDimension(const wxPoint& pos, const wxSize& size)
		void SetFlag(int flag)
		void SetInitSize(int x, int y)
		void SetProportion(int proportion)
		void SetRatio(int width, int height)
		void SetRatio(wxSize size)
		void SetRatio(float ratio)
		void SetSizer(wxSizer* sizer)
		void SetSpacer(const wxSize& size)
		void SetWindow(wxWindow* window)
		void Show(bool show)
<wx/slider.h>
	wxSL_HORIZONTAL
	wxSL_VERTICAL
	wxSL_AUTOTICKS
	wxSL_LABELS
	wxSL_LEFT
	wxSL_RIGHT
	wxSL_TOP
	wxSL_BOTTOM
	wxSL_SELRANGE
	wxSL_INVERSE
	EVT_SCROLL(func)
	EVT_SCROLL_TOP(func)
	EVT_SCROLL_BOTTOM(func)
	EVT_SCROLL_LINEUP(func)
	EVT_SCROLL_LINEDOWN(func)
	EVT_SCROLL_PAGEUP(func)
	EVT_SCROLL_PAGEDOWN(func)
	EVT_SCROLL_THUMBTRACK(func)
	EVT_SCROLL_THUMBRELEASE(func)
	EVT_SCROLL_CHANGED(func)
	EVT_COMMAND_SCROLL(id, func)
	EVT_COMMAND_SCROLL_TOP(id, func)
	EVT_COMMAND_SCROLL_BOTTOM(id, func)
	EVT_COMMAND_SCROLL_LINEUP(id, func)
	EVT_COMMAND_SCROLL_LINEDOWN(id, func)
	EVT_COMMAND_SCROLL_PAGEUP(id, func)
	EVT_COMMAND_SCROLL_PAGEDOWN(id, func)
	EVT_COMMAND_SCROLL_THUMBTRACK(id, func)
	EVT_COMMAND_SCROLL_THUMBRELEASE(func)
	EVT_COMMAND_SCROLL_CHANGED(func)
	class wxSlider public wxControl public wxWindow public wxEvtHandler public wxObject
		wxSlider()
		wxSlider(wxWindow* parent, wxWindowID id, int value ,int minValue, int maxValue,const wxPoint& point = wxDefaultPosition, const wxSize& size = wxDefaultSize,long style = wxSL_HORIZONTAL,const wxValidator& validator = wxDefaultValidator,const wxString& name = "slider")
		void ~wxSlider()
		void ClearSel()
		void ClearTicks()
		bool Create(wxWindow* parent, wxWindowID id, int value ,int minValue, int maxValue,const wxPoint& point = wxDefaultPosition, const wxSize& size = wxDefaultSize,long style = wxSL_HORIZONTAL,const wxValidator& validator = wxDefaultValidator,const wxString& name = "slider")
		int GetLineSize() const
		int GetMax() const
		int GetMin() const
		int GetPageSize() const
		int GetSelEnd() const
		int GetSelStart() const
		int GetThumbLength() const
		int GetTickFreq() const
		int GetValue() const
		void SetLineSize(int lineSize)
		void SetPageSize(int pageSize)
		void SetRange(int minValue, int maxValue)
		void SetSelection(int startPos, int endPos)
		void SetThumbLength(int len)
		void SetTick(int tickPos)
		void SetTickFreq(int n, int pos)
		void SetValue(int value)
<wx/socket.h>
	class wxSockAddress public wxObject
		wxSockAddress()
		~wxSockAddress()
		void Clear()
<wx/socket.h>
	EVT_SOCKET(id, func)
	class wxSocketBase public wxObject
		wxSocketBase()
		~wxSocketBase()
		void Close()
		bool Destroy()
		wxSocketBase& Discard()
		bool Error() const
		void * GetClientData() const
		bool GetLocal(wxSockAddress& addr) const
		wxSocketFlags GetFlags() const
		bool GetPeer(wxSockAddress& addr) const
		void InterruptWait()
		bool IsConnected() const
		bool IsData() const
		bool IsDisconnected() const
		wxUint32 LastCount() const
		wxSocketError LastError() const
		void Notify(bool notify)
		bool IsOk() const
		void RestoreState()
		void SaveState()
		void SetClientData(void *data)
		void SetEventHandler(wxEvtHandler& handler, int id = -1)
		void SetFlags(wxSocketFlags flags)
		bool SetLocal(wxIPV4address& local)
		void SetNotify(wxSocketEventFlags flags)
		void SetTimeout(int seconds)
		wxSocketBase& Peek(void * buffer, wxUint32 nbytes)
		wxSocketBase& Read(void * buffer, wxUint32 nbytes)
		wxSocketBase& ReadMsg(void * buffer, wxUint32 nbytes)
		wxSocketBase& Unread(const void * buffer, wxUint32 nbytes)
		bool Wait(long seconds = -1, long millisecond = 0)
		bool Wait(long seconds = -1, long millisecond = 0)
		bool WaitForRead(long seconds = -1, long millisecond = 0)
		bool WaitForWrite(long seconds = -1, long millisecond = 0)
		wxSocketBase& Write(const void * buffer, wxUint32 nbytes)
		wxSocketBase& WriteMsg(const void * buffer, wxUint32 nbytes)
<wx/socket.h>
	class wxSocketClient public wxSocketBase
		wxSocketClient(wxSocketFlags flags = wxSOCKET_NONE)
		~wxSocketClient()
		bool Connect(wxSockAddress& address, bool wait = true)
		bool Connect(wxSockAddress& address, wxSockAddress& local,bool wait = true)
		bool WaitOnConnect(long seconds = -1, long milliseconds = 0)
<wx/socket.h>
	EVT_SOCKET(id, func)
	class wxSocketEvent public wxEvent
		wxSocketEvent(int id = 0)
		void * GetClientData()
		wxSocketBase * GetSocket() const
		wxSocketNotify GetSocketEvent() const
<wx/sckstrm.h>
	class wxSocketInputStream public wxInputStream
		wxSocketInputStream(wxSocketBase& s)
<wx/sckstrm.h>
	class wxSocketOutputStream public wxOutputStream
		wxSocketOutputStream(wxSocketBase& s)
<wx/socket.h>
	class wxSocketServer public wxSocketBase
		wxSocketServer(const wxSockAddress& address, wxSocketFlags flags = wxSOCKET_NONE)
		~wxSocketServer()
		wxSocketBase * Accept(bool wait = true)
		bool AcceptWith(wxSocketBase& socket, bool wait = true)
		bool WaitForAccept(long seconds = -1, long millisecond = 0)
<wx/sound.h>
	class wxSound public wxObject
		wxSound()
		wxSound(const wxString& fileName, bool isResource = false)
		~wxSound()
		bool Create(const wxString& fileName, bool isResource = false)
		bool IsOk() const
		static bool IsPlaying() const
		bool Play(unsigned flags = wxSOUND_ASYNC) const
		static bool Play(const wxString& filename, unsigned flags = wxSOUND_ASYNC)
		static void Stop()
<wx/spinbutt.h>
	wxSP_HORIZONTAL
	wxSP_VERTICAL
	wxSP_ARROW_KEYS
	wxSP_WRAP
	EVT_SPIN(id, func)
	EVT_SPIN_UP(id, func)
	EVT_SPIN_DOWN(id, func)
	class wxSpinButton public wxControl public wxWindow public wxEvtHandler public wxObject
		wxSpinButton()
		wxSpinButton(wxWindow* parent, wxWindowID id,const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize,long style = wxSP_HORIZONTAL,const wxString& name = "spinButton")
		void ~wxSpinButton()
		bool Create(wxWindow* parent, wxWindowID id,const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize,long style = wxSP_HORIZONTAL,const wxString& name = "spinButton")
		int GetMax() const
		int GetMin() const
		int GetValue() const
		void SetRange(int min, int max)
		void SetValue(int value)
<wx/spinctrl.h>
	wxSP_ARROW_KEYS
	wxSP_WRAP
	EVT_SPINCTRL(id, func)
	class wxSpinCtrl public wxControl public wxWindow public wxEvtHandler public wxObject
		wxSpinCtrl()
		wxSpinCtrl(wxWindow* parent, wxWindowID id = -1, const wxString& value = wxEmptyString, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxSP_ARROW_KEYS, int min = 0, int max = 100, int initial = 0, const wxString& name = _T("wxSpinCtrl"))
		bool Create(wxWindow* parent, wxWindowID id = -1, const wxString& value = wxEmptyString, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxSP_ARROW_KEYS, int min = 0, int max = 100, int initial = 0, const wxString& name = _T("wxSpinCtrl"))
		void SetValue(const wxString& text)
		void SetValue(int value)
		int GetValue() const
		void SetRange(int minVal, int maxVal)
		void SetSelection(long from, long to)
		int GetMin() const
		int GetMax() const
<wx/spinbutt.h>
	EVT_SPIN(id, func)
	EVT_SPIN_UP(id, func)
	EVT_SPIN_DOWN(id, func)
	class wxSpinEvent public wxNotifyEvent public wxCommandEvent public wxEvent public wxObject
		wxSpinEvent(wxEventType commandType = wxEVT_NULL, int id = 0)
		int GetPosition() const
		void SetPosition(int pos)
<wx/splash.h>
	class wxSplashScreen public wxFrame public wxWindow public wxEvtHandler public wxObject
		wxSplashScreen(const wxBitmap& bitmap, long splashStyle, int milliseconds, wxWindow* parent, wxWindowID id, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxSIMPLE_BORDER|wxFRAME_NO_TASKBAR|wxSTAY_ON_TOP)
		~wxSplashScreen()
		void OnCloseWindow(wxCloseEvent& event)
		long GetSplashStyle() const
		wxSplashScreenWindow* GetSplashWindow() const
		int GetTimeout() const
<wx/splitter.h>
	EVT_SPLITTER_SASH_POS_CHANGING(id, func)
	EVT_SPLITTER_SASH_POS_CHANGED(id, func)
	EVT_SPLITTER_UNSPLIT(id, func)
	EVT_SPLITTER_DCLICK(id, func)
	class wxSplitterEvent public wxNotifyEvent public wxCommandEvent public wxEvent public wxObject
		wxSplitterEvent(wxEventType eventType = wxEVT_NULL,wxSplitterWindow * splitter = NULL)
		int GetSashPosition() const
		int GetX() const
		int GetY() const
		wxWindow* GetWindowBeingRemoved() const
		void SetSashPosition(int pos)
	wxSP_3D
	wxSP_3DSASH
	wxSP_3DBORDER
	wxSP_BORDER
	wxSP_NOBORDER
	wxSP_NO_XP_THEME
	wxSP_PERMIT_UNSPLIT
	wxSP_LIVE_UPDATE
<wx/splitter.h>
	EVT_SPLITTER_SASH_POS_CHANGING(id, func)
	EVT_SPLITTER_SASH_POS_CHANGED(id, func)
	EVT_SPLITTER_UNSPLIT(id, func)
	EVT_SPLITTER_DCLICK(id, func)
	class wxSplitterWindow public wxWindow public wxEvtHandler public wxObject
		wxSplitterWindow()
		wxSplitterWindow(wxWindow* parent, wxWindowID id,const wxPoint& point = wxDefaultPosition, const wxSize& size = wxDefaultSize,long style=wxSP_3D, const wxString& name = "splitterWindow")
		~wxSplitterWindow()
		bool Create(wxWindow* parent, wxWindowID id, const wxPoint& point = wxDefaultPosition, const wxSize& size = wxDefaultSize,long style=wxSP_3D, const wxString& name = "splitterWindow")
		int GetMinimumPaneSize() const
		double GetSashGravity()
		int GetSashPosition()
		int GetSplitMode() const
		wxWindow* GetWindow1() const
		wxWindow* GetWindow2() const
		void Initialize(wxWindow* window)
		bool IsSplit() const
		virtual void OnDoubleClickSash(int x, int y)
		virtual void OnUnsplit(wxWindow* removed)
		virtual bool OnSashPositionChange(int newSashPosition)
		bool ReplaceWindow(wxWindow * winOld, wxWindow * winNew)
		void SetSashGravity(double gravity)
		void SetSashPosition(int position, const bool redraw = true)
		void SetSashSize(int size)
		void SetMinimumPaneSize(int paneSize)
		void SetSplitMode(int mode)
		bool SplitHorizontally(wxWindow* window1, wxWindow* window2,int sashPosition = 0)
		bool SplitVertically(wxWindow* window1, wxWindow* window2,int sashPosition = 0)
		bool Unsplit(wxWindow* toRemove = NULL)
		void UpdateSize()
<wx/renderer.h>
	class wxSplitterRenderParams
<wx/stackwalk.h>
	class wxStackFrame
		void* GetAddress() const
		wxString GetFileName() const
		size_t GetLevel() const
		size_t GetLine() const
		wxString GetModule() const
		wxString GetName() const
		size_t GetOffset() const
		bool GetParam(size_t n, wxString * type, wxString * name, wxString * value) const
		size_t GetParamCount() const
		bool HasSourceLocation() const
<wx/stackwalk.h>
	class wxStackWalker
		wxStackWalker()
		~wxStackWalker()
		void OnStackFrame(const wxStackFrame& frame)
		void Walk(size_t skip = 1, size_t maxDepth = 200)
		void WalkFromException()
<wx/stdpaths.h>
	class wxStandardPaths
		static wxStandardPathsBase&amp; Get()
		wxString GetConfigDir() const
		wxString GetDataDir() const
		wxString GetDocumentsDir() const
		wxString GetExecutablePath() const
		wxString GetInstallPrefix() const
		wxString GetLocalDataDir() const
		wxString GetLocalizedResourcesDir(const wxChar* lang, ResourceCat category = ResourceCat_None) const
		wxString GetPluginsDir() const
		wxString GetResourcesDir() const
		wxString GetTempDir() const
		wxString GetUserConfigDir() const
		wxString GetUserDataDir() const
		wxString GetUserLocalDataDir() const
		void SetInstallPrefix(const wxString& prefix)
<wx/statbmp.h>
	class wxStaticBitmap public wxControl public wxWindow public wxEvtHandler public wxObject
		wxStaticBitmap()
		wxStaticBitmap(wxWindow* parent, wxWindowID id,const wxBitmap& label, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize,long style = 0, const wxString& name = "staticBitmap")
		bool Create(wxWindow* parent, wxWindowID id,const wxBitmap& label, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize,long style = 0, const wxString& name = "staticBitmap")
		wxBitmap GetBitmap() const
		wxIcon GetIcon() const
		virtual void SetBitmap(const wxBitmap& label)
		virtual void SetIcon(const wxIcon& label)
<wx/statbox.h>
	class wxStaticBox public wxControl public wxWindow public wxEvtHandler public wxObject
		wxStaticBox()
		wxStaticBox(wxWindow* parent, wxWindowID id, const wxString& label,const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize,long style = 0, const wxString& name = "staticBox")
		void ~wxStaticBox()
		bool Create(wxWindow* parent, wxWindowID id, const wxString& label,const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize,long style = 0, const wxString& name = "staticBox")
<wx/sizer.h>
	class wxStaticBoxSizer public wxBoxSizer public wxSizer public wxObject
		wxStaticBoxSizer(wxStaticBox* box, int orient)
		wxStaticBoxSizer(int orient, wxWindow *parent, const wxString& label = wxEmptyString)
		wxStaticBox* GetStaticBox()
<wx/statline.h>
	wxLI_HORIZONTAL
	wxLI_VERTICAL
	class wxStaticLine public wxControl public wxWindow public wxEvtHandler public wxObject
		wxStaticLine()
		wxStaticLine(wxWindow* parent, wxWindowID id = wxID_ANY,const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize,long style = wxLI_HORIZONTAL, const wxString& name = "staticLine")
		bool Create(wxWindow* parent, wxWindowID id = wxID_ANY,const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize,long style = 0, const wxString& name = "staticLine")
		bool IsVertical() const
		int GetDefaultSize()
<wx/stattext.h>
	wxALIGN_LEFT
	wxALIGN_RIGHT
	wxALIGN_CENTRE
	wxST_NO_AUTORESIZE
	class wxStaticText public wxControl public wxWindow public wxEvtHandler public wxObject
		wxStaticText()
		wxStaticText(wxWindow* parent, wxWindowID id,const wxString& label, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize,long style = 0, const wxString& name = "staticText")
		bool Create(wxWindow* parent, wxWindowID id,const wxString& label, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize,long style = 0, const wxString& name = "staticText")
		wxString GetLabel() const
		virtual void SetLabel(const wxString& label)
		void Wrap(int width)
<wx/statusbr.h>
	wxST_SIZEGRIP
	class wxStatusBar public wxWindow public wxEvtHandler public wxObject
		wxStatusBar()
		wxStatusBar(wxWindow* parent, wxWindowID id = wxID_ANY,long style = wxST_SIZEGRIP,const wxString& name = "statusBar")
		void ~wxStatusBar()
		bool Create(wxWindow* parent, wxWindowID id = wxID_ANY,long style = wxST_SIZEGRIP,const wxString& name = "statusBar")
		virtual bool GetFieldRect(int i, wxRect& rect) const
		int GetFieldsCount() const
		virtual wxString GetStatusText(int i = 0) const
		void PopStatusText(int field = 0)
		void PushStatusText(const wxString& string, int field = 0)
		virtual void SetFieldsCount(int number = 1, int* widths = NULL)
		void SetMinHeight(int height)
		virtual void SetStatusText(const wxString& text, int i = 0)
		virtual void SetStatusWidths(int n, int *widths)
		virtual void SetStatusStyles(int n, int *styles)
<wx/sizer.h>
	class wxStdDialogButtonSizer public wxBoxSizer public wxSizer public wxObject
		wxStdDialogButtonSizer()
		void AddButton(wxButton* button)
		void Realize()
		void SetAffirmativeButton(wxButton* button)
		void SetCancelButton(wxButton* button)
		void SetNegativeButton(wxButton* button)
<wx/stopwatch.h>
	class wxStopWatch
		wxStopWatch()
		void Pause()
		void Resume()
		void Start(long milliseconds = 0)
		long Time() const
<wx/stream.h>
	class wxStreamBase
		wxStreamBase()
		~wxStreamBase()
		wxFileOffset GetLength() const
		wxStreamError GetLastError() const
		size_t GetSize() const
		virtual bool IsOk() const
		bool IsSeekable() const
		size_t OnSysRead(void* buffer, size_t bufsize)
		off_t OnSysSeek(off_t pos, wxSeekMode mode)
		off_t OnSysTell() const
		size_t OnSysWrite(const void *buffer, size_t bufsize)
<wx/stream.h>
	class wxStreamBuffer
		wxStreamBuffer(wxStreamBase& stream, BufMode mode)
		wxStreamBuffer(BufMode mode)
		wxStreamBuffer(const wxStreamBuffer&buffer)
		size_t Read(void *buffer, size_t size)
		size_t Read(wxStreamBuffer *buffer)
		size_t Write(const void *buffer, size_t size)
		size_t Write(wxStreamBuffer *buffer)
		char GetChar()
		void PutChar(char c)
		off_t Tell() const
		off_t Seek(off_t pos, wxSeekMode mode)
		void ResetBuffer()
		void SetBufferIO(char* buffer_start, char* buffer_end)
		void SetBufferIO(size_t bufsize)
		void * GetBufferStart() const
		void * GetBufferEnd() const
		void * GetBufferPos() const
		off_t GetIntPosition() const
		void SetIntPosition(size_t pos)
		size_t GetLastAccess() const
		void Fixed(bool fixed)
		void Flushable(bool flushable)
		bool FlushBuffer()
		bool FillBuffer()
		size_t GetDataLeft()
		wxStreamBase* Stream()
<wx/textctrl.h>
	class wxStreamToTextRedirector
		wxStreamToTextRedirector(wxTextCtrl *text, ostream *ostr = NULL)
		~wxStreamToTextRedirector()
<wx/string.h>
	class wxString
		wxString()
		wxString(const wxString& x)
		wxString(wxChar ch, size_t n = 1)
		wxString(const wxChar* psz, size_t nLength = wxSTRING_MAXLEN)
		wxString(const unsigned char* psz, size_t nLength = wxSTRING_MAXLEN)
		wxString(const wchar_t* psz, wxMBConv& conv, size_t nLength = wxSTRING_MAXLEN)
		wxString(const char* psz, wxMBConv& conv, size_t nLength = wxSTRING_MAXLEN)
		~wxString()
		void Alloc(size_t nLen)
		wxString& Append(const wxChar* psz)
		wxString& Append(wxChar ch, int count = 1)
		wxString AfterFirst(wxChar ch) const
		wxString AfterLast(wxChar ch) const
		wxString BeforeFirst(wxChar ch) const
		wxString BeforeLast(wxChar ch) const
		const wxChar * c_str() const
		wxWritableCharBuffer char_str(wxMBConv& conv = wxConvLibc) const
		void Clear()
		int Cmp(const wxString& s) const
		int Cmp(const wxChar* psz) const
		int CmpNoCase(const wxString& s) const
		int CmpNoCase(const wxChar* psz) const
		int CompareTo(const wxChar* psz, caseCompare cmp = exact) const
		bool Contains(const wxString& str) const
		void Empty()
		int Find(wxChar ch, bool fromEnd = false) const
		int Find(const wxChar* sz) const
		int First(wxChar c)
		int First(const wxChar* psz) const
		int First(const wxString& str) const
		const wchar_t* fn_str() const
		const char* fn_str() const
		const wxCharBuffer fn_str() const
		static wxString Format(const wxChar *format, ...)
		static wxString FormatV(const wxChar *format, va_list argptr)
		int Freq(wxChar ch) const
		static wxString From8BitData(const char* buf, size_tlen)
		static wxString From8BitData(const char* buf)
		static wxString FromAscii(const char* s)
		static wxString FromAscii(const char c)
		static wxString FromUTF8(const char* s)
		static wxString FromUTF8(const char* s, size_t len)
		wxChar GetChar(size_t n) const
		const wxChar* GetData() const
		wxChar&amp; GetWritableChar(size_t n)
		wxChar* GetWriteBuf(size_t len)
		size_t Index(wxChar ch) const
		size_t Index(const wxChar* sz) const
		bool IsAscii() const
		bool IsEmpty() const
		bool IsNull() const
		bool IsNumber() const
		bool IsSameAs(const wxChar* psz, bool caseSensitive = true) const
		bool IsSameAs(wxChar c, bool caseSensitive = true) const
		bool IsWord() const
		wxChar Last() const
		wxChar&amp; Last()
		wxString Left(size_t count) const
		size_t Len() const
		size_t Length() const
		wxString Lower() const
		void LowerCase()
		wxString& MakeLower()
		wxString& MakeUpper()
		bool Matches(const wxChar* szMask) const
		const char* mb_str(wxMBConv& conv) const
		const wxCharBuffer mb_str(wxMBConv& conv) const
		wxString Mid(size_t first, size_t count = wxSTRING_MAXLEN) const
		wxString& Pad(size_t count, wxChar pad = ' ', bool fromRight = true)
		wxString& Prepend(const wxString& str)
		int Printf(const wxChar* pszFormat, ...)
		int PrintfV(const wxChar* pszFormat, va_list argPtr)
		wxString& Remove(size_t pos)
		wxString& Remove(size_t pos, size_t len)
		wxString& RemoveLast()
		size_t Replace(const wxChar* szOld, const wxChar* szNew, bool replaceAll = true)
		wxString Right(size_t count) const
		void SetChar(size_t n, wxCharch)
		void Shrink()
		bool StartsWith(const wxChar *prefix, wxString *rest = NULL) const
		bool EndsWith(const wxChar *suffix, wxString *rest = NULL) const
		wxString Strip(stripType s = trailing) const
		wxString SubString(size_t from, size_t to) const
		const char* To8BitData() const
		const wxCharBuffer To8BitData() const
		const char* ToAscii() const
		const wxCharBuffer ToAscii() const
		bool ToDouble(double *val) const
		bool ToLong(long *val, int base = 10) const
		bool ToLongLong(wxLongLong_t *val, int base = 10) const
		bool ToULong(unsigned long *val, int base = 10) const
		bool ToULongLong(wxULongLong_t *val, int base = 10) const
		const wxCharBuffer ToUF8() const
		wxString& Trim(bool fromRight = true)
		wxString& Truncate(size_t len)
		void UngetWriteBuf()
		void UngetWriteBuf(size_t len)
		wxString Upper() const
		void UpperCase()
		const wxCharBuffer utf8_str() const
		const wchar_t* wc_str(wxMBConv& conv) const
		const wxWCharBuffer wc_str(wxMBConv& conv) const
		wxWritableWCharBuffer wchar_str() const
		bool operator!() const
		wxString& operator =(const wxString& str)
		wxString& operator =(const wxChar* psz)
		wxString& operator =(wxChar c)
		wxString operator +(const wxString& x, const wxString& y)
		wxString operator +(const wxString& x, const wxChar* y)
		wxString operator +(const wxString& x, wxChar y)
		wxString operator +(const wxChar* x, const wxString& y)
		void operator +=(const wxString& str)
		void operator +=(const wxChar* psz)
		void operator +=(wxChar c)
		wxChar&amp; operator [](size_t i)
		wxChar operator [](size_t i) const
		wxChar&amp; operator [](int i)
		wxChar operator [](int i) const
		wxString operator ()(size_t start, size_t len)
		wxString& operator <<(const wxString& str)
		wxString& operator <<(const wxChar* psz)
		wxString& operator <<(wxChar ch)
		wxString& operator <<(int i)
		wxString& operator <<(float f)
		wxString& operator <<(double d)
		friend istream&amp; operator >>(istream&amp; is, wxString& str)
		operator const wxChar*() const
		bool operator ==(const wxString& x, const wxString& y)
		bool operator ==(const wxString& x, const wxChar* t)
		bool operator !=(const wxString& x, const wxString& y)
		bool operator !=(const wxString& x, const wxChar* t)
		bool operator >(const wxString& x, const wxString& y)
		bool operator >(const wxString& x, const wxChar* t)
		bool operator >=(const wxString& x, const wxString& y)
		bool operator >=(const wxString& x, const wxChar* t)
		bool operator <(const wxString& x, const wxString& y)
		bool operator <(const wxString& x, const wxChar* t)
		bool operator <=(const wxString& x, const wxString& y)
		bool operator <=(const wxString& x, const wxChar* t)
<wx/string.h>
	class wxStringBuffer
		wxStringBuffer(const wxString& str, size_t len)
		~wxStringBuffer()
		wxChar * operator wxChar *()
<wx/string.h>
	class wxStringBufferLength
		wxStringBufferLength(const wxString& str, size_t len)
		~wxStringBufferLength()
		void SetLength(size_t nLength)
		wxChar * operator wxChar *()
<clntdata.h>
	class wxStringClientData public wxClientData
		wxStringClientData()
		wxStringClientData(const wxString& data)
		const wxString& GetData() const
		void SetData(const wxString& data)
<wx/sstream.h>
	class wxStringInputStream public wxInputStream
		wxStringInputStream(const wxString& s)
<wx/sstream.h>
	class wxStringOutputStream public wxOutputStream
		wxStringOutputStream(wxString *str = NULL)
		const wxString& GetString() const
<wx/tokenzr.h>
	class wxStringTokenizer public wxObject
		wxStringTokenizer()
		wxStringTokenizer(const wxString& str, const wxString& delims = " \t\r\n", wxStringTokenizerMode mode = wxTOKEN_DEFAULT)
		int CountTokens() const
		bool HasMoreTokens() const
		wxChar GetLastDelimiter()
		wxString GetNextToken() const
		size_t GetPosition() const
		wxString GetString() const
		void SetString(const wxString& to_tokenize, const wxString& delims = " \t\r\n", wxStringTokenizerMode mode = wxTOKEN_DEFAULT)
<wx/richtext/richtextsymboldlg.h>
	class wxSymbolPickerDialog public wxDialog
		wxSymbolPickerDialog(const wxString& symbol, const wxString& initialFont, const wxString& normalTextFont, wxWindow* parent, wxWindowID id = wxID_ANY, const wxString& title = _("Symbols"), const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxDEFAULT_DIALOG_STYLE|wxRESIZE_BORDER|wxCLOSE_BOX)
		wxSymbolPickerDialog()
		bool Create(const wxString& symbol, const wxString& initialFont, const wxString& normalTextFont, wxWindow* parent, wxWindowID id = wxID_ANY, const wxString& title = _("Symbols"), const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxDEFAULT_DIALOG_STYLE|wxRESIZE_BORDER|wxCLOSE_BOX)
		wxString GetFontName() const
		bool GetFromUnicode() const
		wxString GetNormalTextFontName() const
		wxString GetSymbol() const
		int GetSymbolChar() const
		bool HasSelection() const
		void SetFontName(const wxString& value)
		void SetFromUnicode(bool value)
		void SetNormalTextFontName(const wxString& value)
		void SetSymbol(const wxString& value)
		void SetUnicodeMode(bool unicodeMode)
		bool UseNormalFont() const
<wx/event.h>
	EVT_SYS_COLOUR_CHANGED(func)
	class wxSysColourChangedEvent public wxEvent public wxObject
		wxSysColourChangedEvent()
<wx/sysopt.h>
	class wxSystemOptions public wxObject
		wxSystemOptions()
		wxString GetOption(const wxString& name) const
		int GetOptionInt(const wxString& name) const
		bool HasOption(const wxString& name) const
		bool IsFalse(const wxString& name) const
		void SetOption(const wxString& name, const wxString& value)
		void SetOption(const wxString& name, int value)
<wx/settings.h>
	class wxSystemSettings public wxObject
		wxSystemSettings()
		static wxColour GetColour(wxSystemColour index)
		static wxFont GetFont(wxSystemFont index)
		static int GetMetric(wxSystemMetric index, wxWindow* win = NULL)
		static wxSystemScreenType GetScreenType()
<wx/tarstrm.h>
	class wxTarClassFactory public wxArchiveClassFactory
<wx/tarstrm.h>
	class wxTarEntry public wxArchiveEntry
		wxTarEntry(const wxString& name = wxEmptyString, const wxDateTime& dt = wxDateTime::Now(), wxFileOffset size = wxInvalidOffset)
		wxTarEntry(const wxTarEntry& entry)
		wxDateTime GetAccessTime() const
		void SetAccessTime(const wxDateTime& dt)
		wxDateTime GetCreateTime() const
		void SetCreateTime(const wxDateTime& dt)
		int GetDevMajor() const
		int GetDevMinor() const
		void SetDevMajor(int dev)
		void SetDevMinor(int dev)
		int GetGroupId() const
		int GetUserId() const
		void SetGroupId(int id)
		void SetUserId(int id)
		wxString GetGroupName() const
		wxString GetUserName() const
		void SetGroupName(const wxString& group)
		void SetUserName(const wxString& user)
		wxString GetInternalName() const
		wxString GetInternalName(const wxString& name, wxPathFormat format = wxPATH_NATIVE, bool* pIsDir = NULL)
		wxString GetLinkName() const
		void SetLinkName(const wxString& link)
		int GetMode() const
		void SetMode(int mode)
		void SetSize(wxFileOffset size)
		wxFileOffset GetSize() const
		int GetTypeFlag() const
		void SetTypeFlag(int type)
		wxTarEntry& operator operator=(const wxTarEntry& entry)
<wx/tarstrm.h>
	class wxTarInputStream public wxArchiveInputStream
		wxTarInputStream(wxInputStream& stream, wxMBConv& conv = wxConvLocal)
		wxTarInputStream(wxInputStream* stream, wxMBConv& conv = wxConvLocal)
		bool CloseEntry()
		wxTarEntry* GetNextEntry()
		bool OpenEntry(wxTarEntry& entry)
<wx/tarstrm.h>
	class wxTarOutputStream public wxArchiveOutputStream
		wxTarOutputStream(wxOutputStream& stream, wxTarFormat format = wxTAR_PAX, wxMBConv& conv = wxConvLocal)
		wxTarOutputStream(wxOutputStream* stream, wxTarFormat format = wxTAR_PAX, wxMBConv& conv = wxConvLocal)
		~wxTarOutputStream()
		bool Close()
		bool CloseEntry()
		bool CopyArchiveMetaData(wxTarInputStream& s)
		bool CopyEntry(wxTarEntry* entry, wxTarInputStream& inputStream)
		int GetBlockingFactor() const
		void SetBlockingFactor(int factor)
		bool PutNextDirEntry(const wxString& name, const wxDateTime& dt = wxDateTime::Now())
		bool PutNextEntry(wxTarEntry* entry)
		bool PutNextEntry(const wxString& name, const wxDateTime& dt = wxDateTime::Now(), wxFileOffset size = wxInvalidOffset)
<wx/taskbar.h>
	EVT_TASKBAR_MOVE(func)
	EVT_TASKBAR_LEFT_DOWN(func)
	EVT_TASKBAR_LEFT_UP(func)
	EVT_TASKBAR_RIGHT_DOWN(func)
	EVT_TASKBAR_RIGHT_UP(func)
	EVT_TASKBAR_LEFT_DCLICK(func)
	EVT_TASKBAR_RIGHT_DCLICK(func)
	EVT_TASKBAR_CLICK(func)
	class wxTaskBarIcon public wxEvtHandler public wxObject
		wxTaskBarIcon()
		~wxTaskBarIcon()
		virtual wxMenu* CreatePopupMenu()
		bool IsIconInstalled()
		bool IsOk()
		bool PopupMenu(wxMenu* menu)
		bool RemoveIcon()
		bool SetIcon(const wxIcon& icon, const wxString& tooltip)
<wx/sckipc.h>
	class wxTCPClient public wxObject
		wxTCPClient()
		wxConnectionBase * MakeConnection(const wxString& host, const wxString& service, const wxString& topic)
		wxConnectionBase * OnMakeConnection()
		bool ValidHost(const wxString& host)
<wx/sckipc.h>
	class wxTCPConnection public wxObject
		wxTCPConnection()
		wxTCPConnection(char* buffer, int size)
		bool Advise(const wxString& item, char* data, int size = -1, wxIPCFormat format = wxCF_TEXT)
		bool Execute(char* data, int size = -1, wxIPCFormat format = wxCF_TEXT)
		bool Disconnect()
		virtual bool OnAdvise(const wxString& topic, const wxString& item, char* data, int size, wxIPCFormat format)
		virtual bool OnDisconnect()
		virtual bool OnExecute(const wxString& topic, char* data, int size, wxIPCFormat format)
		virtual bool OnPoke(const wxString& topic, const wxString& item, char* data, int size, wxIPCFormat format)
		virtual char* OnRequest(const wxString& topic, const wxString& item, int *size, wxIPCFormat format)
		virtual bool OnStartAdvise(const wxString& topic, const wxString& item)
		virtual bool OnStopAdvise(const wxString& topic, const wxString& item)
		bool Poke(const wxString& item, char* data, int size = -1, wxIPCFormat format = wxCF_TEXT)
		char* Request(const wxString& item, int *size, wxIPCFormat format = wxIPC_TEXT)
		bool StartAdvise(const wxString& item)
		bool StopAdvise(const wxString& item)
<wx/sckipc.h>
	class wxTCPServer public wxObject
		wxTCPServer()
		bool Create(const wxString& service)
		virtual wxConnectionBase * OnAcceptConnection(const wxString& topic)
<wx/file.h>
	class wxTempFile
		wxTempFile()
		wxTempFile(const wxString& strName)
		bool Open(const wxString& strName)
		bool IsOpened() const
		wxFileOffset Length() const
		wxFileOffset Seek(wxFileOffset ofs, wxSeekMode mode = wxFromStart)
		wxFileOffset Tell() const
		bool Write(const void *p, size_t n)
		bool Write(const wxString& str, wxMBConv& conv = wxConvLibc)
		bool Commit()
		void Discard()
		~wxTempFile()
<wx/wfstream.h>
	class wxTempFileOutputStream public wxOutputStream
		wxTempFileOutputStream(const wxString& fileName)
		bool Commit()
		void Discard()
<wx/textctrl.h>
	class wxTextAttr
		wxTextAttr()
		wxTextAttr(const wxColour& colText, const wxColour& colBack = wxNullColour,const wxFont& font = wxNullFont, wxTextAttrAlignment alignment = wxTEXT_ALIGNMENT_DEFAULT)
		wxTextAttrAlignment GetAlignment() const
		const wxColour& GetBackgroundColour() const
		const wxFont& GetFont() const
		int GetLeftIndent() const
		int GetLeftSubIndent() const
		int GetRightIndent() const
		const wxArrayInt&amp; GetTabs() const
		const wxColour& GetTextColour() const
		bool HasAlignment() const
		bool HasBackgroundColour() const
		bool HasFont() const
		bool HasLeftIndent() const
		bool HasRightIndent() const
		bool HasTabs() const
		bool HasTextColour() const
		long GetFlags()
		bool IsDefault() const
		void Merge(const wxTextAttr& overlay)
		static wxTextAttr Merge(const wxTextAttr& base, const wxTextAttr& overlay)
		void SetAlignment(wxTextAttrAlignment alignment)
		void SetBackgroundColour(const wxColour& colour)
		void SetFlags(long flags)
		void SetFont(const wxFont& font)
		void SetLeftIndent(int indent, int subIndent = 0)
		void SetRightIndent(int indent)
		void SetTabs(const wxArrayInt&amp; tabs)
		void SetTextColour(const wxColour& colour)
<wx/richtext/richtextbuffer.h>
	class wxTextAttrEx public wxTextAttr
		wxTextAttrEx()
		wxTextAttrEx(const wxTextAttrEx& attr)
		const wxString& GetBulletFont() const
		const wxString& GetBulletName() const
		int GetBulletNumber() const
		int GetBulletStyle() const
		const wxString& GetBulletText() const
		const wxString& GetCharacterStyleName() const
		int GetLineSpacing() const
		const wxString& GetListStyleName() const
		int GetOutlineLevel() const
		int GetParagraphSpacingAfter() const
		int GetParagraphSpacingBefore() const
		const wxString& GetParagraphStyleName() const
		int GetTextEffectFlags() const
		int GetTextEffects() const
		const wxString& GetURL() const
		bool HasBulletName() const
		bool HasBulletNumber() const
		bool HasBulletStyle() const
		bool HasBulletText() const
		bool HasCharacterStyleName() const
		bool HasLineSpacing() const
		bool HasListStyleName() const
		bool HasOutlineLevel() const
		bool HasPageBreak() const
		bool HasParagraphSpacingAfter() const
		bool HasParagraphSpacingBefore() const
		bool HasParagraphStyleName() const
		bool HasTextEffects() const
		bool HasURL() const
		void Init()
		bool IsCharacterStyle() const
		bool IsDefault() const
		bool IsParagraphStyle() const
		void SetBulletFont(const wxString& font)
		void SetBulletNumber(int n)
		void SetBulletName(const wxString& name)
		void SetBulletStyle(int style)
		void SetBulletText(const wxString& text)
		void SetCharacterStyleName(const wxString& name)
		void SetLineSpacing(int spacing)
		void SetListStyleName(const wxString& name)
		void SetOutlineLevel(int level)
		void SetPageBreak(bool pageBreak = true)
		void SetParagraphSpacingAfter(int spacing)
		void SetParagraphSpacingBefore(int spacing)
		void SetParagraphStyleName(const wxString& name)
		void SetTextEffectFlags(int flags)
		void SetTextEffects(int effects)
		void SetURL(const wxString& url)
		void operator operator=(const wxTextAttr& attr)
		void operator operator=(const wxTextAttrEx& attr)
<wx/textctrl.h>
	wxTE_PROCESS_ENTER
	wxTE_PROCESS_TAB
	wxTE_MULTILINE
	wxTE_PASSWORD
	wxTE_READONLY
	wxTE_RICH
	wxTE_RICH2
	wxTE_AUTO_URL
	wxTE_NOHIDESEL
	wxHSCROLL
	wxTE_LEFT
	wxTE_CENTRE
	wxTE_RIGHT
	wxTE_DONTWRAP
	wxTE_CHARWRAP
	wxTE_WORDWRAP
	wxTE_BESTWRAP
	wxTE_CAPITALIZE
	EVT_TEXT(id, func)
	EVT_TEXT_ENTER(id, func)
	EVT_TEXT_URL(id, func)
	EVT_TEXT_MAXLEN(id, func)
	class wxTextCtrl public wxControl public wxWindow public wxEvtHandler public wxObject
		wxTextCtrl()
		wxTextCtrl(wxWindow* parent, wxWindowID id,const wxString& value = "", const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize,long style = 0, const wxValidator& validator = wxDefaultValidator, const wxString& name = wxTextCtrlNameStr)
		~wxTextCtrl()
		void AppendText(const wxString& text)
		virtual bool CanCopy()
		virtual bool CanCut()
		virtual bool CanPaste()
		virtual bool CanRedo()
		virtual bool CanUndo()
		virtual void Clear()
		virtual void Copy()
		bool Create(wxWindow* parent, wxWindowID id,const wxString& value = "", const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize,long style = 0, const wxValidator& validator = wxDefaultValidator, const wxString& name = wxTextCtrlNameStr)
		virtual void Cut()
		void DiscardEdits()
		bool EmulateKeyPress(const wxKeyEvent& event)
		const wxTextAttr& GetDefaultStyle() const
		virtual long GetInsertionPoint() const
		virtual wxTextPos GetLastPosition() const
		int GetLineLength(long lineNo) const
		wxString GetLineText(long lineNo) const
		int GetNumberOfLines() const
		virtual wxString GetRange(long from, long to) const
		virtual void GetSelection(long* from, long* to) const
		virtual wxString GetStringSelection()
		bool GetStyle(long position, wxTextAttr& style)
		wxString GetValue() const
		wxTextCtrlHitTestResult HitTest(const wxPoint& pt, wxTextCoord *col, wxTextCoord *row) const
		bool IsEditable() const
		bool IsEmpty() const
		bool IsModified() const
		bool IsMultiLine() const
		bool IsSingleLine() const
		bool LoadFile(const wxString& filename, int fileType = wxTEXT_TYPE_ANY)
		void MarkDirty()
		void OnDropFiles(wxDropFilesEvent& event)
		virtual void Paste()
		bool PositionToXY(long pos, long *x, long *y) const
		virtual void Redo()
		virtual void Remove(long from, long to)
		virtual void Replace(long from, long to, const wxString& value)
		bool SaveFile(const wxString& filename, int fileType = wxTEXT_TYPE_ANY)
		bool SetDefaultStyle(const wxTextAttr& style)
		virtual void SetEditable(const bool editable)
		virtual void SetInsertionPoint(long pos)
		virtual void SetInsertionPointEnd()
		virtual void SetMaxLength(unsigned long len)
		void SetModified(bool modified)
		virtual void SetSelection(long from, long to)
		bool SetStyle(long start, long end, const wxTextAttr& style)
		virtual void SetValue(const wxString& value)
		virtual void ChangeValue(const wxString& value)
		void ShowPosition(long pos)
		virtual void Undo()
		void WriteText(const wxString& text)
		long XYToPosition(long x, long y)
		wxTextCtrl& operator <<(const wxString& s)
		wxTextCtrl& operator <<(int i)
		wxTextCtrl& operator <<(long i)
		wxTextCtrl& operator <<(float f)
		wxTextCtrl& operator <<(double d)
		wxTextCtrl& operator <<(char c)
<wx/dataobj.h>
	class wxTextDataObject public wxDataObjectSimple public wxDataObject
		wxTextDataObject(const wxString& text = wxEmptyString)
		virtual size_t GetTextLength() const
		virtual wxString GetText() const
		virtual void SetText(const wxString& strText)
<wx/dnd.h>
	class wxTextDropTarget public wxDropTarget
		wxTextDropTarget()
		virtual bool OnDrop(long x, long y, const void *data, size_t size)
		virtual bool OnDropText(wxCoord x, wxCoord y, const wxString& data)
<wx/textdlg.h>
	class wxTextEntryDialog public wxDialog public wxWindow public wxEvtHandler public wxObject
		wxTextEntryDialog(wxWindow* parent, const wxString& message,const wxString& caption = "Please enter text", const wxString& defaultValue = "", long style = wxOK | wxCANCEL | wxCENTRE, const wxPoint& pos = wxDefaultPosition)
		~wxTextEntryDialog()
		wxString GetValue() const
		void SetValue(const wxString& value)
		int ShowModal()
<wx/textfile.h>
	class wxTextFile
		wxTextFile() const
		wxTextFile(const wxString& strFile) const
		~wxTextFile() const
		void AddLine(const wxString& str, wxTextFileType type = typeDefault) const
		bool Close() const
		bool Create() const
		bool Create(const wxString& strFile) const
		bool Exists() const
		bool IsOpened() const
		size_t GetLineCount() const
		wxString& GetLine(size_t n) const
		wxString& operator[](size_t n) const
		size_t GetCurrentLine() const
		void GoToLine(size_t n) const
		bool Eof() const
		static const char* GetEOL(wxTextFileType type = typeDefault) const
		wxString& GetFirstLine() const
		wxString& GetNextLine()
		wxString& GetPrevLine()
		wxString& GetLastLine()
		wxTextFileType GetLineType(size_t n) const
		wxTextFileType GuessType() const
		const char* GetName() const
		void InsertLine(const wxString& str, size_t n, wxTextFileType type = typeDefault) const
		bool Open(wxMBConv& conv = wxConvUTF8) const
		bool Open(const wxString& strFile, wxMBConv& conv = wxConvUTF8) const
		void RemoveLine(size_t n) const
		void Clear() const
		bool Write(wxTextFileType typeNew = wxTextFileType_None, wxMBConv& conv = wxConvUTF8) const
<wx/txtstrm.h>
	class wxTextInputStream
		wxTextInputStream(wxInputStream& stream, const wxString& sep=" \t", wxMBConv& conv = wxConvUTF8 )
		~wxTextInputStream()
		wxUint8 Read8(int base = 10)
		wxInt8 Read8S(int base = 10)
		wxUint16 Read16(int base = 10)
		wxInt16 Read16S(int base = 10)
		wxUint32 Read32(int base = 10)
		wxInt32 Read32S(int base = 10)
		wxChar GetChar()
		double ReadDouble()
		wxString ReadLine()
		wxString ReadString()
		wxString ReadWord()
		void SetStringSeparators(const wxString& sep)
<wx/txtstrm.h>
	class wxTextOutputStream
		wxTextOutputStream(wxOutputStream& stream, wxEOL mode = wxEOL_NATIVE, wxMBConv& conv = wxConvUTF8)
		~wxTextOutputStream()
		wxEOL GetMode()
		void PutChar(wxChar c)
		void SetMode(wxEOL mode = wxEOL_NATIVE)
		void Write8(wxUint8 i8)
		void Write16(wxUint16 i16)
		void Write32(wxUint32 i32)
		virtual void WriteDouble(double f)
		virtual void WriteString(const wxString& string)
<wx/valtext.h>
	class wxTextValidator public wxValidator public wxEvtHandler public wxObject
		wxTextValidator(const wxTextValidator& validator)
		wxTextValidator(long style = wxFILTER_NONE, wxString* valPtr = NULL)
		virtual wxValidator* Clone() const
		wxArrayString& GetExcludes() const
		wxArrayString& GetIncludes() const
		long GetStyle() const
		void OnChar(wxKeyEvent& event)
		void SetExcludes(const wxArrayString& stringList)
		void SetIncludes(const wxArrayString& stringList)
		void SetStyle(long style)
		virtual bool TransferFromWindow()
		virtual bool TransferToWindow()
		virtual bool Validate(wxWindow* parent)
<wx/thread.h>
	class wxThread
		wxThread(wxThreadKind kind = wxTHREAD_DETACHED)
		~wxThread()
		wxThreadError Create(unsigned int stackSize = 0)
		wxThreadError Delete()
		virtual ExitCode Entry()
		void Exit(ExitCode exitcode = 0)
		static int GetCPUCount()
		static unsigned long GetCurrentId()
		unsigned long GetId() const
		int GetPriority() const
		bool IsAlive() const
		bool IsDetached() const
		static bool IsMain()
		bool IsPaused() const
		bool IsRunning() const
		wxThreadError Kill()
		void OnExit()
		wxThreadError Pause()
		wxThreadError Run()
		void SetPriority(int priority)
		static void Sleep(unsigned long milliseconds)
		wxThreadError Resume()
		static bool SetConcurrency(size_t level)
		virtual bool TestDestroy()
		static wxThread * This()
		void Yield()
		ExitCode Wait() const
<wx/thread.h>
	class wxThreadHelper
		wxThreadHelper()
		~wxThreadHelper()
		wxThreadError Create(unsigned int stackSize = 0)
		virtual ExitCode Entry()
		wxThread * GetThread()
<wx/timer.h>
	class wxTimer public wxEvtHandler public wxObject
		wxTimer()
		wxTimer(wxEvtHandler *owner, int id = -1)
		~wxTimer()
		int GetInterval() const
		bool IsOneShot() const
		bool IsRunning() const
		void Notify()
		void SetOwner(wxEvtHandler *owner, int id = -1)
		bool Start(int milliseconds = -1, bool oneShot = false)
		void Stop()
<wx/timer.h>
	class wxTimerEvent public wxEvent
		int GetInterval() const
<wx/datetime.h>
	class wxTimeSpan
		wxTimeSpan Abs() const
		wxTimeSpan Add(const wxTimeSpan& diff) const
		wxTimeSpan& Add(const wxTimeSpan& diff)
		wxTimeSpan& operator+=(const wxTimeSpan&diff)
		static wxTimespan Days(long days)
		static wxTimespan Day()
		wxString Format(const wxChar * format = wxDefaultTimeSpanFormat)
		int GetDays() const
		int GetHours() const
		wxLongLong GetMilliseconds() const
		int GetMinutes() const
		wxLongLong GetSeconds() const
		wxLongLong GetValue() const
		int GetWeeks() const
		static wxTimespan Hours(long hours)
		static wxTimespan Hour()
		bool IsEqualTo(const wxTimeSpan& ts) const
		bool IsLongerThan(const wxTimeSpan& ts) const
		bool IsNegative() const
		bool IsNull() const
		bool IsPositive() const
		bool IsShorterThan(const wxTimeSpan& ts) const
		static wxTimespan Minutes(long min)
		static wxTimespan Minute()
		wxTimeSpan Multiply(int n) const
		wxTimeSpan& Multiply(int n)
		wxTimeSpan& operator*=(int n)
		wxTimeSpan Negate() const
		wxTimeSpan& Neg()
		wxTimeSpan& operator-()
		static wxTimespan Milliseconds(long ms)
		static wxTimespan Millisecond()
		static wxTimespan Seconds(long sec)
		static wxTimespan Second()
		wxTimeSpan Subtract(const wxTimeSpan&diff) const
		wxTimeSpan& Subtract(const wxTimeSpan& diff)
		wxTimeSpan& operator-=(const wxTimeSpan&diff)
		static wxTimespan Weeks(long weeks)
		static wxTimespan Week()
		wxTimeSpan()
		wxTimeSpan(long hours, long min, long sec, long msec)
<wx/tipdlg.h>
	class wxTipProvider
		wxTipProvider(size_t currentTip)
		wxString GetTip()
		virtual wxString PreProcessTip(const wxString&tip)
		size_t GetCurrentTip() const
<wx/tipwin.h>
	class wxTipWindow public wxWindow public wxEvtHandler public wxObject
		wxTipWindow(wxWindow* parent, const wxString& text, wxCoord maxLength = 100, wxTipWindow** windowPtr, wxRect *rectBounds = NULL)
		void SetTipWindowPtr(wxTipWindow** windowPtr)
		void SetBoundingRect(const wxRect& rectBound)
<wx/tglbtn.h>
	EVT_TOGGLEBUTTON(id, func)
	class wxToggleButton public wxControl public wxWindow public wxEvtHandler public wxObject
		wxToggleButton()
		wxToggleButton(wxWindow* parent, wxWindowID id,const wxString& label, const wxPoint& pos = wxDefaultPosition,const wxSize& size = wxDefaultSize, long style = 0,const wxValidator& val, const wxString& name = "checkBox")
		~wxToggleButton()
		bool Create(wxWindow* parent, wxWindowID id,const wxString& label, const wxPoint& pos = wxDefaultPosition,const wxSize& size = wxDefaultSize, long style = 0,const wxValidator& val, const wxString& name = "checkBox")
		bool GetValue() const
		void SetValue(const bool state)
<wx/toolbar.h>
	wxTB_FLAT
	wxTB_DOCKABLE
	wxTB_HORIZONTAL
	wxTB_VERTICAL
	wxTB_TEXT
	wxTB_NOICONS
	wxTB_NODIVIDER
	wxTB_NOALIGN
	wxTB_HORZ_LAYOUT
	wxTB_HORZ_TEXT
	wxTB_NO_TOOLTIPS
	wxTB_BOTTOM
	wxTB_RIGHT
	EVT_TOOL(id, func)
	EVT_MENU(id, func)
	EVT_TOOL_RANGE(id1, id2, func)
	EVT_MENU_RANGE(id1, id2, func)
	EVT_TOOL_RCLICKED(id, func)
	EVT_TOOL_RCLICKED_RANGE(id1, id2, func)
	EVT_TOOL_ENTER(id, func)
	class wxToolBar public wxControl public wxWindow public wxEvtHandler public wxObject
		wxToolBar()
		wxToolBar(wxWindow* parent, wxWindowID id,const wxPoint& pos = wxDefaultPosition,const wxSize& size = wxDefaultSize,long style = wxTB_HORIZONTAL | wxNO_BORDER,const wxString& name = wxPanelNameStr)
		void ~wxToolBar()
		bool AddControl(wxControl* control)
		void AddSeparator()
		wxToolBarToolBase* AddTool(int toolId,const wxString& label,const wxBitmap& bitmap1,const wxString& shortHelpString = "",wxItemKind kind = wxITEM_NORMAL)
		wxToolBarToolBase* AddTool(int toolId,const wxString& label,const wxBitmap& bitmap1,const wxBitmap& bitmap2 = wxNullBitmap,wxItemKind kind = wxITEM_NORMAL,const wxString& shortHelpString = "",const wxString& longHelpString = "",wxObject* clientData = NULL)
		wxToolBarToolBase* AddTool(wxToolBarToolBase* tool)
		wxToolBarToolBase* AddCheckTool(int toolId,const wxString& label,const wxBitmap& bitmap1,const wxBitmap& bitmap2,const wxString& shortHelpString = "",const wxString& longHelpString = "",wxObject* clientData = NULL)
		wxToolBarToolBase* AddRadioTool(int toolId,const wxString& label,const wxBitmap& bitmap1,const wxBitmap& bitmap2,const wxString& shortHelpString = "",const wxString& longHelpString = "",wxObject* clientData = NULL)
		void ClearTools()
		bool DeleteTool(int toolId)
		bool DeleteToolByPos(size_t pos)
		void EnableTool(int toolId, const bool enable)
		wxToolBarToolBase* FindById(int id)
		wxControl* FindControl(int id)
		wxToolBarToolBase* FindToolForPosition(wxCoord x, wxCoord y) const
		int GetToolsCount() const
		wxSize GetToolSize()
		wxSize GetToolBitmapSize()
		wxSize GetMargins() const
		wxObject* GetToolClientData(int toolId) const
		bool GetToolEnabled(int toolId) const
		wxString GetToolLongHelp(int toolId) const
		int GetToolPacking() const
		int GetToolPos(int toolId) const
		int GetToolSeparation() const
		wxString GetToolShortHelp(int toolId) const
		bool GetToolState(int toolId) const
		wxToolBarToolBase * InsertControl(size_t pos, wxControl *control)
		wxToolBarToolBase * InsertSeparator(size_t pos)
		wxToolBarToolBase * InsertTool(size_t pos,int toolId, const wxBitmap& bitmap1,const wxBitmap& bitmap2 = wxNullBitmap, bool isToggle = false,wxObject* clientData = NULL, const wxString& shortHelpString = "", const wxString& longHelpString = "")
		wxToolBarToolBase * InsertTool(size_t pos,wxToolBarToolBase* tool)
		bool OnLeftClick(int toolId, bool toggleDown)
		void OnMouseEnter(int toolId)
		void OnRightClick(int toolId, float x, float y)
		bool Realize()
		wxToolBarToolBase * RemoveTool(int id)
		void SetBitmapResource(int resourceId)
		void SetMargins(const wxSize& size)
		void SetMargins(int x, int y)
		void SetToolBitmapSize(const wxSize& size)
		void SetToolClientData(int id, wxObject* clientData)
		void SetToolDisabledBitmap(int id, const wxBitmap& bitmap)
		void SetToolLongHelp(int toolId, const wxString& helpString)
		void SetToolPacking(int packing)
		void SetToolShortHelp(int toolId, const wxString& helpString)
		void SetToolNormalBitmap(int id, const wxBitmap& bitmap)
		void SetToolSeparation(int separation)
		void ToggleTool(int toolId, const bool toggle)
<wx/toolbook.h>
	wxBK_DEFAULT
	class wxToolbook public wxControl public wxControl public wxWindow public wxEvtHandler public wxObject
<wx/tooltip.h>
	class wxToolTip public wxObject
		static void Enable(bool flag)
		static void SetDelay(long msecs)
		wxToolTip(const wxString& tip)
		void SetTip(const wxString& tip)
		wxString GetTip() const
		wxWindow* GetWindow() const
<wx/toplevel.h>
	class wxTopLevelWindow public wxWindow public wxEvtHandler public wxObject
		virtual bool CanSetTransparent()
		bool EnableCloseButton(bool enable = true)
		wxWindow * GetDefaultItem() const
		const wxIcon& GetIcon() const
		const wxIconBundle& GetIcons() const
		wxString GetTitle() const
		virtual bool HandleSettingChange(WXWPARAM wParam, WXLPARAM lParam)
		bool IsActive() const
		virtual bool IsAlwaysMaximized() const
		void Iconize(bool iconize)
		bool IsFullScreen()
		bool IsIconized() const
		bool IsMaximized() const
		bool IsUsingNativeDecorations() const
		void Maximize(bool maximize)
		void RequestUserAttention(int flags = wxUSER_ATTENTION_INFO)
		void SetDefaultItem(wxWindow *win)
		void SetIcon(const wxIcon& icon)
		void SetIcons(const wxIconBundle& icons)
		void SetLeftMenu(int id = wxID_ANY, const wxString& label = wxEmptyString, wxMenu * subMenu = NULL)
		void SetMaxSize(const wxSize& size)
		void SetMinSize(const wxSize& size)
		virtual void SetSizeHints(int minW, int minH, int maxW=-1, int maxH=-1,int incW=-1, int incH=-1)
		void SetSizeHints(const wxSize& minSize,const wxSize& maxSize=wxDefaultSize, const wxSize& incSize=wxDefaultSize)
		void SetRightMenu(int id = wxID_ANY, const wxString& label = wxEmptyString, wxMenu * subMenu = NULL)
		bool SetShape(const wxRegion& region)
		virtual void SetTitle(const wxString& title)
		virtual bool SetTransparent(int alpha)
		virtual bool ShouldPreventAppExit() const
		bool ShowFullScreen(bool show, long style = wxFULLSCREEN_ALL)
		void UseNativeDecorations(bool native = true)
		void UseNativeDecorationsByDefault(bool native = true)
<wx/treebook.h>
	EVT_TREEBOOK_PAGE_CHANGED(id, func)
	EVT_TREEBOOK_PAGE_CHANGING(id, func)
	EVT_TREEBOOK_NODE_COLLAPSED(id, func)
	EVT_TREEBOOK_NODE_EXPANDED(id, func)
	class wxTreebook public wxControl public wxWindow public wxEvtHandler public wxObject
		wxTreebook()
		~wxTreebook()
		bool AddSubPage(wxWindow* page, const wxString& text, bool bSelect = false, int imageId = wxNOT_FOUND)
		void AssignImageList(wxImageList* imageList)
		int ChangeSelection(size_t page)
		bool CollapseNode(size_t pageId)
		bool Create(wxWindow* parent, wxWindowID id, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxBK_DEFAULT, const wxString& name = wxEmptyString)
		bool DeleteAllPages()
		bool DeletePage(size_t pagePos)
		bool ExpandNode(size_t pageId, bool expand = true)
		int GetPageImage(size_t n) const
		int GetPageParent(size_t page) const
		wxString GetPageText(size_t n) const
		int GetSelection() const
		bool InsertPage(size_t pagePos, wxWindow* page, const wxString& text, bool bSelect = false, int imageId = wxNOT_FOUND)
		bool InsertSubPage(size_t pagePos, wxWindow* page, const wxString& text, bool bSelect = false, int imageId = wxNOT_FOUND)
		bool IsNodeExpanded(size_t pageId) const
		void SetImageList(wxImageList* imageList)
		bool SetPageImage(size_t page, int imageId)
		bool SetPageText(size_t page, const wxString& text)
		int SetSelection(size_t n)
<treebook.h>
	EVT_TREEBOOK_PAGE_CHANGED(id, func)
	EVT_TREEBOOK_PAGE_CHANGING(id, func)
	EVT_TREEBOOK_NODE_COLLAPSED(id, func)
	EVT_TREEBOOK_NODE_EXPANDED(id, func)
	class wxTreebookEvent public wxNotifyEvent public wxCommandEvent public wxEvent public wxObject
		wxTreebookEvent(wxEventType commandType = wxEVT_NULL, int id = 0, int nSel = wxNOT_FOUND, int nOldSel = wxNOT_FOUND)
		int GetOldSelection() const
		int GetSelection() const
<wx/treectrl.h>
	wxTR_EDIT_LABELS
	wxTR_NO_BUTTONS
	wxTR_HAS_BUTTONS
	wxTR_NO_LINES
	wxTR_FULL_ROW_HIGHLIGHT
	wxTR_LINES_AT_ROOT
	wxTR_HIDE_ROOT
	wxTR_ROW_LINES
	wxTR_HAS_VARIABLE_ROW_HEIGHT
	wxTR_SINGLE
	wxTR_MULTIPLE
	wxTR_EXTENDED
	wxTR_DEFAULT_STYLE
	EVT_TREE_BEGIN_DRAG(id, func)
	EVT_TREE_BEGIN_RDRAG(id, func)
	EVT_TREE_END_DRAG(id, func)
	EVT_TREE_BEGIN_LABEL_EDIT(id, func)
	EVT_TREE_END_LABEL_EDIT(id, func)
	EVT_TREE_DELETE_ITEM(id, func)
	EVT_TREE_GET_INFO(id, func)
	EVT_TREE_SET_INFO(id, func)
	EVT_TREE_ITEM_ACTIVATED(id, func)
	EVT_TREE_ITEM_COLLAPSED(id, func)
	EVT_TREE_ITEM_COLLAPSING(id, func)
	EVT_TREE_ITEM_EXPANDED(id, func)
	EVT_TREE_ITEM_EXPANDING(id, func)
	EVT_TREE_ITEM_RIGHT_CLICK(id, func)
	EVT_TREE_ITEM_MIDDLE_CLICK(id, func)
	EVT_TREE_SEL_CHANGED(id, func)
	EVT_TREE_SEL_CHANGING(id, func)
	EVT_TREE_KEY_DOWN(id, func)
	EVT_TREE_ITEM_GETTOOLTIP(id, func)
	EVT_TREE_ITEM_MENU(id, func)
	EVT_TREE_STATE_IMAGE_CLICK(id, func)
	class wxTreeCtrl public wxControl public wxWindow public wxEvtHandler public wxObject
		wxTreeCtrl()
		wxTreeCtrl(wxWindow* parent, wxWindowID id,const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize,long style = wxTR_HAS_BUTTONS, const wxValidator& validator = wxDefaultValidator, const wxString& name = "treeCtrl")
		void ~wxTreeCtrl()
		wxTreeItemId AddRoot(const wxString& text,int image = -1, int selImage = -1, wxTreeItemData* data = NULL)
		wxTreeItemId AppendItem(const wxTreeItemId& parent, const wxString& text,int image = -1, int selImage = -1, wxTreeItemData* data = NULL)
		void AssignButtonsImageList(wxImageList* imageList)
		void AssignImageList(wxImageList* imageList)
		void AssignStateImageList(wxImageList* imageList)
		void Collapse(const wxTreeItemId& item)
		void CollapseAll()
		void CollapseAllChildren(const wxTreeItemId& item)
		void CollapseAndReset(const wxTreeItemId& item)
		bool wxTreeCtrl(wxWindow* parent, wxWindowID id,const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize,long style = wxTR_HAS_BUTTONS, const wxValidator& validator = wxDefaultValidator, const wxString& name = "treeCtrl")
		void Delete(const wxTreeItemId& item)
		void DeleteAllItems()
		void DeleteChildren(const wxTreeItemId& item)
		void EditLabel(const wxTreeItemId& item)
		void EndEditLabel(bool cancelEdit)
		void EnsureVisible(const wxTreeItemId& item)
		void Expand(const wxTreeItemId& item)
		void ExpandAll()
		void ExpandAllChildren(const wxTreeItemId& item)
		bool GetBoundingRect(const wxTreeItemId& item, wxRect& rect, bool textOnly = false) const
		wxImageList* GetButtonsImageList() const
		unsigned int GetChildrenCount(const wxTreeItemId& item, bool recursively = true) const
		unsigned int GetCount() const
		wxTextCtrl * GetEditControl() const
		wxTreeItemId GetFirstChild(const wxTreeItemId& item, wxTreeItemIdValue &amp; cookie) const
		wxTreeItemId GetFirstVisibleItem() const
		wxImageList* GetImageList() const
		int GetIndent() const
		wxColour GetItemBackgroundColour(const wxTreeItemId& item) const
		wxTreeItemData* GetItemData(const wxTreeItemId& item) const
		wxFont GetItemFont(const wxTreeItemId& item) const
		int GetItemImage(const wxTreeItemId& item,wxTreeItemIcon which = wxTreeItemIcon_Normal) const
		wxString GetItemText(const wxTreeItemId& item) const
		wxColour GetItemTextColour(const wxTreeItemId& item) const
		wxTreeItemId GetLastChild(const wxTreeItemId& item) const
		wxTreeItemId GetNextChild(const wxTreeItemId& item, wxTreeItemIdValue &amp; cookie) const
		wxTreeItemId GetNextSibling(const wxTreeItemId& item) const
		wxTreeItemId GetNextVisible(const wxTreeItemId& item) const
		wxTreeItemId GetItemParent(const wxTreeItemId& item) const
		wxTreeItemId GetPrevSibling(const wxTreeItemId& item) const
		wxTreeItemId GetPrevVisible(const wxTreeItemId& item) const
		bool GetQuickBestSize() const
		wxTreeItemId GetRootItem() const
		int GetItemSelectedImage(const wxTreeItemId& item) const
		wxTreeItemId GetSelection() const
		unsigned int GetSelections(wxArrayTreeItemIds&amp; selection) const
		wxImageList* GetStateImageList() const
		wxTreeItemId HitTest(const wxPoint& point, int&amp; flags) const
		wxTreeItemId InsertItem(const wxTreeItemId& parent, const wxTreeItemId& previous, const wxString& text,int image = -1, int selImage = -1, wxTreeItemData* data = NULL)
		wxTreeItemId InsertItem(const wxTreeItemId& parent, size_t before, const wxString& text,int image = -1, int selImage = -1, wxTreeItemData* data = NULL)
		bool IsBold(const wxTreeItemId& item) const
		bool IsEmpty() const
		bool IsExpanded(const wxTreeItemId& item) const
		bool IsSelected(const wxTreeItemId& item) const
		bool IsVisible(const wxTreeItemId& item) const
		bool ItemHasChildren(const wxTreeItemId& item) const
		int OnCompareItems(const wxTreeItemId& item1, const wxTreeItemId& item2)
		wxTreeItemId PrependItem(const wxTreeItemId& parent, const wxString& text,int image = -1, int selImage = -1, wxTreeItemData* data = NULL)
		void ScrollTo(const wxTreeItemId& item)
		void SelectItem(const wxTreeItemId& item, bool select = true)
		void SetButtonsImageList(wxImageList* imageList)
		void SetIndent(int indent)
		void SetImageList(wxImageList* imageList)
		void SetItemBackgroundColour(const wxTreeItemId& item, const wxColour& col)
		void SetItemBold(const wxTreeItemId& item, bool bold = true)
		void SetItemData(const wxTreeItemId& item, wxTreeItemData* data)
		void SetItemDropHighlight(const wxTreeItemId& item, boolhighlight = true)
		void SetItemFont(const wxTreeItemId& item, const wxFont& font)
		void SetItemHasChildren(const wxTreeItemId& item, bool hasChildren = true)
		void SetItemImage(const wxTreeItemId& item,int image, wxTreeItemIcon which = wxTreeItemIcon_Normal)
		void SetItemSelectedImage(const wxTreeItemId& item, int selImage)
		void SetItemText(const wxTreeItemId& item, const wxString& text)
		void SetItemTextColour(const wxTreeItemId& item, const wxColour& col)
		void SetQuickBestSize(bool quickBestSize)
		void SetStateImageList(wxImageList* imageList)
		void SetWindowStyle(longstyles)
		void SortChildren(const wxTreeItemId& item)
		void Toggle(const wxTreeItemId& item)
		void ToggleItemSelection(const wxTreeItemId& item)
		void Unselect()
		void UnselectAll()
		void UnselectItem(const wxTreeItemId& item)
<wx/treebase.h>
	class wxTreeItemId
		wxTreeItemId()
		bool IsOk() const
		void operator !() const
		bool operator ==(const wxTreeItemId& item) const
		bool operator !=(const wxTreeItemId& item) const
<wx/treectrl.h>
	EVT_TREE_BEGIN_DRAG(id, func)
	EVT_TREE_BEGIN_RDRAG(id, func)
	EVT_TREE_BEGIN_LABEL_EDIT(id, func)
	EVT_TREE_END_DRAG(id, func)
	EVT_TREE_END_LABEL_EDIT(id, func)
	EVT_TREE_DELETE_ITEM(id, func)
	EVT_TREE_ITEM_ACTIVATED(id, func)
	EVT_TREE_ITEM_COLLAPSED(id, func)
	EVT_TREE_ITEM_COLLAPSING(id, func)
	EVT_TREE_ITEM_EXPANDED(id, func)
	EVT_TREE_ITEM_EXPANDING(id, func)
	EVT_TREE_ITEM_RIGHT_CLICK(id, func)
	EVT_TREE_ITEM_MIDDLE_CLICK(id, func)
	EVT_TREE_KEY_DOWN(id, func)
	EVT_TREE_SEL_CHANGED(id, func)
	EVT_TREE_SEL_CHANGING(id, func)
	EVT_TREE_KEY_DOWN(id, func)
	EVT_TREE_ITEM_GETTOOLTIP(id, func)
	EVT_TREE_ITEM_MENU(id, func)
	EVT_TREE_STATE_IMAGE_CLICK(id, func)
	class wxTreeEvent public wxNotifyEvent public wxCommandEvent public wxEvent public wxObject
		wxTreeEvent(wxEventType commandType, wxTreeCtrl *tree, const wxTreeItemId&item = wxTreeItemId())
		int GetKeyCode() const
		wxTreeItemId GetItem() const
		const wxKeyEvent& GetKeyEvent() const
		const wxString& GetLabel() const
		wxTreeItemId GetOldItem() const
		wxPoint GetPoint() const
		bool IsEditCancelled() const
		void SetToolTip(const wxString& tooltip)
<wx/treectrl.h>
	class wxTreeItemData public wxClientData
		wxTreeItemData()
		void ~wxTreeItemData()
		const wxTreeItemId& GetId()
		void SetId(const wxTreeItemId& id)
<wx/event.h>
	EVT_UPDATE_UI(id, func)
	EVT_UPDATE_UI_RANGE(id1, id2, func)
	class wxUpdateUIEvent public wxCommandEvent public wxEvent public wxObject
		wxUpdateUIEvent(wxWindowID commandId = 0)
		static bool CanUpdate(wxWindow* window)
		void Check(bool check)
		void Enable(bool enable)
		void Show(bool show)
		bool GetChecked() const
		bool GetEnabled() const
		bool GetShown() const
		bool GetSetChecked() const
		bool GetSetEnabled() const
		bool GetSetShown() const
		bool GetSetText() const
		wxString GetText() const
		static wxUpdateUIMode GetMode()
		static long GetUpdateInterval()
		static void ResetUpdateTime()
		static void SetMode(wxUpdateUIMode mode)
		void SetText(const wxString& text)
		static void SetUpdateInterval(long updateInterval)
<wx/uri.h>
	class wxURI public wxObject
		wxURI()
		wxURI(const wxChar* uri)
		wxURI(const wxURI& uri)
		wxString BuildURI() const
		wxString BuildUnescapedURI() const
		const wxChar* Create(const wxStringuri)
		const wxString GetFragment() const
		const HostType&amp; GetHostType() const
		const wxString GetPassword() const
		const wxString GetPath() const
		const wxString GetPort() const
		const wxString GetQuery() const
		const wxString GetScheme() const
		const wxString GetServer() const
		const wxString GetUser() const
		const wxString GetUserInfo() const
		bool HasFragment() const
		bool HasPath() const
		bool HasPort() const
		bool HasQuery() const
		bool HasScheme() const
		bool HasServer() const
		bool HasUser() const
		bool IsReference() const
		void operator ==(const wxURI& uricomp)
		void Resolve(const wxURI& base, int flags = wxURI_STRICT)
		wxString Unescape(const wxString& uri)
<wx/url.h>
	class wxURL public wxURI public wxObject
		wxURL(const wxString& url = wxEmptyString)
		~wxURL()
		wxProtocol& GetProtocol()
		wxURLError GetError() const
		wxInputStream * GetInputStream()
		bool IsOk() const
		static void SetDefaultProxy(const wxString& url_proxy)
		void SetProxy(const wxString& url_proxy)
		wxURLError SetURL(const wxString& url)
<wx/dataobj.h>
	class wxURLDataObject public wxDataObjectComposite public wxDataObject public wxTextDataObject public wxDataObjectSimple public wxDataObject
		wxURLDataObject(const wxString& url = wxEmptyString)
		wxString GetURL() const
		void SetURL(const wxString& url)
<wx/validate.h>
	class wxValidator public wxEvtHandler public wxObject
		wxValidator()
		~wxValidator()
		virtual wxObject* Clone() const
		wxWindow* GetWindow() const
		void SetBellOnError(bool doIt = true)
		void SetWindow(wxWindow* window)
		virtual bool TransferToWindow()
		virtual bool TransferToWindow()
		virtual bool Validate(wxWindow* parent)
<wx/variant.h>
	class wxVariant public wxObject
		wxVariant()
		wxVariant(const wxVariant& variant)
		wxVariant(const wxChar* value, const wxString& name = "")
		wxVariant(const wxString& value, const wxString& name = "")
		wxVariant(wxChar value, const wxString& name = "")
		wxVariant(long value, const wxString& name = "")
		wxVariant(bool value, const wxString& name = "")
		wxVariant(double value, const wxString& name = "")
		wxVariant(const wxList& value, const wxString& name = "")
		wxVariant(void* value, const wxString& name = "")
		wxVariant(wxObject* value, const wxString& name = "")
		wxVariant(wxVariantData* data, const wxString& name = "")
		wxVariant(wxDateTime& val, const wxString& name = "")
		wxVariant(wxArrayString& val, const wxString& name = "")
		wxVariant(DATE_STRUCT* val, const wxString& name = "")
		wxVariant(TIME_STRUCT* val, const wxString& name = "")
		wxVariant(TIMESTAMP_STRUCT* val, const wxString& name = "")
		~wxVariant()
		void Append(const wxVariant& value)
		void Clear()
		void ClearList()
		bool Convert(long* value) const
		bool Convert(bool* value) const
		bool Convert(double* value) const
		bool Convert(wxString* value) const
		bool Convert(wxChar* value) const
		bool Convert(wxDateTime* value) const
		size_t GetCount() const
		bool Delete(size_t item)
		wxArrayString GetArrayString() const
		bool GetBool() const
		wxChar GetChar() const
		wxVariantData* GetData() const
		wxDateTime GetDateTime() const
		double GetDouble() const
		long GetLong() const
		const wxString& GetName() const
		wxString GetString() const
		wxString GetType() const
		void* GetVoidPtr() const
		wxObject* GetWxObjectPtr() const
		void Insert(const wxVariant& value)
		bool IsNull() const
		bool IsType(const wxString& type) const
		bool IsValueKindOf(const wxClassInfo* type type) const
		void MakeNull()
		wxString MakeString() const
		bool Member(const wxVariant& value) const
		void NullList()
		void SetData(wxVariantData* data)
		void operator =(const wxVariant& value)
		void operator =(wxVariantData* value)
		void operator =(const wxString& value)
		void operator =(const wxChar* value)
		void operator =(wxChar value)
		void operator =(const long value)
		void operator =(const bool value)
		void operator =(const double value)
		void operator =(void* value)
		void operator =(wxObject* value)
		void operator =(const wxList& value)
		void operator =(const wxDateTime& value)
		void operator =(const wxArrayString& value)
		void operator =(const DATE_STRUCT* value)
		void operator =(const TIME_STRUCT* value)
		void operator =(const TIMESTAMP_STRUCT* value)
		bool operator ==(const wxVariant& value) const
		bool operator ==(const wxString& value) const
		bool operator ==(const wxChar* value) const
		bool operator ==(wxChar value) const
		bool operator ==(const long value) const
		bool operator ==(const bool value) const
		bool operator ==(const double value) const
		bool operator ==(void* value) const
		bool operator ==(wxObject* value) const
		bool operator ==(const wxList& value) const
		bool operator ==(const wxArrayString& value) const
		bool operator ==(const wxDateTime& value) const
		bool operator !=(const wxVariant& value) const
		bool operator !=(const wxString& value) const
		bool operator !=(const wxChar* value) const
		bool operator !=(wxChar value) const
		bool operator !=(const long value) const
		bool operator !=(const bool value) const
		bool operator !=(const double value) const
		bool operator !=(void* value) const
		bool operator !=(wxObject* value) const
		bool operator !=(const wxList& value) const
		bool operator !=(const wxArrayString& value) const
		bool operator !=(const wxDateTime& value) const
		wxVariant operator [](size_t idx) const
		wxVariant& operator [](size_t idx)
		char operator wxChar() const
		double operator double() const
		long operator long() const
		wxString operator wxString() const
		void* operator void*() const
		void* operator wxDateTime() const
<wx/variant.h>
	class wxVariantData public wxObject
		wxVariantData()
		void DecRef()
		bool Eq(wxVariantData& data) const
		wxString GetType() const
		wxClassInfo* GetValueClassInfo() const
		void IncRef()
		bool Read(ostream&amp; stream)
		bool Read(wxString& string)
		bool Write(ostream&amp; stream) const
		bool Write(wxString& string) const
<wx/docview.h>
	class wxView public wxEvtHandler public wxObject
		wxView()
		~wxView()
		virtual void Activate(bool activate)
		virtual bool Close(bool deleteWindow = true)
		wxDocument* GetDocument() const
		wxDocManager* GetDocumentManager() const
		wxWindow * GetFrame()
		wxString GetViewName() const
		virtual void OnActivateView(bool activate, wxView *activeView, wxView *deactiveView)
		virtual void OnChangeFilename()
		virtual bool OnClose(bool deleteWindow)
		virtual void OnClosingDoocument()
		virtual bool OnCreate(wxDocument* doc, long flags)
		virtual wxPrintout* OnCreatePrintout()
		virtual void OnDraw(wxDC* dc)
		virtual void OnUpdate(wxView* sender, wxObject* hint)
		void SetDocument(wxDocument* doc)
		void SetFrame(wxWindow* frame)
		void SetViewName(const wxString& name)
<wx/vlbox.h>
	class wxVListBox public wxVScrolledWindow public wxPanel public wxWindow public wxEvtHandler public wxObject
		wxVListBox(wxWindow* parent, wxWindowID id = wxID_ANY, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = 0, const wxString& name = wxVListBoxNameStr)
		wxVListBox()
		void Clear()
		bool Create(wxWindow* parent, wxWindowID id = wxID_ANY, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = 0, const wxString& name = wxVListBoxNameStr)
		bool DeselectAll()
		int GetFirstSelected(unsigned long&amp; cookie) const
		size_t GetItemCount() const
		wxPoint GetMargins() const
		int GetNextSelected(unsigned long&amp; cookie) const
		size_t GetSelectedCount() const
		int GetSelection() const
		const wxColour& GetSelectionBackground() const
		bool HasMultipleSelection() const
		bool IsCurrent(size_t item) const
		bool IsSelected(size_t item) const
		void OnDrawBackground(wxDC& dc, const wxRect& rect, size_t n) const
		void OnDrawItem(wxDC& dc, const wxRect& rect, size_t n) const
		void OnDrawSeparator(wxDC& dc, wxRect& rect, size_t n) const
		wxCoord OnMeasureItem(size_t n) const
		bool Select(size_t item, bool select = true)
		bool SelectAll()
		bool SelectRange(size_t from, size_t to)
		void SetItemCount(size_t count)
		void SetMargins(const wxPoint& pt)
		void SetMargins(wxCoord x, wxCoord y)
		void SetSelection(int selection)
		void SetSelectionBackground(const wxColour& col)
		void Toggle(size_t item)
<wx/vscroll.h>
	class wxVScrolledWindow public wxPanel public wxWindow public wxEvtHandler public wxObject
		wxVScrolledWindow(wxWindow* parent, wxWindowID id = wxID_ANY, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = 0, const wxString& name = wxPanelNameStr)
		wxVScrolledWindow()
		bool Create(wxWindow* parent, wxWindowID id = wxID_ANY, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = 0, const wxString& name = wxPanelNameStr)
		virtual wxCoord EstimateTotalHeight() const
		size_t GetFirstVisibleLine() const
		size_t GetLastVisibleLine() const
		size_t GetLineCount() const
		size_t GetVisibleBegin() const
		size_t GetVisibleEnd() const
		int HitTest(wxCoord x, wxCoord y) const
		int HitTest(const wxPoint& pt) const
		bool IsVisible(size_t line) const
		virtual wxCoord OnGetLineHeight(size_t n) const
		virtual void OnGetLinesHint(size_t lineMin, size_t lineMax) const
		void RefreshLine(size_t line)
		void RefreshLines(size_t from, size_t to)
		void RefreshAll()
		bool ScrollLines(int lines)
		bool ScrollPages(int pages)
		bool ScrollToLine(size_t line)
		void SetLineCount(size_t count)
<wx/window.h>
	wxBORDER_SIMPLE
	wxBORDER_DOUBLE
	wxBORDER_SUNKEN
	wxBORDER_RAISED
	wxBORDER_STATIC
	wxBORDER_THEME
	wxBORDER_NONE
	wxTRANSPARENT_WINDOW
	wxTAB_TRAVERSAL
	wxWANTS_CHARS
	wxNO_FULL_REPAINT_ON_RESIZE
	wxVSCROLL
	wxHSCROLL
	wxALWAYS_SHOW_SB
	wxCLIP_CHILDREN
	wxFULL_REPAINT_ON_RESIZE
	wxWS_EX_VALIDATE_RECURSIVELY
	wxWS_EX_BLOCK_EVENTS
	wxWS_EX_TRANSIENT
	wxWS_EX_PROCESS_IDLE
	wxWS_EX_PROCESS_UI_UPDATES
	class wxWindow public wxEvtHandler public wxObject
		wxWindow()
		wxWindow(wxWindow* parent, wxWindowID id,const wxPoint& pos = wxDefaultPosition,const wxSize& size = wxDefaultSize,long style = 0,const wxString& name = wxPanelNameStr)
		~wxWindow()
		virtual void AddChild(wxWindow* child)
		void CacheBestSize(const wxSize& size) const
		virtual void CaptureMouse()
		void Center(int direction)
		void CenterOnParent(int direction)
		void CenterOnScreen(int direction)
		void Centre(int direction = wxBOTH)
		void CentreOnParent(int direction = wxBOTH)
		void CentreOnScreen(int direction = wxBOTH)
		void ClearBackground()
		virtual void ClientToScreen(int* x, int* y) const
		virtual wxPoint ClientToScreen(const wxPoint& pt) const
		wxSize ClientToWindowSize(const wxSize& size)
		bool Close(bool force = false)
		wxPoint ConvertDialogToPixels(const wxPoint& pt)
		wxSize ConvertDialogToPixels(const wxSize& sz)
		wxPoint ConvertPixelsToDialog(const wxPoint& pt)
		wxSize ConvertPixelsToDialog(const wxSize& sz)
		virtual bool Destroy()
		virtual void DestroyChildren()
		bool Disable()
		virtual wxSize DoGetBestSize() const
		virtual void DoUpdateWindowUI(wxUpdateUIEvent& event)
		virtual void DragAcceptFiles(bool accept)
		virtual bool Enable(bool enable = true)
		static wxWindow* FindFocus()
		wxWindow* FindWindow(long id) const
		wxWindow* FindWindow(const wxString& name) const
		static wxWindow* FindWindowById(long id, wxWindow* parent = NULL)
		static wxWindow* FindWindowByLabel(const wxString& label, wxWindow* parent = NULL)
		static wxWindow* FindWindowByName(const wxString& name, wxWindow* parent = NULL)
		virtual void Fit()
		virtual void FitInside()
		virtual void Freeze()
		wxAcceleratorTable* GetAcceleratorTable() const
		wxAccessible* GetAccessible()
		wxSize GetAdjustedBestSize() const
		virtual wxColour GetBackgroundColour() const
		virtual wxBackgroundStyle GetBackgroundStyle() const
		wxSize GetEffectiveMinSize() const
		wxSize GetBestSize() const
		static wxWindow * GetCapture()
		wxCaret * GetCaret() const
		virtual int GetCharHeight() const
		virtual int GetCharWidth() const
		wxWindowList&amp; GetChildren()
		const wxWindowList&amp; GetChildren() const
		static wxVisualAttributes GetClassDefaultAttributes(wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL)
		void GetClientSize(int* width, int* height) const
		wxSize GetClientSize() const
		wxLayoutConstraints* GetConstraints() const
		const wxSizer * GetContainingSizer() const
		const wxCursor& GetCursor() const
		virtual wxVisualAttributes GetDefaultAttributes() const
		wxDropTarget* GetDropTarget() const
		wxEvtHandler* GetEventHandler() const
		long GetExtraStyle() const
		wxFont GetFont() const
		virtual wxColour GetForegroundColour()
		wxWindow* GetGrandParent() const
		void* GetHandle() const
		virtual wxString GetHelpTextAtPoint(const wxPointpoint, wxHelpEvent::Origin origin) const
		virtual wxString GetHelpText() const
		int GetId() const
		virtual wxString GetLabel() const
		wxSize GetMaxSize() const
		virtual wxSize GetMinSize() const
		virtual wxString GetName() const
		wxWindow * GetNextSibling() const
		virtual wxWindow* GetParent() const
		virtual void GetPosition(int* x, int* y) const
		wxPoint GetPosition() const
		wxWindow * GetPrevSibling() const
		virtual wxRect GetRect() const
		virtual void GetScreenPosition(int* x, int* y) const
		wxPoint GetScreenPosition() const
		virtual wxRect GetScreenRect() const
		virtual int GetScrollPos(int orientation)
		virtual int GetScrollRange(int orientation)
		virtual int GetScrollThumb(int orientation)
		void GetSize(int* width, int* height) const
		wxSize GetSize() const
		wxSizer * GetSizer() const
		virtual void GetTextExtent(const wxString& string, int* x, int* y,int* descent = NULL, int* externalLeading = NULL,const wxFont* font = NULL, bool use16 = false) const
		wxToolTip* GetToolTip() const
		virtual wxRegion GetUpdateRegion() const
		wxValidator* GetValidator() const
		void GetVirtualSize(int* width, int* height) const
		wxSize GetVirtualSize() const
		wxSize GetWindowBorderSize() const
		long GetWindowStyleFlag() const
		wxWindowVariant GetWindowVariant() const
		virtual bool HasCapture() const
		bool HasFlag(int flag) const
		virtual bool HasMultiplePages() const
		virtual bool HasScrollbar(int orient) const
		virtual bool HasTransparentBackground() const
		bool Hide()
		void InheritAttributes()
		void InitDialog()
		void InvalidateBestSize()
		virtual bool IsDoubleBuffered() const
		virtual bool IsEnabled() const
		bool IsExposed(int x, int y) const
		bool IsExposed(wxPoint &amp;pt) const
		bool IsExposed(int x, int y, int w, int h) const
		bool IsExposed(wxRect &amp;rect) const
		virtual bool IsFrozen() const
		virtual bool IsRetained() const
		virtual bool IsShown() const
		virtual bool IsShownOnScreen() const
		bool IsTopLevel() const
		void Layout()
		void Lower()
		virtual void MakeModal(bool flag)
		void Move(int x, int y)
		void Move(const wxPoint& pt)
		void MoveAfterInTabOrder(wxWindow *win)
		void MoveBeforeInTabOrder(wxWindow *win)
		bool Navigate(int flags = wxNavigationKeyEvent::IsForward)
		virtual void OnInternalIdle()
		wxEvtHandler* PopEventHandler(bool deleteHandler = false) const
		bool PopupMenu(wxMenu* menu, const wxPoint& pos = wxDefaultPosition)
		bool PopupMenu(wxMenu* menu, int x, int y)
		void PushEventHandler(wxEvtHandler* handler)
		void Raise()
		virtual void Refresh(bool eraseBackground = true, const wxRect* rect = NULL)
		void RefreshRect(const wxRect& rect, bool eraseBackground = true)
		bool RegisterHotKey(int hotkeyId, int modifiers, int virtualKeyCode)
		virtual void ReleaseMouse()
		virtual void RemoveChild(wxWindow* child)
		bool RemoveEventHandler(wxEvtHandler *handler)
		virtual bool Reparent(wxWindow* newParent)
		virtual void ScreenToClient(int* x, int* y) const
		virtual wxPoint ScreenToClient(const wxPoint& pt) const
		virtual bool ScrollLines(int lines)
		virtual bool ScrollPages(int pages)
		virtual void ScrollWindow(int dx, int dy, const wxRect* rect = NULL)
		virtual void SetAcceleratorTable(const wxAcceleratorTable& accel)
		void SetAccessible(wxAccessible* accessible)
		void SetAutoLayout(bool autoLayout)
		virtual bool SetBackgroundColour(const wxColour& colour)
		virtual void SetBackgroundStyle(wxBackgroundStyle style)
		void SetInitialSize(const wxSize& size = wxDefaultSize)
		void SetCaret(wxCaret *caret) const
		virtual void SetClientSize(int width, int height)
		virtual void SetClientSize(const wxSize& size)
		void SetConstraints(wxLayoutConstraints* constraints)
		void SetContainingSizer(wxSizer* sizer)
		virtual void SetCursor(const wxCursor&cursor)
		void SetDropTarget(wxDropTarget* target)
		virtual void SetInitialBestSize(const wxSize& size)
		void SetEventHandler(wxEvtHandler* handler)
		void SetExtraStyle(long exStyle)
		virtual void SetFocus()
		virtual void SetFocusFromKbd()
		void SetFont(const wxFont& font)
		virtual void SetForegroundColour(const wxColour& colour)
		virtual void SetHelpText(const wxString& helpText)
		void SetId(int id)
		virtual void SetLabel(const wxString& label)
		void SetMaxSize(const wxSize& size)
		void SetMinSize(const wxSize& size)
		virtual void SetName(const wxString& name)
		void SetOwnBackgroundColour(const wxColour& colour)
		void SetOwnFont(const wxFont& font)
		void SetOwnForegroundColour(const wxColour& colour)
		virtual void SetPalette(wxPalette* palette)
		virtual void SetScrollbar(int orientation, int position,int thumbSize, int range,bool refresh = true)
		virtual void SetScrollPos(int orientation, int pos, bool refresh = true)
		virtual void SetSize(int x, int y, int width, int height,int sizeFlags = wxSIZE_AUTO)
		virtual void SetSize(const wxRect& rect)
		virtual void SetSize(int width, int height)
		virtual void SetSize(const wxSize& size)
		void SetSizer(wxSizer* sizer, bool deleteOld=true)
		void SetSizerAndFit(wxSizer* sizer, bool deleteOld=true)
		virtual void SetThemeEnabled(bool enable)
		void SetToolTip(const wxString& tip)
		void SetToolTip(wxToolTip* tip)
		virtual void SetValidator(const wxValidator& validator)
		void SetVirtualSize(int width, int height)
		void SetVirtualSize(const wxSize& size)
		virtual void SetVirtualSizeHints(int minW,int minH, int maxW=-1, int maxH=-1)
		void SetVirtualSizeHints(const wxSize& minSize=wxDefaultSize,const wxSize& maxSize=wxDefaultSize)
		void SetWindowStyle(long style)
		virtual void SetWindowStyleFlag(long style)
		void SetWindowVariant(wxWindowVariantvariant)
		virtual bool ShouldInheritColours()
		virtual bool Show(bool show = true)
		virtual void Thaw()
		bool ToggleWindowStyle(int flag)
		virtual bool TransferDataFromWindow()
		virtual bool TransferDataToWindow()
		bool UnregisterHotKey(int hotkeyId)
		virtual void Update()
		virtual void UpdateWindowUI(long flags = wxUPDATE_UI_NONE)
		virtual bool Validate()
		void WarpPointer(int x, int y)
		virtual wxSize WindowToClientSize(const wxSize& size)
<wx/wupdlock.h>
	class wxWindowUpdateLocker
		wxWindowUpdateLocker(wxWindow *win)
		~wxWindowUpdateLocker()
<wx/event.h>
	EVT_WINDOW_CREATE(func)
	class wxWindowCreateEvent public wxCommandEvent public wxEvent public wxObject
		wxWindowCreateEvent(wxWindow* win = NULL)
<wx/dcclient.h>
	class wxWindowDC public wxDC
		wxWindowDC(wxWindow* window)
<wx/event.h>
	class wxWindowDestroyEvent public wxCommandEvent public wxEvent public wxObject
		wxWindowDestroyEvent(wxWindow* win = NULL)
<wx/utils.h>
	class wxWindowDisabler
		wxWindowDisabler(wxWindow *winToSkip = NULL)
		~wxWindowDisabler()
<wx/wizard.h>
	EVT_WIZARD_PAGE_CHANGED(id, func)
	EVT_WIZARD_PAGE_CHANGING(id, func)
	EVT_WIZARD_PAGE_SHOWN(id, func)
	EVT_WIZARD_CANCEL(id, func)
	EVT_WIZARD_HELP(id, func)
	EVT_WIZARD_FINISHED(id, func)
	wxWIZARD_EX_HELPBUTTON
	class wxWizard public wxDialog public wxPanel public wxWindow public wxEvtHandler public wxObject
		wxWizard()
		wxWizard(wxWindow* parent, int id = -1, const wxString& title = wxEmptyString, const wxBitmap& bitmap = wxNullBitmap, const wxPoint& pos = wxDefaultPosition, long style = wxDEFAULT_DIALOG_STYLE)
		bool Create(wxWindow* parent, int id = -1, const wxString& title = wxEmptyString, const wxBitmap& bitmap = wxNullBitmap, const wxPoint& pos = wxDefaultPosition, long style = wxDEFAULT_DIALOG_STYLE)
		void FitToPage(const wxWizardPage* firstPage)
		const wxBitmap& GetBitmap() const
		wxWizardPage* GetCurrentPage() const
		virtual wxSizer* GetPageAreaSizer() const
		wxSize GetPageSize() const
		virtual bool HasNextPage(wxWizardPage *page)
		virtual bool HasPrevPage(wxWizardPage *page)
		bool RunWizard(wxWizardPage* firstPage)
		void SetBitmap(const wxBitmap& bitmap)
		void SetPageSize(const wxSize& sizePage)
		void SetBorder(int border)
<wx/wizard.h>
	EVT_WIZARD_PAGE_CHANGED(id, func)
	EVT_WIZARD_PAGE_CHANGING(id, func)
	EVT_WIZARD_PAGE_SHOWN(id, func)
	EVT_WIZARD_CANCEL(id, func)
	EVT_WIZARD_HELP(id, func)
	EVT_WIZARD_FINISHED(id, func)
	class wxWizardEvent public wxNotifyEvent public wxCommandEvent public wxEvent public wxObject
		wxWizardEvent(wxEventType type = wxEVT_NULL, int id = -1, bool direction = true)
		bool GetDirection() const
		wxWizardPage* GetPage() const
<wx/wizard.h>
	class wxWizardPage public wxPanel public wxWindow public wxEvtHandler public wxObject
		wxWizardPage(wxWizard* parent, const wxBitmap& bitmap = wxNullBitmap, const wxChar *resource = NULL)
		wxWizardPage* GetPrev() const
		wxWizardPage* GetNext() const
		wxBitmap GetBitmap() const
<wx/wizard.h>
	class wxWizardPageSimple public wxWizardPage public wxPanel public wxWindow public wxEvtHandler public wxObject
		wxWizardPageSimple(wxWizard* parent = NULL, wxWizardPage* prev = NULL, wxWizardPage* next = NULL, const wxBitmap& bitmap = wxNullBitmap)
		void SetPrev(wxWizardPage* prev)
		void SetNext(wxWizardPage* next)
		static void Chain(wxWizardPageSimple* first, wxWizardPageSimple* second)
<wx/xml/xml.h>
	class wxXmlDocument public wxObject
		wxXmlDocument()
		wxXmlDocument(const wxString& filename, const wxString& encoding = wxT("UTF-8"), int flags = wxXMLDOC_NONE)
		wxXmlDocument(wxInputStream& stream, const wxString& encoding = wxT("UTF-8"), int flags = wxXMLDOC_NONE)
		wxXmlDocument(const wxXmlDocument& doc)
		~wxXmlDocument()
		wxXmlNode* DetachRoot()
		wxString GetEncoding() const
		wxString GetFileEncoding() const
		wxXmlNode* GetRoot() const
		wxString GetVersion() const
		bool IsOk() const
		bool Load(const wxString& filename, const wxString& encoding = wxT("UTF-8"), int flags = wxXMLDOC_NONE)
		bool Load(wxInputStream& stream, const wxString& encoding = wxT("UTF-8"), int flags = wxXMLDOC_NONE)
		bool Save(const wxString& filename, int indentstep = 1) const
		bool Save(wxOutputStream& stream, int indentstep = 1) const
		void SetEncoding(const wxString& enc)
		void SetFileEncoding(const wxString& encoding)
		void SetRoot(wxXmlNode* node)
		void SetVersion(const wxString& version)
		wxXmlDocument& operator operator=(const wxXmlDocument& doc)
<wx/xml/xml.h>
	class wxXmlNode
		wxXmlNode(wxXmlNode* parent, wxXmlNodeType type, const wxString& name, const wxString& content = wxEmptyString, wxXmlProperty* props = NULL, wxXmlNode* next = NULL)
		wxXmlNode(const wxXmlNode& node)
		wxXmlNode(wxXmlNodeType type, const wxString& name, const wxString& content = wxEmptyString)
		~wxXmlNode()
		void AddChild(wxXmlNode* child)
		void AddProperty(const wxString& name, const wxString& value)
		void AddProperty(wxXmlProperty* prop)
		bool DeleteProperty(const wxString& name)
		wxXmlNode* GetChildren() const
		wxString GetContent() const
		int GetDepth(wxXmlNode* grandparent = NULL) const
		wxString GetNodeContent() const
		wxString GetName() const
		wxXmlNode* GetNext() const
		wxXmlNode* GetParent() const
		bool GetPropVal(const wxString& propName, wxString* value) const
		wxString GetPropVal(const wxString& propName, const wxString& defaultVal) const
		wxXmlProperty * GetProperties() const
		wxXmlNodeType GetType() const
		bool HasProp(const wxString& propName) const
		bool InsertChild(wxXmlNode* child, wxXmlNode* followingNode)
		bool InsertChildAfter(wxXmlNode* child, wxXmlNode* precedingNode)
		bool IsWhitespaceOnly() const
		bool RemoveChild(wxXmlNode* child)
		void SetChildren(wxXmlNode* child)
		void SetContent(const wxString& con)
		void SetName(const wxString& name)
		void SetNext(wxXmlNode* next)
		void SetParent(wxXmlNode* parent)
		void SetProperties(wxXmlProperty* prop)
		void SetType(wxXmlNodeType type)
		wxXmlNode& operator=(const wxXmlNode& node)
<wx/xml/xml.h>
	class wxXmlProperty
		wxXmlProperty()
		wxXmlProperty(const wxString& name, const wxString& value, wxXmlProperty* next = NULL)
		~wxXmlProperty()
		wxString GetName() const
		wxXmlProperty* GetNext() const
		wxString GetValue() const
		void SetName(const wxString& name)
		void SetNext(wxXmlProperty* next)
		void SetValue(const wxString& value)
<wx/xrc/xmlres.h>
	class wxXmlResource public wxObject
		wxXmlResource(const wxString& filemask, int flags = wxXRC_USE_LOCALE,const wxStringdomain = wxEmptyString)
		wxXmlResource(int flags = wxXRC_USE_LOCALE,const wxStringdomain = wxEmptyString)
		~wxXmlResource()
		void AddHandler(wxXmlResourceHandler* handler)
		bool AttachUnknownControl(const wxString& name, wxWindow* control, wxWindow* parent = NULL)
		void ClearHandlers()
		int CompareVersion(int major, int minor, int release, int revision) const
		wxXmlResource* Get()
		int GetFlags()
		long GetVersion() const
		int GetXRCID(const wxChar* str_id, int value_if_not_found = -2)
		void InitAllHandlers()
		bool Load(const wxString& filemask)
		wxBitmap LoadBitmap(const wxString& name)
		wxDialog* LoadDialog(wxWindow* parent, const wxString& name)
		bool LoadDialog(wxDialog* dlg, wxWindow* parent, const wxString& name)
		bool LoadFrame(wxFrame* frame, wxWindow* parent, const wxString& name)
		wxIcon LoadIcon(const wxString& name)
		wxMenu* LoadMenu(const wxString& name)
		wxMenuBar* LoadMenuBar(wxWindow* parent, const wxString& name)
		wxMenuBar* LoadMenuBar(const wxString& name)
		wxPanel* LoadPanel(wxWindow* parent, const wxString& name)
		bool LoadPanel(wxPanel* panel, wxWindow* parent, const wxString& name)
		wxToolBar* LoadToolBar(wxWindow* parent, const wxString& name)
		wxXmlResource* Set(wxXmlResource* res)
		void SetFlags(int flags)
		bool Unload(const wxString& filename)
		wxChar* GetDomain()
		wxChar* SetDomain(const wxChar* domain)
<wx/xrc/xmlres.h>
	class wxXmlResourceHandler public wxObject
		wxXmlResourceHandler()
		~wxXmlResourceHandler()
		void AddStyle(const wxString& name, int value)
		void AddWindowStyles()
		bool CanHandle(wxXmlNode* node)
		void CreateChildren(wxObject* parent, bool this_hnd_only = false)
		void CreateChildrenPrivately(wxObject* parent, wxXmlNode* rootnode = NULL)
		wxObject* CreateResFromNode(wxXmlNode* node, wxObject* parent, wxObject* instance = NULL)
		wxObject* CreateResource(wxXmlNode* node, wxObject* parent, wxObject* instance)
		wxObject* DoCreateResource()
		wxBitmap GetBitmap(const wxString& param = wxT("bitmap"), wxSize size = wxDefaultSize)
		bool GetBool(const wxString& param, bool defaultv = false)
		wxColour GetColour(const wxString& param, const wxColour& default = wxNullColour)
		wxFileSystem& GetCurFileSystem()
		wxCoord GetDimension(const wxString& param, wxCoord defaultv = 0)
		wxFont GetFont(const wxString& param = wxT("font"))
		int GetID()
		wxIcon GetIcon(const wxString& param = wxT("icon"), wxSize size = wxDefaultSize)
		long GetLong(const wxString& param, long defaultv = 0)
		wxString GetName()
		wxString GetNodeContent(wxXmlNode* node)
		wxXmlNode* GetParamNode(const wxString& param)
		wxString GetParamValue(const wxString& param)
		wxPoint GetPosition(const wxString& param = wxT("pos"))
		wxSize GetSize(const wxString& param = wxT("size"))
		int GetStyle(const wxString& param = wxT("style"), int defaults = 0)
		wxString GetText(const wxString& param)
		bool HasParam(const wxString& param)
		bool IsOfClass(wxXmlNode* node, const wxString& classname)
		void SetParentResource(wxXmlResource* res)
		void SetupWindow(wxWindow* wnd)
<wx/zipstrm.h>
	class wxZipClassFactory public wxArchiveClassFactory
<wx/zipstrm.h>
	class wxZipEntry public wxArchiveEntry
		wxZipEntry(const wxString& name = wxEmptyString, const wxDateTime& dt = wxDateTime::Now(), off_t size = wxInvalidOffset)
		wxZipEntry(const wxZipEntry& entry)
		wxZipEntry* Clone() const
		wxString GetComment() const
		void SetComment(const wxString& comment)
		off_t GetCompressedSize() const
		wxUint32 GetCrc() const
		wxUint32 GetExternalAttributes() const
		void SetExternalAttributes(wxUint32 attr)
		const char* GetExtra() const
		size_t GetExtraLen() const
		void SetExtra(const char* extra, size_t len)
		int GetFlags() const
		wxString GetInternalName() const
		wxString GetInternalName(const wxString& name, wxPathFormat format = wxPATH_NATIVE, bool* pIsDir = NULL)
		const char* GetLocalExtra() const
		size_t GetLocalExtraLen() const
		void SetLocalExtra(const char* extra, size_t len)
		int GetMethod() const
		void SetMethod(int method)
		int GetMode() const
		void SetMode(int mode)
		void SetNotifier(wxZipNotifier& notifier)
		void UnsetNotifier()
		int GetSystemMadeBy() const
		void SetSystemMadeBy(int system)
		bool IsMadeByUnix() const
		bool IsText() const
		void SetIsText(bool isText = true)
		wxZipEntry& operator operator=(const wxZipEntry& entry)
<wx/zipstrm.h>
	class wxZipInputStream public wxArchiveInputStream
		wxZipInputStream(wxInputStream& stream, wxMBConv& conv = wxConvLocal)
		wxZipInputStream(wxInputStream*stream, wxMBConv& conv = wxConvLocal)
		wxZipInputStream(const wxString& archive, const wxString& file)
		bool CloseEntry()
		wxString GetComment()
		wxZipEntry* GetNextEntry()
		int GetTotalEntries()
		bool OpenEntry(wxZipEntry& entry)
<wx/zipstrm.h>
	class wxZipNotifier
		void OnEntryUpdated(wxZipEntry& entry)
<wx/zipstrm.h>
	class wxZipOutputStream public wxArchiveOutputStream
		wxZipOutputStream(wxOutputStream& stream, int level = -1, wxMBConv& conv = wxConvLocal)
		wxZipOutputStream(wxOutputStream*stream, int level = -1, wxMBConv& conv = wxConvLocal)
		~wxZipOutputStream()
		bool Close()
		bool CloseEntry()
		bool CopyArchiveMetaData(wxZipInputStream& inputStream)
		bool CopyEntry(wxZipEntry* entry, wxZipInputStream& inputStream)
		int GetLevel() const
		void SetLevel(int level)
		bool PutNextDirEntry(const wxString& name, const wxDateTime& dt = wxDateTime::Now())
		bool PutNextEntry(wxZipEntry* entry)
		bool PutNextEntry(const wxString& name, const wxDateTime& dt = wxDateTime::Now(), off_t size = wxInvalidOffset)
		void SetComment(const wxString& comment)
<wx/zstream.h>
	class wxZlibInputStream public wxFilterInputStream
		wxZlibInputStream(wxInputStream& stream, int flags = wxZLIB_AUTO)
		wxZlibInputStream(wxInputStream* stream, int flags = wxZLIB_AUTO)
		static bool CanHandleGZip()
<wx/zstream.h>
	class wxZlibOutputStream public wxFilterOutputStream
		wxZlibOutputStream(wxOutputStream& stream, int level = -1, int flags = wxZLIB_ZLIB)
		wxZlibOutputStream(wxOutputStream* stream, int level = -1, int flags = wxZLIB_ZLIB)
		static bool CanHandleGZip()
<wx/app.h>
<wx/init.h>
	void wxEntryCleanup()
	bool wxEntryStart(int&amp; argc, wxChar **argv)
	wxAppDerivedClass&amp; wxGetApp()
	bool wxHandleFatalExceptions(bool doIt = true)
<wx/image.h>
	void wxInitAllImageHandlers()
<wx/app.h>
	bool wxInitialize()
<wx/utils.h>
	bool wxSafeYield(wxWindow* win = NULL, boolonlyIfNeeded = false)
<wx/app.h>
	void wxUninitialize()
<wx/app.h>
	bool wxYield()
<wx/app.h>
	void wxWakeUpIdle()
	wxInt32 wxINT32_SWAP_ALWAYS(wxInt32 value)
	wxInt32 wxINT32_SWAP_ON_BE(wxInt32 value)
	wxInt32 wxINT32_SWAP_ON_LE(wxInt32 value)
<wx/clipbrd.h>
	bool wxClipboardOpen()
	bool wxCloseClipboard()
	bool wxEmptyClipboard()
	int wxEnumClipboardFormats(int dataFormat)
	wxObject * wxGetClipboardData(int dataFormat)
	bool wxGetClipboardFormatName(int dataFormat, const wxString& formatName, int maxCount)
	bool wxIsClipboardFormatAvailable(int dataFormat)
	bool wxOpenClipboard()
	int wxRegisterClipboardFormat(const wxString& formatName)
	bool wxSetClipboardData(int dataFormat, wxObject* data, int width, int height)
<wx/debug.h>
	void wxOnAssert(const char *fileName, int lineNumber, const char *func, const char *cond, const char *msg = NULL)
	wxASSERT(condition)
	wxASSERT_MIN_BITSIZE(type, size)
	wxASSERT_MSG(condition, msg)
	wxCOMPILE_TIME_ASSERT(condition, msg)
	wxCOMPILE_TIME_ASSERT(condition, msg, name)
	wxFAIL()
	wxFAIL_MSG(msg)
	wxCHECK(condition, retValue)
	wxCHECK_MSG(condition, retValue, msg)
	wxCHECK_RET(condition, msg)
	wxCHECK2(condition, operation)
	wxCHECK2(condition, operation, msg)
	void wxTrap()
	bool wxIsDebuggerRunning()
<wx/aboutdlg.h>
	void wxAboutBox(const wxAboutDialogInfo& info)
<wx/utils.h>
	void wxBeginBusyCursor(wxCursor *cursor = wxHOURGLASS_CURSOR)
	void wxBell()
<wx/tipdlg.h>
	wxTipProvider * wxCreateFileTipProvider(const wxString& filename,size_t currentTip)
<wx/dirdlg.h>
	wxString wxDirSelector(const wxString& message = wxDirSelectorPromptStr,const wxString& default_path = "",long style = 0, const wxPoint& pos = wxDefaultPosition,wxWindow *parent = NULL)
<wx/filedlg.h>
	wxString wxFileSelector(const wxString& message, const wxString& default_path = "",const wxString& default_filename = "", const wxString& default_extension = "",const wxString& wildcard = "*.*", int flags = 0, wxWindow *parent = NULL,int x = -1, int y = -1)
<wx/utils.h>
	void wxEndBusyCursor()
<wx/aboutdlg.h>
	void wxGenericAboutBox(const wxAboutDialogInfo& info)
<wx/colordlg.h>
	wxColour wxGetColourFromUser(wxWindow *parent, const wxColour& colInit, const wxString& caption = wxEmptyString)
<wx/fontdlg.h>
	wxFont wxGetFontFromUser(wxWindow *parent, const wxFont& fontInit, const wxString& caption = wxEmptyString)
<wx/choicdlg.h>
	size_t wxGetMultipleChoices(wxArrayInt&amp; selections,const wxString& message,const wxString& caption,const wxArrayString& aChoices,wxWindow *parent = NULL,int x = -1, int y = -1,bool centre = true,int width=150, int height=200)
<wx/numdlg.h>
	long wxGetNumberFromUser(const wxString& message,const wxString& prompt,const wxString& caption,long value,long min = 0,long max = 100,wxWindow *parent = NULL,const wxPoint& pos = wxDefaultPosition)
<wx/textdlg.h>
	wxString wxGetPasswordFromUser(const wxString& message, const wxString& caption = "Input text",const wxString& default_value = "", wxWindow *parent = NULL,int x = wxDefaultCoord, int y = wxDefaultCoord, bool centre = true)
	wxString wxGetTextFromUser(const wxString& message, const wxString& caption = "Input text",const wxString& default_value = "", wxWindow *parent = NULL,int x = wxDefaultCoord, int y = wxDefaultCoord, bool centre = true)
<wx/choicdlg.h>
	int wxGetMultipleChoice(const wxString& message, const wxString& caption, int n, const wxString& choices[],int nsel, int *selection,wxWindow *parent = NULL, int x = -1, int y = -1,bool centre = true, int width=150, int height=200)
	wxString wxGetSingleChoice(const wxString& message,const wxString& caption,const wxArrayString& aChoices,wxWindow *parent = NULL,int x = -1, int y = -1,bool centre = true,int width=150, int height=200)
	int wxGetSingleChoiceIndex(const wxString& message,const wxString& caption,const wxArrayString& aChoices,wxWindow *parent = NULL, int x = -1, int y = -1,bool centre = true, int width=150, int height=200)
	wxString wxGetSingleChoiceData(const wxString& message,const wxString& caption,const wxArrayString& aChoices,const wxString& client_data[],wxWindow *parent = NULL,int x = -1, int y = -1,bool centre = true, int width=150, int height=200)
<wx/utils.h>
	bool wxIsBusy()
<wx/msgdlg.h>
	int wxMessageBox(const wxString& message, const wxString& caption = "Message", int style = wxOK,wxWindow *parent = NULL, int x = -1, int y = -1)
<wx/tipdlg.h>
	bool wxShowTip(wxWindow *parent,wxTipProvider *tipProvider,bool showAtStartup = true)
<wx/utils.h>
	wxChar * wxGetEnv(const wxString& var)
	bool wxGetEnv(const wxString& var, wxString *value)
	bool wxSetEnv(const wxString& var, const wxChar *value)
	bool wxUnsetEnv(const wxString& var)
<wx/filefn.h>
	void wxDos2UnixFilename(wxChar *s)
	bool wxFileExists(const wxString& filename)
	time_t wxFileModificationTime(const wxString& filename)
	wxString wxFileNameFromPath(const wxString& path)
	wxString wxFindFirstFile(const char *spec, int flags = 0)
	wxString wxFindNextFile()
	bool wxGetDiskSpace(const wxString& path, wxLongLong *total = NULL, wxLongLong *free = NULL)
	wxFileKind wxGetFileKind(int fd)
	wxString wxGetOSDirectory()
	bool wxIsAbsolutePath(const wxString& filename)
	bool wxDirExists(const wxChar *dirname)
	wxString wxPathOnly(const wxString& path)
	void wxUnix2DosFilename(wxChar *s)
	wxCHANGE_UMASK(int mask)
	bool wxConcatFiles(const wxString& file1, const wxString& file2,const wxString& file3)
	bool wxCopyFile(const wxString& file1, const wxString& file2, bool overwrite = true)
	wxString wxGetCwd()
	wxString wxGetWorkingDirectory(char *buf=NULL, int sz=1000)
	char * wxGetTempFileName(const wxString& prefix, char *buf=NULL)
	bool wxIsWild(const wxString& pattern)
	bool wxMatchWild(const wxString& pattern, const wxString& text, bool dot_special)
	bool wxMkdir(const wxString& dir, int perm = 0777)
	int wxParseCommonDialogsFilter(const wxString& wildCard, wxArrayString& descriptions, wxArrayString& filters)
	bool wxRemoveFile(const wxString& file)
	bool wxRenameFile(const wxString& file1, const wxString& file2, bool overwrite = true)
	bool wxRmdir(const wxString& dir, int flags=0)
	bool wxSetWorkingDirectory(const wxString& dir)
	void wxSplitPath(const char * fullname, wxString * path, wxString * name, wxString * ext)
<wx/docview.h>
	bool wxTransferFileToStream(const wxString& filename, ostream&amp; stream)
	bool wxTransferStreamToFile(istream&amp; stream const wxString& filename)
<wx/gdicmn.h>
	wxBITMAP(bitmapName)
	void wxClientDisplayRect(int *x, int *y,int *width, int *height)
	bool wxColourDisplay()
	int wxDisplayDepth()
	void wxDisplaySize(int *width, int *height)
	void wxDisplaySizeMM(int *width, int *height)
<wx/dnd.h>
	wxIconOrCursor wxDROP_ICON(const char *name)
<wx/gdicmn.h>
	wxICON(iconName)
	bool wxMakeMetafilePlaceable(const wxString& filename, int minX, int minY,int maxX, int maxY, float scale=1.0)
	void wxSetCursor(const wxCursor& cursor)
<wx/log.h>
<wx/utils.h>
	void wxDebugMsg(const wxString& fmt, ...)
	void wxError(const wxString& msg, const wxString& title = "wxWidgets Internal Error")
	void wxFatalError(const wxString& msg, const wxString& title = "wxWidgets Fatal Error")
	void wxLogError(const char *formatString, ...)
	void wxLogFatalError(const char *formatString, ...)
	void wxLogWarning(const char *formatString, ...)
	void wxLogMessage(const char *formatString, ...)
	void wxLogVerbose(const char *formatString, ...)
	void wxLogStatus(wxFrame *frame, const char *formatString, ...)
	void wxLogSysError(const char *formatString, ...)
	void wxLogDebug(const char *formatString, ...)
	void wxLogTrace(const char *formatString, ...)
<wx/log.h>
	void wxSafeShowMessage(const wxString& title, const wxString& text)
	unsigned long wxSysErrorCode()
	const wxChar * wxSysErrorMsg(unsigned long errCode = 0)
<wx/memory.h>
	Include files
	WXTRACELEVEL(level, formatString, ...)
	void wxTrace(const wxString& fmt, ...)
	void wxTraceLevel(int level, const wxString& fmt, ...)
<wx/math.h>
	int wxFinite(double x)
	bool wxIsNaN(double x)
	wxCONCAT(x, y)
	wxDYNLIB_FUNCTION(type, name, dynlib)
	wxEXPLICIT
<wx/utils.h>
	bool wxGetKeyState(wxKeyCode key)
<wx/longlong.h>
	wxLongLong_t wxLL(number)
<wx/utils.h>
	long wxNewId()
<wx/scopeguard.h>
	wxON_BLOCK_EXIT0(func)wxON_BLOCK_EXIT1(func, p1)wxON_BLOCK_EXIT2(func, p1, p2)
	wxON_BLOCK_EXIT_OBJ0(obj, method)wxON_BLOCK_EXIT_OBJ1(obj, method, p1)wxON_BLOCK_EXIT_OBJ2(obj, method, p1, p2)
<wx/utils.h>
	void wxRegisterId(long id)
<wx/dde.h>
	void wxDDECleanUp()
	void wxDDEInitialize()
<wx/utils.h>
	void wxEnableTopLevelWindows(bool enable = true)
	int wxFindMenuItemId(wxFrame *frame, const wxString& menuString, const wxString& itemString)
	wxWindow * wxFindWindowByLabel(const wxString& label, wxWindow *parent=NULL)
	wxWindow * wxFindWindowByName(const wxString& name, wxWindow *parent=NULL)
	wxWindow * wxFindWindowAtPoint(const wxPoint& pt)
	wxWindow * wxFindWindowAtPointer(wxPoint& pt)
<wx/window.h>
	wxWindow * wxGetActiveWindow()
<wx/utils.h>
	wxBatteryState wxGetBatteryState()
	wxString wxGetDisplayName()
	wxPowerType wxGetPowerType()
	wxPoint wxGetMousePosition()
	wxMouseState wxGetMouseState()
	bool wxGetResource(const wxString& section, const wxString& entry,const wxString& *value, const wxString& file = NULL)
<wx/stockitem.h>
	wxString wxGetStockLabel(wxWindowID id, bool withCodes = true, const wxString& accelerator = wxEmptyString)
<wx/window.h>
	wxWindow * wxGetTopLevelParent(wxWindow *win)
<wx/utils.h>
	bool wxLaunchDefaultBrowser(const wxString& url, int flags = 0)
	wxString wxLoadUserResource(const wxString& resourceName, const wxString& resourceType="TEXT")
	void wxPostDelete(wxObject *object)
<wx/app.h>
	void wxPostEvent(wxEvtHandler *dest, wxEvent& event)
<wx/utils.h>
	void wxSetDisplayName(const wxString& displayName)
	wxString wxStripMenuCodes(const wxString& str, int flags = wxStrip_All)
	wxSTRINGIZE(x)
	wxSTRINGIZE_T(x)
	wxSUPPRESS_GCC_PRIVATE_DTOR_WARNING(name)
<wx/longlong.h>
	wxLongLong_t wxULL(number)
	void wxVaCopy(va_list argptrDst, va_list argptrSrc)
<wx/utils.h>
	bool wxWriteResource(const wxString& section, const wxString& entry,const wxString& value, const wxString& file = NULL)
	__WXFUNCTION__()
<wx/utils.h>
	wxString wxGetEmailAddress()
	wxMemorySize wxGetFreeMemory()
	wxString wxGetFullHostName()
	wxString wxGetHomeDir()
	wxString wxGetHostName()
	wxString wxGetOsDescription()
	wxOperatingSystemId wxGetOsVersion(int *major = NULL, int *minor = NULL)
	bool wxIsPlatformLittleEndian()
	bool wxIsPlatform64Bit()
	const wxChar * wxGetUserHome(const wxString& user = "")
	wxString wxGetUserId()
	wxString wxGetUserName()
<wx/dcps.h>
	wxString wxGetPrinterCommand()
	wxString wxGetPrinterFile()
	int wxGetPrinterMode()
	wxString wxGetPrinterOptions()
	int wxGetPrinterOrientation()
	wxString wxGetPrinterPreviewCommand()
	void wxGetPrinterScaling(float *x, float *y)
	void wxGetPrinterTranslation(float *x, float *y)
	void wxSetPrinterCommand(const wxString& command)
	void wxSetPrinterFile(const wxString& filename)
	void wxSetPrinterMode(int mode)
	void wxSetPrinterOptions(const wxString& options)
	void wxSetPrinterOrientation(int orientation)
	void wxSetPrinterPreviewCommand(const wxString& command)
	void wxSetPrinterScaling(float x, float y)
	void wxSetPrinterTranslation(float x, float y)
<wx/utils.h>
	long wxExecute(const wxString& command, int sync = wxEXEC_ASYNC, wxProcess *callback = NULL)
<wx/app.h>
	void wxExit()
<wx/utils.h>
	int wxKill(long pid, int sig = wxSIGTERM, wxKillError *rc = NULL, int flags = 0)
	unsigned long wxGetProcessId()
	bool wxShell(const wxString& command = NULL)
	bool wxShutdown(wxShutdownFlagsflags)
<wx/object.h>
	wxClassInfo * CLASSINFO(className)
	DECLARE_ABSTRACT_CLASS(className)
<wx/app.h>
	DECLARE_APP(className)
<wx/object.h>
	DECLARE_CLASS(className)
	DECLARE_DYNAMIC_CLASS(className)
	IMPLEMENT_ABSTRACT_CLASS(className, baseClassName)
	IMPLEMENT_ABSTRACT_CLASS2(className, baseClassName1, baseClassName2)
<wx/app.h>
	IMPLEMENT_APP(className)
<wx/object.h>
	IMPLEMENT_CLASS(className, baseClassName)
	IMPLEMENT_CLASS2(className, baseClassName1, baseClassName2)
	IMPLEMENT_DYNAMIC_CLASS(className, baseClassName)
	IMPLEMENT_DYNAMIC_CLASS2(className, baseClassName1, baseClassName2)
	classname * wxConstCast(ptr, classname)
	wxObject * wxCreateDynamicObject(const wxString& className)
	WXDEBUG_NEW(arg)
	classname * wxDynamicCast(ptr, classname)
	classname * wxDynamicCastThis(classname)
	classname * wxStaticCast(ptr, classname)
	T wx_const_cast(T, x)
	T wx_reinterpret_cast(T, x)
	T wx_static_cast(T, x)
	T wx_truncate_cast(T, x)
	char * copystring(const char *s)
	const wxChar * wxGetTranslation(const wxChar* str,const wxChar* domain = NULL)
	bool wxIsEmpty(const char * p)
	int wxStrcmp(const char *p1, const char *p2)
	int wxStricmp(const char *p1, const char *p2)
	bool wxStringEq(const wxString& s1, const wxString& s2)
	bool wxStringMatch(const wxString& s1, const wxString& s2,bool subString = true, bool exact = false)
	wxArrayString wxStringTokenize(const wxString& str,const wxString& delims = wxDEFAULT_DELIMITERS,wxStringTokenizerMode mode = wxTOKEN_DEFAULT)
	size_t wxStrlen(const char * p)
	int wxSnprintf(wxChar *buf, size_t len, const wxChar *format, ...)
	wxChar wxT(char ch)
	const wxChar * wxTRANSLATE(const char *s)
	int wxVsnprintf(wxChar *buf, size_t len, const wxChar *format, va_list argPtr)
	const wxChar * _(const char *s)
	const wxChar * wxPLURAL(const char *sing, const char *plur, size_tn)
	wxChar _T(char ch)
<wx/thread.h>
	wxCRIT_SECT_DECLARE(cs)
	wxCRIT_SECT_DECLARE(cs)
	wxCRIT_SECT_LOCKER(name, cs)
	wxCRITICAL_SECTION(name)
	wxENTER_CRIT_SECT(wxCriticalSection& cs)
	bool wxIsMainThread()
	wxLEAVE_CRIT_SECT(wxCriticalSection& cs)
	void wxMutexGuiEnter()
	void wxMutexGuiLeave()
<wx/timer.h>
	long wxGetElapsedTime(bool resetTimer = true)
	long wxGetLocalTime()
	wxLongLong wxGetLocalTimeMillis()
	long wxGetUTCTime()
<wx/utils.h>
	void wxMicroSleep(unsigned long microseconds)
	void wxMilliSleep(unsigned long milliseconds)
	wxString wxNow()
	void wxSleep(int secs)
<wx/timer.h>
	void wxStartTimer()
	void wxUsleep(unsigned long milliseconds)
<wx/version.h>
	bool wxCHECK_GCC_VERSION(major, minor)
	bool wxCHECK_VERSION(major, minor, release)
	bool wxCHECK_VERSION_FULL(major, minor, release, subrel)
	bool wxCHECK_W32API_VERSION(major, minor, release)
<wx/stc/stc.h>
	EVT_STC_AUTOCOMP_SELECTION(id, fn)
	EVT_STC_CALLTIP_CLICK(id, fn)
	EVT_STC_HOTSPOT_DCLICK(id, fn)
	EVT_STC_HOTSPOT_CLICK(id, fn)
	EVT_STC_ZOOM(id, fn)
	EVT_STC_DO_DROP(id, fn)
	EVT_STC_DRAG_OVER(id, fn)
	EVT_STC_START_DRAG(id, fn)
	EVT_STC_DWELLEND(id, fn)
	EVT_STC_DWELLSTART(id, fn)
	EVT_STC_URIDROPPED(id, fn)
	EVT_STC_USERLISTSELECTION(id, fn)
	EVT_STC_PAINTED(id, fn)
	EVT_STC_NEEDSHOWN(id, fn)
	EVT_STC_MARGINCLICK(id, fn)
	EVT_STC_MACRORECORD(id, fn)
	EVT_STC_MODIFIED(id, fn)
	EVT_STC_UPDATEUI(id, fn)
	EVT_STC_DOUBLECLICK(id, fn)
	EVT_STC_KEY(id, fn)
	EVT_STC_ROMODIFYATTEMPT(id, fn)
	EVT_STC_SAVEPOINTLEFT(id, fn)
	EVT_STC_SAVEPOINTREACHED(id, fn)
	EVT_STC_CHARADDED(id, fn)
	EVT_STC_STYLENEEDED(id, fn)
	EVT_STC_CHANGE(id, fn)
	wxSTC_CMD_WORDRIGHTENDEXTEND
	wxSTC_CMD_WORDRIGHTEND
	wxSTC_CMD_WORDLEFTENDEXTEND
	wxSTC_CMD_WORDLEFTEND
	wxSTC_CMD_STUTTEREDPAGEDOWNEXTEND
	wxSTC_CMD_STUTTEREDPAGEDOWN
	wxSTC_CMD_STUTTEREDPAGEUPEXTEND
	wxSTC_CMD_STUTTEREDPAGEUP
	wxSTC_CMD_PAGEDOWNRECTEXTEND
	wxSTC_CMD_PAGEUPRECTEXTEND
	wxSTC_CMD_LINEENDRECTEXTEND
	wxSTC_CMD_VCHOMERECTEXTEND
	wxSTC_CMD_HOMERECTEXTEND
	wxSTC_CMD_CHARRIGHTRECTEXTEND
	wxSTC_CMD_CHARLEFTRECTEXTEND
	wxSTC_CMD_LINEUPRECTEXTEND
	wxSTC_CMD_LINEDOWNRECTEXTEND
	wxSTC_CMD_PARAUPEXTEND
	wxSTC_CMD_PARAUP
	wxSTC_CMD_PARADOWNEXTEND
	wxSTC_CMD_PARADOWN
	wxSTC_CMD_DELLINERIGHT
	wxSTC_CMD_DELLINELEFT
	wxSTC_CMD_WORDPARTRIGHTEXTEND
	wxSTC_CMD_WORDPARTRIGHT
	wxSTC_CMD_WORDPARTLEFTEXTEND
	wxSTC_CMD_WORDPARTLEFT
	wxSTC_CMD_LINECOPY
	wxSTC_CMD_VCHOMEWRAPEXTEND
	wxSTC_CMD_VCHOMEWRAP
	wxSTC_CMD_LINEENDWRAPEXTEND
	wxSTC_CMD_LINEENDWRAP
	wxSTC_CMD_HOMEWRAPEXTEND
	wxSTC_CMD_HOMEWRAP
	wxSTC_CMD_LINEENDDISPLAYEXTEND
	wxSTC_CMD_LINEENDDISPLAY
	wxSTC_CMD_HOMEDISPLAYEXTEND
	wxSTC_CMD_HOMEDISPLAY
	wxSTC_CMD_DELETEBACKNOTLINE
	wxSTC_CMD_LINESCROLLUP
	wxSTC_CMD_LINESCROLLDOWN
	wxSTC_CMD_UPPERCASE
	wxSTC_CMD_LOWERCASE
	wxSTC_CMD_LINEDUPLICATE
	wxSTC_CMD_LINETRANSPOSE
	wxSTC_CMD_LINEDELETE
	wxSTC_CMD_LINECUT
	wxSTC_CMD_DELWORDRIGHT
	wxSTC_CMD_DELWORDLEFT
	wxSTC_CMD_ZOOMOUT
	wxSTC_CMD_ZOOMIN
	wxSTC_CMD_VCHOMEEXTEND
	wxSTC_CMD_VCHOME
	wxSTC_CMD_FORMFEED
	wxSTC_CMD_NEWLINE
	wxSTC_CMD_BACKTAB
	wxSTC_CMD_TAB
	wxSTC_CMD_DELETEBACK
	wxSTC_CMD_CANCEL
	wxSTC_CMD_EDITTOGGLEOVERTYPE
	wxSTC_CMD_PAGEDOWNEXTEND
	wxSTC_CMD_PAGEDOWN
	wxSTC_CMD_PAGEUPEXTEND
	wxSTC_CMD_PAGEUP
	wxSTC_CMD_DOCUMENTENDEXTEND
	wxSTC_CMD_DOCUMENTEND
	wxSTC_CMD_DOCUMENTSTARTEXTEND
	wxSTC_CMD_DOCUMENTSTART
	wxSTC_CMD_LINEENDEXTEND
	wxSTC_CMD_LINEEND
	wxSTC_CMD_HOMEEXTEND
	wxSTC_CMD_HOME
	wxSTC_CMD_WORDRIGHTEXTEND
	wxSTC_CMD_WORDRIGHT
	wxSTC_CMD_WORDLEFTEXTEND
	wxSTC_CMD_WORDLEFT
	wxSTC_CMD_CHARRIGHTEXTEND
	wxSTC_CMD_CHARRIGHT
	wxSTC_CMD_CHARLEFTEXTEND
	wxSTC_CMD_CHARLEFT
	wxSTC_CMD_LINEUPEXTEND
	wxSTC_CMD_LINEUP
	wxSTC_CMD_LINEDOWNEXTEND
	wxSTC_CMD_LINEDOWN
	wxSTC_CMD_CLEAR
	wxSTC_CMD_PASTE
	wxSTC_CMD_COPY
	wxSTC_CMD_CUT
	wxSTC_CMD_UNDO
	wxSTC_CMD_SELECTALL
	wxSTC_CMD_REDO
	wxSTC_SPICE_COMMENTLINE
	wxSTC_SPICE_VALUE
	wxSTC_SPICE_DELIMITER
	wxSTC_SPICE_NUMBER
	wxSTC_SPICE_KEYWORD3
	wxSTC_SPICE_KEYWORD2
	wxSTC_SPICE_KEYWORD
	wxSTC_SPICE_IDENTIFIER
	wxSTC_SPICE_DEFAULT
	wxSTC_OPAL_DEFAULT
	wxSTC_OPAL_BOOL_CONST
	wxSTC_OPAL_PAR
	wxSTC_OPAL_STRING
	wxSTC_OPAL_SORT
	wxSTC_OPAL_KEYWORD
	wxSTC_OPAL_INTEGER
	wxSTC_OPAL_COMMENT_LINE
	wxSTC_OPAL_COMMENT_BLOCK
	wxSTC_OPAL_SPACE
	wxSTC_INNO_IDENTIFIER
	wxSTC_INNO_STRING_SINGLE
	wxSTC_INNO_STRING_DOUBLE
	wxSTC_INNO_KEYWORD_USER
	wxSTC_INNO_KEYWORD_PASCAL
	wxSTC_INNO_COMMENT_PASCAL
	wxSTC_INNO_PREPROC_INLINE
	wxSTC_INNO_PREPROC
	wxSTC_INNO_SECTION
	wxSTC_INNO_PARAMETER
	wxSTC_INNO_KEYWORD
	wxSTC_INNO_COMMENT
	wxSTC_INNO_DEFAULT
	wxSTC_CSOUND_STRINGEOL
	wxSTC_CSOUND_GLOBAL_VAR
	wxSTC_CSOUND_IRATE_VAR
	wxSTC_CSOUND_KRATE_VAR
	wxSTC_CSOUND_ARATE_VAR
	wxSTC_CSOUND_PARAM
	wxSTC_CSOUND_COMMENTBLOCK
	wxSTC_CSOUND_USERKEYWORD
	wxSTC_CSOUND_HEADERSTMT
	wxSTC_CSOUND_OPCODE
	wxSTC_CSOUND_IDENTIFIER
	wxSTC_CSOUND_INSTR
	wxSTC_CSOUND_OPERATOR
	wxSTC_CSOUND_NUMBER
	wxSTC_CSOUND_COMMENT
	wxSTC_CSOUND_DEFAULT
	wxSTC_FS_BINNUMBER
	wxSTC_FS_HEXNUMBER
	wxSTC_FS_ERROR
	wxSTC_FS_LABEL
	wxSTC_FS_ASM
	wxSTC_FS_CONSTANT
	wxSTC_FS_STRINGEOL
	wxSTC_FS_DATE
	wxSTC_FS_IDENTIFIER
	wxSTC_FS_OPERATOR
	wxSTC_FS_PREPROCESSOR
	wxSTC_FS_STRING
	wxSTC_FS_NUMBER
	wxSTC_FS_KEYWORD4
	wxSTC_FS_KEYWORD3
	wxSTC_FS_KEYWORD2
	wxSTC_FS_KEYWORD
	wxSTC_FS_COMMENTDOCKEYWORDERROR
	wxSTC_FS_COMMENTDOCKEYWORD
	wxSTC_FS_COMMENTLINEDOC
	wxSTC_FS_COMMENTDOC
	wxSTC_FS_COMMENTLINE
	wxSTC_FS_COMMENT
	wxSTC_FS_DEFAULT
	wxSTC_ST_SPEC_SEL
	wxSTC_ST_CHARACTER
	wxSTC_ST_ASSIGN
	wxSTC_ST_KWSEND
	wxSTC_ST_SPECIAL
	wxSTC_ST_RETURN
	wxSTC_ST_GLOBAL
	wxSTC_ST_NIL
	wxSTC_ST_SUPER
	wxSTC_ST_SELF
	wxSTC_ST_BOOL
	wxSTC_ST_BINARY
	wxSTC_ST_SYMBOL
	wxSTC_ST_COMMENT
	wxSTC_ST_NUMBER
	wxSTC_ST_STRING
	wxSTC_ST_DEFAULT
	wxSTC_SQL_QUOTEDIDENTIFIER
	wxSTC_SQL_USER4
	wxSTC_SQL_USER3
	wxSTC_SQL_USER2
	wxSTC_SQL_USER1
	wxSTC_SQL_COMMENTDOCKEYWORDERROR
	wxSTC_SQL_COMMENTDOCKEYWORD
	wxSTC_SQL_WORD2
	wxSTC_SQL_COMMENTLINEDOC
	wxSTC_SQL_SQLPLUS_COMMENT
	wxSTC_SQL_IDENTIFIER
	wxSTC_SQL_OPERATOR
	wxSTC_SQL_SQLPLUS_PROMPT
	wxSTC_SQL_SQLPLUS
	wxSTC_SQL_CHARACTER
	wxSTC_SQL_STRING
	wxSTC_SQL_WORD
	wxSTC_SQL_NUMBER
	wxSTC_SQL_COMMENTDOC
	wxSTC_SQL_COMMENTLINE
	wxSTC_SQL_COMMENT
	wxSTC_SQL_DEFAULT
	wxSTC_REBOL_WORD8
	wxSTC_REBOL_WORD7
	wxSTC_REBOL_WORD6
	wxSTC_REBOL_WORD5
	wxSTC_REBOL_WORD4
	wxSTC_REBOL_WORD3
	wxSTC_REBOL_WORD2
	wxSTC_REBOL_WORD
	wxSTC_REBOL_IDENTIFIER
	wxSTC_REBOL_TIME
	wxSTC_REBOL_DATE
	wxSTC_REBOL_URL
	wxSTC_REBOL_EMAIL
	wxSTC_REBOL_FILE
	wxSTC_REBOL_TAG
	wxSTC_REBOL_ISSUE
	wxSTC_REBOL_MONEY
	wxSTC_REBOL_BINARY
	wxSTC_REBOL_TUPLE
	wxSTC_REBOL_PAIR
	wxSTC_REBOL_NUMBER
	wxSTC_REBOL_BRACEDSTRING
	wxSTC_REBOL_QUOTEDSTRING
	wxSTC_REBOL_CHARACTER
	wxSTC_REBOL_OPERATOR
	wxSTC_REBOL_PREFACE
	wxSTC_REBOL_COMMENTBLOCK
	wxSTC_REBOL_COMMENTLINE
	wxSTC_REBOL_DEFAULT
	wxSTC_T3_USER3
	wxSTC_T3_USER2
	wxSTC_T3_USER1
	wxSTC_T3_HTML_STRING
	wxSTC_T3_HTML_DEFAULT
	wxSTC_T3_HTML_TAG
	wxSTC_T3_MSG_PARAM
	wxSTC_T3_LIB_DIRECTIVE
	wxSTC_T3_X_STRING
	wxSTC_T3_D_STRING
	wxSTC_T3_S_STRING
	wxSTC_T3_IDENTIFIER
	wxSTC_T3_NUMBER
	wxSTC_T3_KEYWORD
	wxSTC_T3_OPERATOR
	wxSTC_T3_LINE_COMMENT
	wxSTC_T3_BLOCK_COMMENT
	wxSTC_T3_PREPROCESSOR
	wxSTC_T3_X_DEFAULT
	wxSTC_T3_DEFAULT
	wxSTC_HA_COMMENTBLOCK3
	wxSTC_HA_COMMENTBLOCK2
	wxSTC_HA_COMMENTBLOCK
	wxSTC_HA_COMMENTLINE
	wxSTC_HA_INSTANCE
	wxSTC_HA_OPERATOR
	wxSTC_HA_IMPORT
	wxSTC_HA_DATA
	wxSTC_HA_CAPITAL
	wxSTC_HA_MODULE
	wxSTC_HA_CLASS
	wxSTC_HA_CHARACTER
	wxSTC_HA_STRING
	wxSTC_HA_NUMBER
	wxSTC_HA_KEYWORD
	wxSTC_HA_IDENTIFIER
	wxSTC_HA_DEFAULT
	wxSTC_CAML_COMMENT3
	wxSTC_CAML_COMMENT2
	wxSTC_CAML_COMMENT1
	wxSTC_CAML_COMMENT
	wxSTC_CAML_STRING
	wxSTC_CAML_CHAR
	wxSTC_CAML_NUMBER
	wxSTC_CAML_OPERATOR
	wxSTC_CAML_LINENUM
	wxSTC_CAML_KEYWORD3
	wxSTC_CAML_KEYWORD2
	wxSTC_CAML_KEYWORD
	wxSTC_CAML_TAGNAME
	wxSTC_CAML_IDENTIFIER
	wxSTC_CAML_DEFAULT
	wxSTC_VHDL_USERWORD
	wxSTC_VHDL_STDTYPE
	wxSTC_VHDL_STDPACKAGE
	wxSTC_VHDL_STDFUNCTION
	wxSTC_VHDL_ATTRIBUTE
	wxSTC_VHDL_STDOPERATOR
	wxSTC_VHDL_KEYWORD
	wxSTC_VHDL_STRINGEOL
	wxSTC_VHDL_IDENTIFIER
	wxSTC_VHDL_OPERATOR
	wxSTC_VHDL_STRING
	wxSTC_VHDL_NUMBER
	wxSTC_VHDL_COMMENTLINEBANG
	wxSTC_VHDL_COMMENT
	wxSTC_VHDL_DEFAULT
	wxSTC_ASN1_OPERATOR
	wxSTC_ASN1_TYPE
	wxSTC_ASN1_DESCRIPTOR
	wxSTC_ASN1_ATTRIBUTE
	wxSTC_ASN1_KEYWORD
	wxSTC_ASN1_SCALAR
	wxSTC_ASN1_OID
	wxSTC_ASN1_STRING
	wxSTC_ASN1_IDENTIFIER
	wxSTC_ASN1_COMMENT
	wxSTC_ASN1_DEFAULT
	wxSTC_SH_HERE_Q
	wxSTC_SH_HERE_DELIM
	wxSTC_SH_BACKTICKS
	wxSTC_SH_PARAM
	wxSTC_SH_SCALAR
	wxSTC_SH_IDENTIFIER
	wxSTC_SH_OPERATOR
	wxSTC_SH_CHARACTER
	wxSTC_SH_STRING
	wxSTC_SH_WORD
	wxSTC_SH_NUMBER
	wxSTC_SH_COMMENTLINE
	wxSTC_SH_ERROR
	wxSTC_SH_DEFAULT
	wxSTC_APDL_FUNCTION
	wxSTC_APDL_ARGUMENT
	wxSTC_APDL_STARCOMMAND
	wxSTC_APDL_SLASHCOMMAND
	wxSTC_APDL_COMMAND
	wxSTC_APDL_PROCESSOR
	wxSTC_APDL_WORD
	wxSTC_APDL_OPERATOR
	wxSTC_APDL_STRING
	wxSTC_APDL_NUMBER
	wxSTC_APDL_COMMENTBLOCK
	wxSTC_APDL_COMMENT
	wxSTC_APDL_DEFAULT
	wxSTC_AU3_UDF
	wxSTC_AU3_COMOBJ
	wxSTC_AU3_EXPAND
	wxSTC_AU3_SPECIAL
	wxSTC_AU3_PREPROCESSOR
	wxSTC_AU3_SENT
	wxSTC_AU3_VARIABLE
	wxSTC_AU3_OPERATOR
	wxSTC_AU3_STRING
	wxSTC_AU3_MACRO
	wxSTC_AU3_KEYWORD
	wxSTC_AU3_FUNCTION
	wxSTC_AU3_NUMBER
	wxSTC_AU3_COMMENTBLOCK
	wxSTC_AU3_COMMENT
	wxSTC_AU3_DEFAULT
	wxSTC_SN_USER
	wxSTC_SN_SIGNAL
	wxSTC_SN_REGEXTAG
	wxSTC_SN_STRINGEOL
	wxSTC_SN_IDENTIFIER
	wxSTC_SN_OPERATOR
	wxSTC_SN_PREPROCESSOR
	wxSTC_SN_WORD3
	wxSTC_SN_WORD2
	wxSTC_SN_STRING
	wxSTC_SN_WORD
	wxSTC_SN_NUMBER
	wxSTC_SN_COMMENTLINEBANG
	wxSTC_SN_COMMENTLINE
	wxSTC_SN_CODE
	wxSTC_SN_DEFAULT
	wxSTC_GC_OPERATOR
	wxSTC_GC_STRING
	wxSTC_GC_COMMAND
	wxSTC_GC_CONTROL
	wxSTC_GC_ATTRIBUTE
	wxSTC_GC_EVENT
	wxSTC_GC_GLOBAL
	wxSTC_GC_COMMENTBLOCK
	wxSTC_GC_COMMENTLINE
	wxSTC_GC_DEFAULT
	wxSTC_KIX_IDENTIFIER
	wxSTC_KIX_OPERATOR
	wxSTC_KIX_FUNCTIONS
	wxSTC_KIX_KEYWORD
	wxSTC_KIX_MACRO
	wxSTC_KIX_VAR
	wxSTC_KIX_NUMBER
	wxSTC_KIX_STRING2
	wxSTC_KIX_STRING1
	wxSTC_KIX_COMMENT
	wxSTC_KIX_DEFAULT
	wxSTC_V_USER
	wxSTC_V_STRINGEOL
	wxSTC_V_IDENTIFIER
	wxSTC_V_OPERATOR
	wxSTC_V_PREPROCESSOR
	wxSTC_V_WORD3
	wxSTC_V_WORD2
	wxSTC_V_STRING
	wxSTC_V_WORD
	wxSTC_V_NUMBER
	wxSTC_V_COMMENTLINEBANG
	wxSTC_V_COMMENTLINE
	wxSTC_V_COMMENT
	wxSTC_V_DEFAULT
	wxSTC_MSSQL_COLUMN_NAME_2
	wxSTC_MSSQL_DEFAULT_PREF_DATATYPE
	wxSTC_MSSQL_STORED_PROCEDURE
	wxSTC_MSSQL_FUNCTION
	wxSTC_MSSQL_GLOBAL_VARIABLE
	wxSTC_MSSQL_SYSTABLE
	wxSTC_MSSQL_DATATYPE
	wxSTC_MSSQL_STATEMENT
	wxSTC_MSSQL_COLUMN_NAME
	wxSTC_MSSQL_VARIABLE
	wxSTC_MSSQL_IDENTIFIER
	wxSTC_MSSQL_OPERATOR
	wxSTC_MSSQL_STRING
	wxSTC_MSSQL_NUMBER
	wxSTC_MSSQL_LINE_COMMENT
	wxSTC_MSSQL_COMMENT
	wxSTC_MSSQL_DEFAULT
	wxSTC_ERLANG_UNKNOWN
	wxSTC_ERLANG_NODE_NAME
	wxSTC_ERLANG_SEPARATOR
	wxSTC_ERLANG_RECORD
	wxSTC_ERLANG_MACRO
	wxSTC_ERLANG_CHARACTER
	wxSTC_ERLANG_FUNCTION_NAME
	wxSTC_ERLANG_ATOM
	wxSTC_ERLANG_OPERATOR
	wxSTC_ERLANG_STRING
	wxSTC_ERLANG_KEYWORD
	wxSTC_ERLANG_NUMBER
	wxSTC_ERLANG_VARIABLE
	wxSTC_ERLANG_COMMENT
	wxSTC_ERLANG_DEFAULT
	wxSTC_METAPOST_EXTRA
	wxSTC_METAPOST_TEXT
	wxSTC_METAPOST_COMMAND
	wxSTC_METAPOST_SYMBOL
	wxSTC_METAPOST_GROUP
	wxSTC_METAPOST_SPECIAL
	wxSTC_METAPOST_DEFAULT
	wxSTC_TEX_TEXT
	wxSTC_TEX_COMMAND
	wxSTC_TEX_SYMBOL
	wxSTC_TEX_GROUP
	wxSTC_TEX_SPECIAL
	wxSTC_TEX_DEFAULT
	wxSTC_YAML_ERROR
	wxSTC_YAML_TEXT
	wxSTC_YAML_DOCUMENT
	wxSTC_YAML_REFERENCE
	wxSTC_YAML_NUMBER
	wxSTC_YAML_KEYWORD
	wxSTC_YAML_IDENTIFIER
	wxSTC_YAML_COMMENT
	wxSTC_YAML_DEFAULT
	wxSTC_LOT_ABORT
	wxSTC_LOT_FAIL
	wxSTC_LOT_PASS
	wxSTC_LOT_SET
	wxSTC_LOT_BREAK
	wxSTC_LOT_HEADER
	wxSTC_LOT_DEFAULT
	wxSTC_CLW_DEPRECATED
	wxSTC_CLW_ERROR
	wxSTC_CLW_STANDARD_EQUATE
	wxSTC_CLW_ATTRIBUTE
	wxSTC_CLW_STRUCTURE_DATA_TYPE
	wxSTC_CLW_BUILTIN_PROCEDURES_FUNCTION
	wxSTC_CLW_RUNTIME_EXPRESSIONS
	wxSTC_CLW_COMPILER_DIRECTIVE
	wxSTC_CLW_KEYWORD
	wxSTC_CLW_PICTURE_STRING
	wxSTC_CLW_REAL_CONSTANT
	wxSTC_CLW_INTEGER_CONSTANT
	wxSTC_CLW_USER_IDENTIFIER
	wxSTC_CLW_STRING
	wxSTC_CLW_COMMENT
	wxSTC_CLW_LABEL
	wxSTC_CLW_DEFAULT
	wxSTC_MMIXAL_INCLUDE
	wxSTC_MMIXAL_SYMBOL
	wxSTC_MMIXAL_OPERATOR
	wxSTC_MMIXAL_HEX
	wxSTC_MMIXAL_REGISTER
	wxSTC_MMIXAL_STRING
	wxSTC_MMIXAL_CHAR
	wxSTC_MMIXAL_REF
	wxSTC_MMIXAL_NUMBER
	wxSTC_MMIXAL_OPERANDS
	wxSTC_MMIXAL_OPCODE_POST
	wxSTC_MMIXAL_OPCODE_UNKNOWN
	wxSTC_MMIXAL_OPCODE_VALID
	wxSTC_MMIXAL_OPCODE_PRE
	wxSTC_MMIXAL_OPCODE
	wxSTC_MMIXAL_LABEL
	wxSTC_MMIXAL_COMMENT
	wxSTC_MMIXAL_LEADWS
	wxSTC_NSIS_COMMENTBOX
	wxSTC_NSIS_FUNCTIONDEF
	wxSTC_NSIS_PAGEEX
	wxSTC_NSIS_SECTIONGROUP
	wxSTC_NSIS_NUMBER
	wxSTC_NSIS_STRINGVAR
	wxSTC_NSIS_MACRODEF
	wxSTC_NSIS_IFDEFINEDEF
	wxSTC_NSIS_SUBSECTIONDEF
	wxSTC_NSIS_SECTIONDEF
	wxSTC_NSIS_USERDEFINED
	wxSTC_NSIS_LABEL
	wxSTC_NSIS_VARIABLE
	wxSTC_NSIS_FUNCTION
	wxSTC_NSIS_STRINGRQ
	wxSTC_NSIS_STRINGLQ
	wxSTC_NSIS_STRINGDQ
	wxSTC_NSIS_COMMENT
	wxSTC_NSIS_DEFAULT
	wxSTC_PS_BADSTRINGCHAR
	wxSTC_PS_BASE85STRING
	wxSTC_PS_HEXSTRING
	wxSTC_PS_TEXT
	wxSTC_PS_PAREN_PROC
	wxSTC_PS_PAREN_DICT
	wxSTC_PS_PAREN_ARRAY
	wxSTC_PS_IMMEVAL
	wxSTC_PS_LITERAL
	wxSTC_PS_KEYWORD
	wxSTC_PS_NAME
	wxSTC_PS_NUMBER
	wxSTC_PS_DSC_VALUE
	wxSTC_PS_DSC_COMMENT
	wxSTC_PS_COMMENT
	wxSTC_PS_DEFAULT
	wxSTC_ESCRIPT_WORD3
	wxSTC_ESCRIPT_WORD2
	wxSTC_ESCRIPT_BRACE
	wxSTC_ESCRIPT_IDENTIFIER
	wxSTC_ESCRIPT_OPERATOR
	wxSTC_ESCRIPT_STRING
	wxSTC_ESCRIPT_WORD
	wxSTC_ESCRIPT_NUMBER
	wxSTC_ESCRIPT_COMMENTDOC
	wxSTC_ESCRIPT_COMMENTLINE
	wxSTC_ESCRIPT_COMMENT
	wxSTC_ESCRIPT_DEFAULT
	wxSTC_LOUT_STRINGEOL
	wxSTC_LOUT_IDENTIFIER
	wxSTC_LOUT_OPERATOR
	wxSTC_LOUT_STRING
	wxSTC_LOUT_WORD4
	wxSTC_LOUT_WORD3
	wxSTC_LOUT_WORD2
	wxSTC_LOUT_WORD
	wxSTC_LOUT_NUMBER
	wxSTC_LOUT_COMMENT
	wxSTC_LOUT_DEFAULT
	wxSTC_POV_WORD8
	wxSTC_POV_WORD7
	wxSTC_POV_WORD6
	wxSTC_POV_WORD5
	wxSTC_POV_WORD4
	wxSTC_POV_WORD3
	wxSTC_POV_WORD2
	wxSTC_POV_BADDIRECTIVE
	wxSTC_POV_DIRECTIVE
	wxSTC_POV_STRINGEOL
	wxSTC_POV_STRING
	wxSTC_POV_IDENTIFIER
	wxSTC_POV_OPERATOR
	wxSTC_POV_NUMBER
	wxSTC_POV_COMMENTLINE
	wxSTC_POV_COMMENT
	wxSTC_POV_DEFAULT
	wxSTC_CSS_ATTRIBUTE
	wxSTC_CSS_IDENTIFIER2
	wxSTC_CSS_SINGLESTRING
	wxSTC_CSS_DOUBLESTRING
	wxSTC_CSS_DIRECTIVE
	wxSTC_CSS_IMPORTANT
	wxSTC_CSS_ID
	wxSTC_CSS_COMMENT
	wxSTC_CSS_VALUE
	wxSTC_CSS_UNKNOWN_IDENTIFIER
	wxSTC_CSS_IDENTIFIER
	wxSTC_CSS_OPERATOR
	wxSTC_CSS_UNKNOWN_PSEUDOCLASS
	wxSTC_CSS_PSEUDOCLASS
	wxSTC_CSS_CLASS
	wxSTC_CSS_TAG
	wxSTC_CSS_DEFAULT
	wxSTC_F_CONTINUATION
	wxSTC_F_LABEL
	wxSTC_F_OPERATOR2
	wxSTC_F_PREPROCESSOR
	wxSTC_F_WORD3
	wxSTC_F_WORD2
	wxSTC_F_WORD
	wxSTC_F_IDENTIFIER
	wxSTC_F_OPERATOR
	wxSTC_F_STRINGEOL
	wxSTC_F_STRING2
	wxSTC_F_STRING1
	wxSTC_F_NUMBER
	wxSTC_F_COMMENT
	wxSTC_F_DEFAULT
	wxSTC_ASM_EXTINSTRUCTION
	wxSTC_ASM_STRINGEOL
	wxSTC_ASM_CHARACTER
	wxSTC_ASM_COMMENTBLOCK
	wxSTC_ASM_DIRECTIVEOPERAND
	wxSTC_ASM_DIRECTIVE
	wxSTC_ASM_REGISTER
	wxSTC_ASM_MATHINSTRUCTION
	wxSTC_ASM_CPUINSTRUCTION
	wxSTC_ASM_IDENTIFIER
	wxSTC_ASM_OPERATOR
	wxSTC_ASM_STRING
	wxSTC_ASM_NUMBER
	wxSTC_ASM_COMMENT
	wxSTC_ASM_DEFAULT
	wxSTC_SCRIPTOL_PREPROCESSOR
	wxSTC_SCRIPTOL_CLASSNAME
	wxSTC_SCRIPTOL_TRIPLE
	wxSTC_SCRIPTOL_IDENTIFIER
	wxSTC_SCRIPTOL_OPERATOR
	wxSTC_SCRIPTOL_KEYWORD
	wxSTC_SCRIPTOL_STRINGEOL
	wxSTC_SCRIPTOL_CHARACTER
	wxSTC_SCRIPTOL_STRING
	wxSTC_SCRIPTOL_NUMBER
	wxSTC_SCRIPTOL_COMMENTBLOCK
	wxSTC_SCRIPTOL_CSTYLE
	wxSTC_SCRIPTOL_PERSISTENT
	wxSTC_SCRIPTOL_COMMENTLINE
	wxSTC_SCRIPTOL_WHITE
	wxSTC_SCRIPTOL_DEFAULT
	wxSTC_MATLAB_DOUBLEQUOTESTRING
	wxSTC_MATLAB_IDENTIFIER
	wxSTC_MATLAB_OPERATOR
	wxSTC_MATLAB_STRING
	wxSTC_MATLAB_KEYWORD
	wxSTC_MATLAB_NUMBER
	wxSTC_MATLAB_COMMAND
	wxSTC_MATLAB_COMMENT
	wxSTC_MATLAB_DEFAULT
	wxSTC_FORTH_LOCALE
	wxSTC_FORTH_STRING
	wxSTC_FORTH_NUMBER
	wxSTC_FORTH_PREWORD2
	wxSTC_FORTH_PREWORD1
	wxSTC_FORTH_DEFWORD
	wxSTC_FORTH_KEYWORD
	wxSTC_FORTH_CONTROL
	wxSTC_FORTH_IDENTIFIER
	wxSTC_FORTH_COMMENT_ML
	wxSTC_FORTH_COMMENT
	wxSTC_FORTH_DEFAULT
	wxSTC_NNCRONTAB_IDENTIFIER
	wxSTC_NNCRONTAB_ENVIRONMENT
	wxSTC_NNCRONTAB_STRING
	wxSTC_NNCRONTAB_NUMBER
	wxSTC_NNCRONTAB_ASTERISK
	wxSTC_NNCRONTAB_MODIFIER
	wxSTC_NNCRONTAB_KEYWORD
	wxSTC_NNCRONTAB_SECTION
	wxSTC_NNCRONTAB_TASK
	wxSTC_NNCRONTAB_COMMENT
	wxSTC_NNCRONTAB_DEFAULT
	wxSTC_EIFFEL_STRINGEOL
	wxSTC_EIFFEL_IDENTIFIER
	wxSTC_EIFFEL_OPERATOR
	wxSTC_EIFFEL_CHARACTER
	wxSTC_EIFFEL_STRING
	wxSTC_EIFFEL_WORD
	wxSTC_EIFFEL_NUMBER
	wxSTC_EIFFEL_COMMENTLINE
	wxSTC_EIFFEL_DEFAULT
	wxSTC_LISP_MULTI_COMMENT
	wxSTC_LISP_SPECIAL
	wxSTC_LISP_OPERATOR
	wxSTC_LISP_IDENTIFIER
	wxSTC_LISP_STRINGEOL
	wxSTC_LISP_STRING
	wxSTC_LISP_SYMBOL
	wxSTC_LISP_KEYWORD_KW
	wxSTC_LISP_KEYWORD
	wxSTC_LISP_NUMBER
	wxSTC_LISP_COMMENT
	wxSTC_LISP_DEFAULT
	wxSTC_BAAN_WORD2
	wxSTC_BAAN_STRINGEOL
	wxSTC_BAAN_IDENTIFIER
	wxSTC_BAAN_OPERATOR
	wxSTC_BAAN_PREPROCESSOR
	wxSTC_BAAN_STRING
	wxSTC_BAAN_WORD
	wxSTC_BAAN_NUMBER
	wxSTC_BAAN_COMMENTDOC
	wxSTC_BAAN_COMMENT
	wxSTC_BAAN_DEFAULT
	wxSTC_ADA_ILLEGAL
	wxSTC_ADA_COMMENTLINE
	wxSTC_ADA_LABEL
	wxSTC_ADA_STRINGEOL
	wxSTC_ADA_STRING
	wxSTC_ADA_CHARACTEREOL
	wxSTC_ADA_CHARACTER
	wxSTC_ADA_DELIMITER
	wxSTC_ADA_NUMBER
	wxSTC_ADA_IDENTIFIER
	wxSTC_ADA_WORD
	wxSTC_ADA_DEFAULT
	wxSTC_AVE_WORD6
	wxSTC_AVE_WORD5
	wxSTC_AVE_WORD4
	wxSTC_AVE_WORD3
	wxSTC_AVE_WORD2
	wxSTC_AVE_WORD1
	wxSTC_AVE_OPERATOR
	wxSTC_AVE_IDENTIFIER
	wxSTC_AVE_STRINGEOL
	wxSTC_AVE_ENUM
	wxSTC_AVE_STRING
	wxSTC_AVE_WORD
	wxSTC_AVE_NUMBER
	wxSTC_AVE_COMMENT
	wxSTC_AVE_DEFAULT
	wxSTC_CONF_DIRECTIVE
	wxSTC_CONF_IP
	wxSTC_CONF_OPERATOR
	wxSTC_CONF_STRING
	wxSTC_CONF_PARAMETER
	wxSTC_CONF_EXTENSION
	wxSTC_CONF_IDENTIFIER
	wxSTC_CONF_NUMBER
	wxSTC_CONF_COMMENT
	wxSTC_CONF_DEFAULT
	wxSTC_DIFF_ADDED
	wxSTC_DIFF_DELETED
	wxSTC_DIFF_POSITION
	wxSTC_DIFF_HEADER
	wxSTC_DIFF_COMMAND
	wxSTC_DIFF_COMMENT
	wxSTC_DIFF_DEFAULT
	wxSTC_MAKE_IDEOL
	wxSTC_MAKE_TARGET
	wxSTC_MAKE_OPERATOR
	wxSTC_MAKE_IDENTIFIER
	wxSTC_MAKE_PREPROCESSOR
	wxSTC_MAKE_COMMENT
	wxSTC_MAKE_DEFAULT
	wxSTC_BAT_OPERATOR
	wxSTC_BAT_IDENTIFIER
	wxSTC_BAT_COMMAND
	wxSTC_BAT_HIDE
	wxSTC_BAT_LABEL
	wxSTC_BAT_WORD
	wxSTC_BAT_COMMENT
	wxSTC_BAT_DEFAULT
	wxSTC_ERR_JAVA_STACK
	wxSTC_ERR_TIDY
	wxSTC_ERR_ABSF
	wxSTC_ERR_IFORT
	wxSTC_ERR_IFC
	wxSTC_ERR_ELF
	wxSTC_ERR_PHP
	wxSTC_ERR_DIFF_MESSAGE
	wxSTC_ERR_DIFF_DELETION
	wxSTC_ERR_DIFF_ADDITION
	wxSTC_ERR_DIFF_CHANGED
	wxSTC_ERR_CTAG
	wxSTC_ERR_LUA
	wxSTC_ERR_NET
	wxSTC_ERR_PERL
	wxSTC_ERR_BORLAND
	wxSTC_ERR_CMD
	wxSTC_ERR_MS
	wxSTC_ERR_GCC
	wxSTC_ERR_PYTHON
	wxSTC_ERR_DEFAULT
	wxSTC_LUA_WORD8
	wxSTC_LUA_WORD7
	wxSTC_LUA_WORD6
	wxSTC_LUA_WORD5
	wxSTC_LUA_WORD4
	wxSTC_LUA_WORD3
	wxSTC_LUA_WORD2
	wxSTC_LUA_STRINGEOL
	wxSTC_LUA_IDENTIFIER
	wxSTC_LUA_OPERATOR
	wxSTC_LUA_PREPROCESSOR
	wxSTC_LUA_LITERALSTRING
	wxSTC_LUA_CHARACTER
	wxSTC_LUA_STRING
	wxSTC_LUA_WORD
	wxSTC_LUA_NUMBER
	wxSTC_LUA_COMMENTDOC
	wxSTC_LUA_COMMENTLINE
	wxSTC_LUA_COMMENT
	wxSTC_LUA_DEFAULT
	wxSTC_L_COMMENT
	wxSTC_L_MATH
	wxSTC_L_TAG
	wxSTC_L_COMMAND
	wxSTC_L_DEFAULT
	wxSTC_PROPS_KEY
	wxSTC_PROPS_DEFVAL
	wxSTC_PROPS_ASSIGNMENT
	wxSTC_PROPS_SECTION
	wxSTC_PROPS_COMMENT
	wxSTC_PROPS_DEFAULT
	wxSTC_B_BINNUMBER
	wxSTC_B_HEXNUMBER
	wxSTC_B_ERROR
	wxSTC_B_LABEL
	wxSTC_B_ASM
	wxSTC_B_CONSTANT
	wxSTC_B_KEYWORD4
	wxSTC_B_KEYWORD3
	wxSTC_B_KEYWORD2
	wxSTC_B_STRINGEOL
	wxSTC_B_DATE
	wxSTC_B_IDENTIFIER
	wxSTC_B_OPERATOR
	wxSTC_B_PREPROCESSOR
	wxSTC_B_STRING
	wxSTC_B_KEYWORD
	wxSTC_B_NUMBER
	wxSTC_B_COMMENT
	wxSTC_B_DEFAULT
	wxSTC_RB_UPPER_BOUND
	wxSTC_RB_STDERR
	wxSTC_RB_STDOUT
	wxSTC_RB_STDIN
	wxSTC_RB_WORD_DEMOTED
	wxSTC_RB_STRING_QW
	wxSTC_RB_STRING_QR
	wxSTC_RB_STRING_QX
	wxSTC_RB_STRING_QQ
	wxSTC_RB_STRING_Q
	wxSTC_RB_HERE_QX
	wxSTC_RB_HERE_QQ
	wxSTC_RB_HERE_Q
	wxSTC_RB_HERE_DELIM
	wxSTC_RB_DATASECTION
	wxSTC_RB_BACKTICKS
	wxSTC_RB_CLASS_VAR
	wxSTC_RB_INSTANCE_VAR
	wxSTC_RB_MODULE_NAME
	wxSTC_RB_SYMBOL
	wxSTC_RB_GLOBAL
	wxSTC_RB_REGEX
	wxSTC_RB_IDENTIFIER
	wxSTC_RB_OPERATOR
	wxSTC_RB_DEFNAME
	wxSTC_RB_CLASSNAME
	wxSTC_RB_CHARACTER
	wxSTC_RB_STRING
	wxSTC_RB_WORD
	wxSTC_RB_NUMBER
	wxSTC_RB_POD
	wxSTC_RB_COMMENTLINE
	wxSTC_RB_ERROR
	wxSTC_RB_DEFAULT
	wxSTC_PL_POD_VERB
	wxSTC_PL_STRING_QW
	wxSTC_PL_STRING_QR
	wxSTC_PL_STRING_QX
	wxSTC_PL_STRING_QQ
	wxSTC_PL_STRING_Q
	wxSTC_PL_HERE_QX
	wxSTC_PL_HERE_QQ
	wxSTC_PL_HERE_Q
	wxSTC_PL_HERE_DELIM
	wxSTC_PL_DATASECTION
	wxSTC_PL_BACKTICKS
	wxSTC_PL_LONGQUOTE
	wxSTC_PL_REGSUBST
	wxSTC_PL_REGEX
	wxSTC_PL_VARIABLE_INDEXER
	wxSTC_PL_SYMBOLTABLE
	wxSTC_PL_HASH
	wxSTC_PL_ARRAY
	wxSTC_PL_SCALAR
	wxSTC_PL_IDENTIFIER
	wxSTC_PL_OPERATOR
	wxSTC_PL_PREPROCESSOR
	wxSTC_PL_PUNCTUATION
	wxSTC_PL_CHARACTER
	wxSTC_PL_STRING
	wxSTC_PL_WORD
	wxSTC_PL_NUMBER
	wxSTC_PL_POD
	wxSTC_PL_COMMENTLINE
	wxSTC_PL_ERROR
	wxSTC_PL_DEFAULT
	wxSTC_HPHP_OPERATOR
	wxSTC_HPHP_HSTRING_VARIABLE
	wxSTC_HPHP_COMMENTLINE
	wxSTC_HPHP_COMMENT
	wxSTC_HPHP_VARIABLE
	wxSTC_HPHP_NUMBER
	wxSTC_HPHP_WORD
	wxSTC_HPHP_SIMPLESTRING
	wxSTC_HPHP_HSTRING
	wxSTC_HPHP_DEFAULT
	wxSTC_HPA_IDENTIFIER
	wxSTC_HPA_OPERATOR
	wxSTC_HPA_DEFNAME
	wxSTC_HPA_CLASSNAME
	wxSTC_HPA_TRIPLEDOUBLE
	wxSTC_HPA_TRIPLE
	wxSTC_HPA_WORD
	wxSTC_HPA_CHARACTER
	wxSTC_HPA_STRING
	wxSTC_HPA_NUMBER
	wxSTC_HPA_COMMENTLINE
	wxSTC_HPA_DEFAULT
	wxSTC_HPA_START
	wxSTC_HPHP_COMPLEX_VARIABLE
	wxSTC_HP_IDENTIFIER
	wxSTC_HP_OPERATOR
	wxSTC_HP_DEFNAME
	wxSTC_HP_CLASSNAME
	wxSTC_HP_TRIPLEDOUBLE
	wxSTC_HP_TRIPLE
	wxSTC_HP_WORD
	wxSTC_HP_CHARACTER
	wxSTC_HP_STRING
	wxSTC_HP_NUMBER
	wxSTC_HP_COMMENTLINE
	wxSTC_HP_DEFAULT
	wxSTC_HP_START
	wxSTC_HBA_STRINGEOL
	wxSTC_HBA_IDENTIFIER
	wxSTC_HBA_STRING
	wxSTC_HBA_WORD
	wxSTC_HBA_NUMBER
	wxSTC_HBA_COMMENTLINE
	wxSTC_HBA_DEFAULT
	wxSTC_HBA_START
	wxSTC_HB_STRINGEOL
	wxSTC_HB_IDENTIFIER
	wxSTC_HB_STRING
	wxSTC_HB_WORD
	wxSTC_HB_NUMBER
	wxSTC_HB_COMMENTLINE
	wxSTC_HB_DEFAULT
	wxSTC_HB_START
	wxSTC_HJA_REGEX
	wxSTC_HJA_STRINGEOL
	wxSTC_HJA_SYMBOLS
	wxSTC_HJA_SINGLESTRING
	wxSTC_HJA_DOUBLESTRING
	wxSTC_HJA_KEYWORD
	wxSTC_HJA_WORD
	wxSTC_HJA_NUMBER
	wxSTC_HJA_COMMENTDOC
	wxSTC_HJA_COMMENTLINE
	wxSTC_HJA_COMMENT
	wxSTC_HJA_DEFAULT
	wxSTC_HJA_START
	wxSTC_HJ_REGEX
	wxSTC_HJ_STRINGEOL
	wxSTC_HJ_SYMBOLS
	wxSTC_HJ_SINGLESTRING
	wxSTC_HJ_DOUBLESTRING
	wxSTC_HJ_KEYWORD
	wxSTC_HJ_WORD
	wxSTC_HJ_NUMBER
	wxSTC_HJ_COMMENTDOC
	wxSTC_HJ_COMMENTLINE
	wxSTC_HJ_COMMENT
	wxSTC_HJ_DEFAULT
	wxSTC_HJ_START
	wxSTC_H_SGML_BLOCK_DEFAULT
	wxSTC_H_SGML_1ST_PARAM_COMMENT
	wxSTC_H_SGML_COMMENT
	wxSTC_H_SGML_ENTITY
	wxSTC_H_SGML_SPECIAL
	wxSTC_H_SGML_ERROR
	wxSTC_H_SGML_SIMPLESTRING
	wxSTC_H_SGML_DOUBLESTRING
	wxSTC_H_SGML_1ST_PARAM
	wxSTC_H_SGML_COMMAND
	wxSTC_H_SGML_DEFAULT
	wxSTC_H_XCCOMMENT
	wxSTC_H_VALUE
	wxSTC_H_QUESTION
	wxSTC_H_CDATA
	wxSTC_H_ASPAT
	wxSTC_H_ASP
	wxSTC_H_SCRIPT
	wxSTC_H_XMLEND
	wxSTC_H_XMLSTART
	wxSTC_H_TAGEND
	wxSTC_H_ENTITY
	wxSTC_H_COMMENT
	wxSTC_H_OTHER
	wxSTC_H_SINGLESTRING
	wxSTC_H_DOUBLESTRING
	wxSTC_H_NUMBER
	wxSTC_H_ATTRIBUTEUNKNOWN
	wxSTC_H_ATTRIBUTE
	wxSTC_H_TAGUNKNOWN
	wxSTC_H_TAG
	wxSTC_H_DEFAULT
	wxSTC_TCL_BLOCK_COMMENT
	wxSTC_TCL_COMMENT_BOX
	wxSTC_TCL_WORD8
	wxSTC_TCL_WORD7
	wxSTC_TCL_WORD6
	wxSTC_TCL_WORD5
	wxSTC_TCL_WORD4
	wxSTC_TCL_WORD3
	wxSTC_TCL_WORD2
	wxSTC_TCL_WORD
	wxSTC_TCL_EXPAND
	wxSTC_TCL_MODIFIER
	wxSTC_TCL_SUB_BRACE
	wxSTC_TCL_SUBSTITUTION
	wxSTC_TCL_IDENTIFIER
	wxSTC_TCL_OPERATOR
	wxSTC_TCL_IN_QUOTE
	wxSTC_TCL_WORD_IN_QUOTE
	wxSTC_TCL_NUMBER
	wxSTC_TCL_COMMENTLINE
	wxSTC_TCL_COMMENT
	wxSTC_TCL_DEFAULT
	wxSTC_C_GLOBALCLASS
	wxSTC_C_COMMENTDOCKEYWORDERROR
	wxSTC_C_COMMENTDOCKEYWORD
	wxSTC_C_WORD2
	wxSTC_C_COMMENTLINEDOC
	wxSTC_C_REGEX
	wxSTC_C_VERBATIM
	wxSTC_C_STRINGEOL
	wxSTC_C_IDENTIFIER
	wxSTC_C_OPERATOR
	wxSTC_C_PREPROCESSOR
	wxSTC_C_UUID
	wxSTC_C_CHARACTER
	wxSTC_C_STRING
	wxSTC_C_WORD
	wxSTC_C_NUMBER
	wxSTC_C_COMMENTDOC
	wxSTC_C_COMMENTLINE
	wxSTC_C_COMMENT
	wxSTC_C_DEFAULT
	wxSTC_P_DECORATOR
	wxSTC_P_WORD2
	wxSTC_P_STRINGEOL
	wxSTC_P_COMMENTBLOCK
	wxSTC_P_IDENTIFIER
	wxSTC_P_OPERATOR
	wxSTC_P_DEFNAME
	wxSTC_P_CLASSNAME
	wxSTC_P_TRIPLEDOUBLE
	wxSTC_P_TRIPLE
	wxSTC_P_WORD
	wxSTC_P_CHARACTER
	wxSTC_P_STRING
	wxSTC_P_NUMBER
	wxSTC_P_COMMENTLINE
	wxSTC_P_DEFAULT
	wxSTC_LEX_AUTOMATIC
	wxSTC_LEX_SPICE
	wxSTC_LEX_OPAL
	wxSTC_LEX_INNOSETUP
	wxSTC_LEX_FREEBASIC
	wxSTC_LEX_CSOUND
	wxSTC_LEX_FLAGSHIP
	wxSTC_LEX_SMALLTALK
	wxSTC_LEX_REBOL
	wxSTC_LEX_TADS3
	wxSTC_LEX_PHPSCRIPT
	wxSTC_LEX_HASKELL
	wxSTC_LEX_PUREBASIC
	wxSTC_LEX_BLITZBASIC
	wxSTC_LEX_CAML
	wxSTC_LEX_VHDL
	wxSTC_LEX_ASN1
	wxSTC_LEX_BASH
	wxSTC_LEX_APDL
	wxSTC_LEX_AU3
	wxSTC_LEX_SPECMAN
	wxSTC_LEX_GUI4CLI
	wxSTC_LEX_KIX
	wxSTC_LEX_VERILOG
	wxSTC_LEX_MSSQL
	wxSTC_LEX_OCTAVE
	wxSTC_LEX_ERLANG
	wxSTC_LEX_FORTH
	wxSTC_LEX_POWERBASIC
	wxSTC_LEX_METAPOST
	wxSTC_LEX_TEX
	wxSTC_LEX_YAML
	wxSTC_LEX_LOT
	wxSTC_LEX_CLWNOCASE
	wxSTC_LEX_CLW
	wxSTC_LEX_MMIXAL
	wxSTC_LEX_NSIS
	wxSTC_LEX_PS
	wxSTC_LEX_ESCRIPT
	wxSTC_LEX_LOUT
	wxSTC_LEX_POV
	wxSTC_LEX_CSS
	wxSTC_LEX_F77
	wxSTC_LEX_FORTRAN
	wxSTC_LEX_CPPNOCASE
	wxSTC_LEX_ASM
	wxSTC_LEX_SCRIPTOL
	wxSTC_LEX_MATLAB
	wxSTC_LEX_BAAN
	wxSTC_LEX_VBSCRIPT
	wxSTC_LEX_BULLANT
	wxSTC_LEX_NNCRONTAB
	wxSTC_LEX_TCL
	wxSTC_LEX_EIFFELKW
	wxSTC_LEX_EIFFEL
	wxSTC_LEX_RUBY
	wxSTC_LEX_LISP
	wxSTC_LEX_ADA
	wxSTC_LEX_AVE
	wxSTC_LEX_PASCAL
	wxSTC_LEX_CONF
	wxSTC_LEX_DIFF
	wxSTC_LEX_LUA
	wxSTC_LEX_LATEX
	wxSTC_LEX_XCODE
	wxSTC_LEX_BATCH
	wxSTC_LEX_MAKEFILE
	wxSTC_LEX_ERRORLIST
	wxSTC_LEX_PROPERTIES
	wxSTC_LEX_VB
	wxSTC_LEX_SQL
	wxSTC_LEX_PERL
	wxSTC_LEX_XML
	wxSTC_LEX_HTML
	wxSTC_LEX_CPP
	wxSTC_LEX_PYTHON
	wxSTC_LEX_NULL
	wxSTC_LEX_CONTAINER
	wxSTC_SCMOD_ALT
	wxSTC_SCMOD_CTRL
	wxSTC_SCMOD_SHIFT
	wxSTC_SCMOD_NORM
	wxSTC_KEY_DIVIDE
	wxSTC_KEY_SUBTRACT
	wxSTC_KEY_ADD
	wxSTC_KEY_RETURN
	wxSTC_KEY_TAB
	wxSTC_KEY_BACK
	wxSTC_KEY_ESCAPE
	wxSTC_KEY_INSERT
	wxSTC_KEY_DELETE
	wxSTC_KEY_NEXT
	wxSTC_KEY_PRIOR
	wxSTC_KEY_END
	wxSTC_KEY_HOME
	wxSTC_KEY_RIGHT
	wxSTC_KEY_LEFT
	wxSTC_KEY_UP
	wxSTC_KEY_DOWN
	wxSTC_MODEVENTMASKALL
	wxSTC_MULTILINEUNDOREDO
	wxSTC_MOD_BEFOREDELETE
	wxSTC_MOD_BEFOREINSERT
	wxSTC_MOD_CHANGEMARKER
	wxSTC_LASTSTEPINUNDOREDO
	wxSTC_MULTISTEPUNDOREDO
	wxSTC_PERFORMED_REDO
	wxSTC_PERFORMED_UNDO
	wxSTC_PERFORMED_USER
	wxSTC_MOD_CHANGEFOLD
	wxSTC_MOD_CHANGESTYLE
	wxSTC_MOD_DELETETEXT
	wxSTC_MOD_INSERTTEXT
	wxSTC_KEYWORDSET_MAX
	wxSTC_ALPHA_NOALPHA
	wxSTC_ALPHA_OPAQUE
	wxSTC_ALPHA_TRANSPARENT
	wxSTC_SEL_LINES
	wxSTC_SEL_RECTANGLE
	wxSTC_SEL_STREAM
	wxSTC_CARET_EVEN
	wxSTC_CARET_JUMPS
	wxSTC_CARET_STRICT
	wxSTC_CARET_SLOP
	wxSTC_VISIBLE_STRICT
	wxSTC_VISIBLE_SLOP
	wxSTC_CURSORWAIT
	wxSTC_CURSORNORMAL
	wxSTC_EDGE_BACKGROUND
	wxSTC_EDGE_LINE
	wxSTC_EDGE_NONE
	wxSTC_CACHE_DOCUMENT
	wxSTC_CACHE_PAGE
	wxSTC_CACHE_CARET
	wxSTC_CACHE_NONE
	wxSTC_WRAPVISUALFLAGLOC_START_BY_TEXT
	wxSTC_WRAPVISUALFLAGLOC_END_BY_TEXT
	wxSTC_WRAPVISUALFLAGLOC_DEFAULT
	wxSTC_WRAPVISUALFLAG_START
	wxSTC_WRAPVISUALFLAG_END
	wxSTC_WRAPVISUALFLAG_NONE
	wxSTC_WRAP_CHAR
	wxSTC_WRAP_WORD
	wxSTC_WRAP_NONE
	wxSTC_TIME_FOREVER
	wxSTC_FOLDFLAG_BOX
	wxSTC_FOLDFLAG_LEVELNUMBERS
	wxSTC_FOLDFLAG_LINEAFTER_CONTRACTED
	wxSTC_FOLDFLAG_LINEAFTER_EXPANDED
	wxSTC_FOLDFLAG_LINEBEFORE_CONTRACTED
	wxSTC_FOLDFLAG_LINEBEFORE_EXPANDED
	wxSTC_FOLDLEVELNUMBERMASK
	wxSTC_FOLDLEVELUNINDENT
	wxSTC_FOLDLEVELCONTRACTED
	wxSTC_FOLDLEVELBOXFOOTERFLAG
	wxSTC_FOLDLEVELBOXHEADERFLAG
	wxSTC_FOLDLEVELHEADERFLAG
	wxSTC_FOLDLEVELWHITEFLAG
	wxSTC_FOLDLEVELBASE
	wxSTC_FIND_POSIX
	wxSTC_FIND_REGEXP
	wxSTC_FIND_WORDSTART
	wxSTC_FIND_MATCHCASE
	wxSTC_FIND_WHOLEWORD
	wxSTC_PRINT_COLOURONWHITEDEFAULTBG
	wxSTC_PRINT_COLOURONWHITE
	wxSTC_PRINT_BLACKONWHITE
	wxSTC_PRINT_INVERTLIGHT
	wxSTC_PRINT_NORMAL
	wxSTC_INDICS_MASK
	wxSTC_INDIC2_MASK
	wxSTC_INDIC1_MASK
	wxSTC_INDIC0_MASK
	wxSTC_INDIC_ROUNDBOX
	wxSTC_INDIC_BOX
	wxSTC_INDIC_HIDDEN
	wxSTC_INDIC_STRIKE
	wxSTC_INDIC_DIAGONAL
	wxSTC_INDIC_TT
	wxSTC_INDIC_SQUIGGLE
	wxSTC_INDIC_PLAIN
	wxSTC_INDIC_MAX
	wxSTC_CASE_LOWER
	wxSTC_CASE_UPPER
	wxSTC_CASE_MIXED
	wxSTC_CHARSET_8859_15
	wxSTC_CHARSET_THAI
	wxSTC_CHARSET_VIETNAMESE
	wxSTC_CHARSET_ARABIC
	wxSTC_CHARSET_HEBREW
	wxSTC_CHARSET_JOHAB
	wxSTC_CHARSET_TURKISH
	wxSTC_CHARSET_SYMBOL
	wxSTC_CHARSET_SHIFTJIS
	wxSTC_CHARSET_CYRILLIC
	wxSTC_CHARSET_RUSSIAN
	wxSTC_CHARSET_OEM
	wxSTC_CHARSET_MAC
	wxSTC_CHARSET_HANGUL
	wxSTC_CHARSET_GREEK
	wxSTC_CHARSET_GB2312
	wxSTC_CHARSET_EASTEUROPE
	wxSTC_CHARSET_CHINESEBIG5
	wxSTC_CHARSET_BALTIC
	wxSTC_CHARSET_DEFAULT
	wxSTC_CHARSET_ANSI
	wxSTC_STYLE_MAX
	wxSTC_STYLE_LASTPREDEFINED
	wxSTC_STYLE_CALLTIP
	wxSTC_STYLE_INDENTGUIDE
	wxSTC_STYLE_CONTROLCHAR
	wxSTC_STYLE_BRACEBAD
	wxSTC_STYLE_BRACELIGHT
	wxSTC_STYLE_LINENUMBER
	wxSTC_STYLE_DEFAULT
	wxSTC_MARGIN_FORE
	wxSTC_MARGIN_BACK
	wxSTC_MARGIN_NUMBER
	wxSTC_MARGIN_SYMBOL
	wxSTC_MASK_FOLDERS
	wxSTC_MARKNUM_FOLDEROPEN
	wxSTC_MARKNUM_FOLDER
	wxSTC_MARKNUM_FOLDERSUB
	wxSTC_MARKNUM_FOLDERTAIL
	wxSTC_MARKNUM_FOLDERMIDTAIL
	wxSTC_MARKNUM_FOLDEROPENMID
	wxSTC_MARKNUM_FOLDEREND
	wxSTC_MARK_CHARACTER
	wxSTC_MARK_FULLRECT
	wxSTC_MARK_PIXMAP
	wxSTC_MARK_ARROWS
	wxSTC_MARK_DOTDOTDOT
	wxSTC_MARK_BACKGROUND
	wxSTC_MARK_CIRCLEMINUSCONNECTED
	wxSTC_MARK_CIRCLEMINUS
	wxSTC_MARK_CIRCLEPLUSCONNECTED
	wxSTC_MARK_CIRCLEPLUS
	wxSTC_MARK_TCORNERCURVE
	wxSTC_MARK_LCORNERCURVE
	wxSTC_MARK_BOXMINUSCONNECTED
	wxSTC_MARK_BOXMINUS
	wxSTC_MARK_BOXPLUSCONNECTED
	wxSTC_MARK_BOXPLUS
	wxSTC_MARK_TCORNER
	wxSTC_MARK_LCORNER
	wxSTC_MARK_VLINE
	wxSTC_MARK_PLUS
	wxSTC_MARK_MINUS
	wxSTC_MARK_ARROWDOWN
	wxSTC_MARK_EMPTY
	wxSTC_MARK_SHORTARROW
	wxSTC_MARK_SMALLRECT
	wxSTC_MARK_ARROW
	wxSTC_MARK_ROUNDRECT
	wxSTC_MARK_CIRCLE
	wxSTC_MARKER_MAX
	wxSTC_CP_DBCS
	wxSTC_CP_UTF8
	wxSTC_EOL_LF
	wxSTC_EOL_CR
	wxSTC_EOL_CRLF
	wxSTC_WS_VISIBLEAFTERINDENT
	wxSTC_WS_VISIBLEALWAYS
	wxSTC_WS_INVISIBLE
	wxSTC_LEXER_START
	wxSTC_OPTIONAL_START
	wxSTC_START
	wxSTC_INVALID_POSITION
	wxSTC_USE_POPUP

	class wxStyledTextEvent public wxCommandEvent
		wxEvent * Clone ()
		bool GetAlt ()
		bool GetControl ()
		bool GetShift ()
		wxDragResult GetDragResult ()
		bool GetDragAllowMove ()
		wxString GetDragText ()
		int GetY ()
		int GetX ()
		int GetListType ()
		int GetLParam ()
		int GetWParam ()
		int GetMessage ()
		int GetMargin ()
		int GetFoldLevelPrev ()
		int GetFoldLevelNow ()
		int GetLine ()
		int GetLinesAdded ()
		int GetLength ()
		wxString GetText ()
		int GetModificationType ()
		int GetModifiers ()
		int GetKey ()
		int GetPosition ()
		void SetDragResult (wxDragResult)
		void SetDragAllowMove (bool)
		void SetDragText (const wxString &)
		void SetY (int)
		void SetX (int)
		void SetListType (int)
		void SetLParam (int)
		void SetWParam (int)
		void SetMessage (int)
		void SetMargin (int)
		void SetFoldLevelPrev (int)
		void SetFoldLevelNow (int)
		void SetLine (int)
		void SetLinesAdded (int)
		void SetLength (int)
		void SetText (const wxString &)
		void SetModificationType (int)
		void SetModifiers (int)
		void SetKey (int)
		void SetPosition (int)
		~wxStyledTextEvent ()
		wxStyledTextEvent (const wxStyledTextEvent &)
		wxStyledTextEvent (wxEventType,int)
	class wxStyledTextCtrl public wxControl
		void AppendTextRaw (const char *)
		wxCharBuffer GetTextRaw ()
		void SetTextRaw (const char *)
		wxCharBuffer GetTextRangeRaw (int,int)
		wxCharBuffer GetSelectedTextRaw ()
		wxCharBuffer GetLineRaw (int)
		wxCharBuffer GetCurLineRaw (int *)
		void InsertTextRaw (int,const char *)
		void AddTextRaw (const char *)
		bool GetUseAntiAliasing ()
		void SetUseAntiAliasing (bool)
		bool DoDropText (long,long,const wxString &)
		wxDragResult DoDragOver (wxCoord,wxCoord,wxDragResult)
		bool LoadFile (const wxString &)
		bool SaveFile (const wxString &)
		void SetLastKeydownProcessed (bool)
		bool GetLastKeydownProcessed ()
		void SetHScrollBar (wxScrollBar *)
		void SetVScrollBar (wxScrollBar *)
		wxIntPtr SendMsg (int,wxUIntPtr,wxIntPtr)
		void ScrollToColumn (int)
		void ScrollToLine (int)
		wxPoint PointFromPosition (int)
		void GetSelection (int *,int *)
		void SetMargins (int,int)
		void CmdKeyExecute (int)
		void StyleSetFontEncoding (int,wxFontEncoding)
		void StyleSetCharacterSet (int,int)
		void StyleSetFontAttr (int,int,const wxString &,bool,bool,bool,wxFontEncoding)
		void StyleSetFont (int,wxFont &)
		void StyleSetSpec (int,const wxString &)
		int GetCurrentLine ()
		int GetStyleBitsNeeded ()
		int GetPropertyInt (const wxString &)
		wxString GetPropertyExpanded (const wxString &)
		wxString GetProperty (const wxString &)
		void SetLexerLanguage (const wxString &)
		void SetKeyWords (int,const wxString &)
		void SetProperty (const wxString &,const wxString &)
		void Colourise (int,int)
		int GetLexer ()
		void SetLexer (int)
		void StopRecord ()
		void StartRecord ()
		int GetCaretLineBackAlpha ()
		void SetCaretLineBackAlpha (int)
		void SelectionDuplicate ()
		bool GetPasteConvertEndings ()
		void SetPasteConvertEndings (bool)
		void ToggleCaretSticky ()
		void SetCaretSticky (bool)
		bool GetCaretSticky ()
		int FindColumn (int,int)
		void Allocate (int)
		int AutoCompGetCurrent ()
		void SetCharsDefault ()
		void SetWhitespaceChars (const wxString &)
		void WordRightEndExtend ()
		void WordRightEnd ()
		void WordLeftEndExtend ()
		void WordLeftEnd ()
		void StutteredPageDownExtend ()
		void StutteredPageDown ()
		void StutteredPageUpExtend ()
		void StutteredPageUp ()
		void PageDownRectExtend ()
		void PageUpRectExtend ()
		void LineEndRectExtend ()
		void VCHomeRectExtend ()
		void HomeRectExtend ()
		void CharRightRectExtend ()
		void CharLeftRectExtend ()
		void LineUpRectExtend ()
		void LineDownRectExtend ()
		int GetLineSelEndPosition (int)
		int GetLineSelStartPosition (int)
		int GetSelectionMode ()
		void SetSelectionMode (int)
		void CopyText (int,const wxString &)
		void CopyRange (int,int)
		int PositionAfter (int)
		int PositionBefore (int)
		void ParaUpExtend ()
		void ParaUp ()
		void ParaDownExtend ()
		void ParaDown ()
		void SetHotspotSingleLine (bool)
		void SetHotspotActiveUnderline (bool)
		void SetHotspotActiveBackground (bool,const wxColour &)
		void SetHotspotActiveForeground (bool,const wxColour &)
		int GetPrintWrapMode ()
		void SetPrintWrapMode (int)
		void SetYCaretPolicy (int,int)
		void SetXCaretPolicy (int,int)
		void ChooseCaretX ()
		int GetXOffset ()
		void SetXOffset (int)
		void DelLineRight ()
		void DelLineLeft ()
		void SetVisiblePolicy (int,int)
		void WordPartRightExtend ()
		void WordPartRight ()
		void WordPartLeftExtend ()
		void WordPartLeft ()
		int GetControlCharSymbol ()
		void SetControlCharSymbol (int)
		int GetSTCCursor ()
		void SetSTCCursor (int)
		bool GetMouseDownCaptures ()
		void SetMouseDownCaptures (bool)
		int GetStatus ()
		void SetStatus (int)
		bool GetSTCFocus ()
		void SetSTCFocus (bool)
		int GetModEventMask ()
		void ReleaseDocument (void *)
		void AddRefDocument (void *)
		void * CreateDocument ()
		int GetZoom ()
		void SetZoom (int)
		bool SelectionIsRectangle ()
		void UsePopUp (bool)
		int LinesOnScreen ()
		int SearchPrev (int,const wxString &)
		int SearchNext (int,const wxString &)
		void SearchAnchor ()
		void SetEdgeColour (const wxColour &)
		wxColour GetEdgeColour ()
		void SetEdgeMode (int)
		int GetEdgeMode ()
		void SetEdgeColumn (int)
		int GetEdgeColumn ()
		void SetModEventMask (int)
		void SetDocPointer (void *)
		void * GetDocPointer ()
		void SetViewEOL (bool)
		bool GetViewEOL ()
		int BraceMatch (int)
		void BraceBadLight (int)
		void BraceHighlight (int,int)
		int LineLength (int)
		void MoveCaretInsideView ()
		void LineCopy ()
		void VCHomeWrapExtend ()
		void VCHomeWrap ()
		void LineEndWrapExtend ()
		void LineEndWrap ()
		void HomeWrapExtend ()
		void HomeWrap ()
		void LineEndDisplayExtend ()
		void LineEndDisplay ()
		void HomeDisplayExtend ()
		void HomeDisplay ()
		void DeleteBackNotLine ()
		void LineScrollUp ()
		void LineScrollDown ()
		void UpperCase ()
		void LowerCase ()
		void LineDuplicate ()
		void LineTranspose ()
		void LineDelete ()
		void LineCut ()
		void DelWordRight ()
		void DelWordLeft ()
		void ZoomOut ()
		void ZoomIn ()
		void VCHomeExtend ()
		void VCHome ()
		void FormFeed ()
		void NewLine ()
		void BackTab ()
		void Tab ()
		void DeleteBack ()
		void Cancel ()
		void EditToggleOvertype ()
		void PageDownExtend ()
		void PageDown ()
		void PageUpExtend ()
		void PageUp ()
		void DocumentEndExtend ()
		void DocumentEnd ()
		void DocumentStartExtend ()
		void DocumentStart ()
		void LineEndExtend ()
		void LineEnd ()
		void HomeExtend ()
		void Home ()
		void WordRightExtend ()
		void WordRight ()
		void WordLeftExtend ()
		void WordLeft ()
		void CharRightExtend ()
		void CharRight ()
		void CharLeftExtend ()
		void CharLeft ()
		void LineUpExtend ()
		void LineUp ()
		void LineDownExtend ()
		void LineDown ()
		void SetFoldMarginHiColour (bool,const wxColour &)
		void SetFoldMarginColour (bool,const wxColour &)
		void LinesSplit (int)
		void LinesJoin ()
		void TargetFromSelection ()
		void SetTwoPhaseDraw (bool)
		bool GetTwoPhaseDraw ()
		void AppendText (const wxString &)
		bool GetUseVerticalScrollBar ()
		void SetUseVerticalScrollBar (bool)
		int TextHeight (int)
		bool GetEndAtLastLine ()
		void SetEndAtLastLine (bool)
		int TextWidth (int,const wxString &)
		int GetScrollWidth ()
		void SetScrollWidth (int)
		int GetLayoutCache ()
		void SetLayoutCache (int)
		int GetWrapStartIndent ()
		void SetWrapStartIndent (int)
		int GetWrapVisualFlagsLocation ()
		void SetWrapVisualFlagsLocation (int)
		int GetWrapVisualFlags ()
		void SetWrapVisualFlags (int)
		int GetWrapMode ()
		void SetWrapMode (int)
		int WordEndPosition (int,bool)
		int WordStartPosition (int,bool)
		int GetMouseDwellTime ()
		void SetMouseDwellTime (int)
		bool GetBackSpaceUnIndents ()
		void SetBackSpaceUnIndents (bool)
		bool GetTabIndents ()
		void SetTabIndents (bool)
		void EnsureVisibleEnforcePolicy (int)
		void SetFoldFlags (int)
		void EnsureVisible (int)
		void ToggleFold (int)
		bool GetFoldExpanded (int)
		void SetFoldExpanded (int,bool)
		bool GetLineVisible (int)
		void HideLines (int,int)
		void ShowLines (int,int)
		int GetFoldParent (int)
		int GetLastChild (int,int)
		int GetFoldLevel (int)
		void SetFoldLevel (int,int)
		int WrapCount (int)
		int DocLineFromVisible (int)
		int VisibleFromDocLine (int)
		void CallTipUseStyle (int)
		void CallTipSetForegroundHighlight (const wxColour &)
		void CallTipSetForeground (const wxColour &)
		void CallTipSetBackground (const wxColour &)
		void CallTipSetHighlight (int,int)
		int CallTipPosAtStart ()
		bool CallTipActive ()
		void CallTipCancel ()
		void CallTipShow (int,const wxString &)
		int GetSearchFlags ()
		void SetSearchFlags (int)
		int SearchInTarget (const wxString &)
		int ReplaceTargetRE (const wxString &)
		int ReplaceTarget (const wxString &)
		int GetTargetEnd ()
		void SetTargetEnd (int)
		int GetTargetStart ()
		void SetTargetStart (int)
		int GetCaretWidth ()
		void SetCaretWidth (int)
		bool GetOvertype ()
		void SetOvertype (bool)
		int GetTextLength ()
		wxString GetText ()
		void SetText (const wxString &)
		void Clear ()
		void Paste ()
		void Copy ()
		void Cut ()
		void Undo ()
		void EmptyUndoBuffer ()
		bool CanUndo ()
		bool CanPaste ()
		void SetReadOnly (bool)
		void ReplaceSelection (const wxString &)
		void EnsureCaretVisible ()
		void LineScroll (int,int)
		int PositionFromLine (int)
		int LineFromPosition (int)
		void HideSelection (bool)
		wxString GetTextRange (int,int)
		wxString GetSelectedText ()
		void SetSelection (int,int)
		bool GetModify ()
		int GetMarginRight ()
		void SetMarginRight (int)
		int GetMarginLeft ()
		void SetMarginLeft (int)
		int GetLineCount ()
		wxString GetLine (int)
		int GetFirstVisibleLine ()
		int FormatRange (bool,int,int,wxDC *,wxDC *,wxRect,wxRect)
		int FindText (int,int,const wxString &,int)
		int GetPrintColourMode ()
		void SetPrintColourMode (int)
		int GetPrintMagnification ()
		void SetPrintMagnification (int)
		int GetSelectionEnd ()
		void SetSelectionEnd (int)
		int GetSelectionStart ()
		void SetSelectionStart (int)
		void SetCurrentPos (int)
		bool GetReadOnly ()
		wxColour GetCaretForeground ()
		int GetCodePage ()
		int GetLineEndPosition (int)
		int GetHighlightGuide ()
		void SetHighlightGuide (int)
		bool GetIndentationGuides ()
		void SetIndentationGuides (bool)
		bool GetUseHorizontalScrollBar ()
		void SetUseHorizontalScrollBar (bool)
		int GetColumn (int)
		int GetLineIndentPosition (int)
		int GetLineIndentation (int)
		void SetLineIndentation (int,int)
		bool GetUseTabs ()
		void SetUseTabs (bool)
		int GetIndent ()
		void SetIndent (int)
		int AutoCompGetMaxHeight ()
		void AutoCompSetMaxHeight (int)
		int AutoCompGetMaxWidth ()
		void AutoCompSetMaxWidth (int)
		void AutoCompSetTypeSeparator (int)
		int AutoCompGetTypeSeparator ()
		void ClearRegisteredImages ()
		void RegisterImage (int,const wxBitmap &)
		bool AutoCompGetDropRestOfWord ()
		void AutoCompSetDropRestOfWord (bool)
		bool AutoCompGetAutoHide ()
		void AutoCompSetAutoHide (bool)
		void UserListShow (int,const wxString &)
		bool AutoCompGetIgnoreCase ()
		void AutoCompSetIgnoreCase (bool)
		bool AutoCompGetChooseSingle ()
		void AutoCompSetChooseSingle (bool)
		void AutoCompSetFillUps (const wxString &)
		bool AutoCompGetCancelAtStart ()
		void AutoCompSetCancelAtStart (bool)
		void AutoCompSelect (const wxString &)
		int AutoCompGetSeparator ()
		void AutoCompSetSeparator (int)
		void AutoCompStops (const wxString &)
		void AutoCompComplete ()
		int AutoCompPosStart ()
		bool AutoCompActive ()
		void AutoCompCancel ()
		void AutoCompShow (int,const wxString &)
		void StyleSetChangeable (int,bool)
		void SetCaretLineBackground (const wxColour &)
		wxColour GetCaretLineBackground ()
		void SetCaretLineVisible (bool)
		bool GetCaretLineVisible ()
		int GetMaxLineState ()
		int GetLineState (int)
		void SetLineState (int,int)
		int GetStyleBits ()
		void SetStyleBits (int)
		void SetWhitespaceBackground (bool,const wxColour &)
		void SetWhitespaceForeground (bool,const wxColour &)
		wxColour IndicatorGetForeground (int)
		void IndicatorSetForeground (int,const wxColour &)
		int IndicatorGetStyle (int)
		void IndicatorSetStyle (int,int)
		void EndUndoAction ()
		void BeginUndoAction ()
		void SetWordChars (const wxString &)
		void SetCaretPeriod (int)
		int GetCaretPeriod ()
		void StyleSetVisible (int,bool)
		void SetStyleBytes (int,char *)
		void CmdKeyClearAll ()
		void CmdKeyClear (int,int)
		void CmdKeyAssign (int,int,int)
		void SetCaretForeground (const wxColour &)
		void SetSelAlpha (int)
		int GetSelAlpha ()
		void SetSelBackground (bool,const wxColour &)
		void SetSelForeground (bool,const wxColour &)
		void StyleSetHotSpot (int,bool)
		void StyleSetCase (int,int)
		void StyleSetUnderline (int,bool)
		void StyleResetDefault ()
		void StyleSetEOLFilled (int,bool)
		void StyleSetFaceName (int,const wxString &)
		void StyleSetSize (int,int)
		void StyleSetItalic (int,bool)
		void StyleSetBold (int,bool)
		void StyleSetBackground (int,const wxColour &)
		void StyleSetForeground (int,const wxColour &)
		void StyleClearAll ()
		bool GetMarginSensitive (int)
		void SetMarginSensitive (int,bool)
		int GetMarginMask (int)
		void SetMarginMask (int,int)
		int GetMarginWidth (int)
		void SetMarginWidth (int,int)
		int GetMarginType (int)
		void SetMarginType (int,int)
		void MarkerSetAlpha (int,int)
		void MarkerAddSet (int,int)
		void MarkerDefineBitmap (int,const wxBitmap &)
		int MarkerPrevious (int,int)
		int MarkerNext (int,int)
		int MarkerGet (int)
		void MarkerDeleteAll (int)
		void MarkerDelete (int,int)
		int MarkerAdd (int,int)
		void MarkerSetBackground (int,const wxColour &)
		void MarkerSetForeground (int,const wxColour &)
		void MarkerDefine (int,int,const wxColour &,const wxColour &)
		void SetCodePage (int)
		int GetTabWidth ()
		void SetTabWidth (int)
		void SetBufferedDraw (bool)
		bool GetBufferedDraw ()
		void SetStyling (int,int)
		void StartStyling (int,int)
		void SetEOLMode (int)
		int GetEOLMode ()
		void ConvertEOLs (int)
		int GetEndStyled ()
		wxString GetCurLine (int *)
		void SetAnchor (int)
		void GotoPos (int)
		void GotoLine (int)
		int PositionFromPointClose (int,int)
		int PositionFromPoint (wxPoint)
		void SetViewWhiteSpace (int)
		int GetViewWhiteSpace ()
		bool GetUndoCollection ()
		void MarkerDeleteHandle (int)
		int MarkerLineFromHandle (int)
		bool CanRedo ()
		wxMemoryBuffer GetStyledText (int,int)
		void SetSavePoint ()
		void SelectAll ()
		void SetUndoCollection (bool)
		void Redo ()
		int GetStyleAt (int)
		int GetAnchor ()
		int GetCurrentPos ()
		int GetCharAt (int)
		int GetLength ()
		void ClearDocumentStyle ()
		void ClearAll ()
		void InsertText (int,const wxString &)
		void AddStyledText (const wxMemoryBuffer &)
		void AddText (const wxString &)
		bool Create (wxWindow *,wxWindowID,const wxPoint &,const wxSize &,long,const wxString &)
		~wxStyledTextCtrl ()
		wxStyledTextCtrl ()
		wxStyledTextCtrl (wxWindow *,wxWindowID,const wxPoint &,const wxSize &,long,const wxString &)
